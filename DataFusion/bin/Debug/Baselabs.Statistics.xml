<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Baselabs.Statistics</name>
  </assembly>
  <members>
    <member name="T:Baselabs.Statistics.Distributions.Conditional">
      <summary>
            Provides extension methods for distributions that implement the <see cref="T:Baselabs.Statistics.Distributions.IConditional`1" />
            interface.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Evaluate``2(``1,``0,System.TimeSpan)">
      <summary>
            Evaluates the value of the probability mass function (PMF) or the probability density function (PDF)
            for the specified sample and the given time condition.
            </summary>
      <param name="evaluableTimeConditional">The conditional distribution to evaluate.</param>
      <param name="sample">The sample.</param>
      <param name="timeCondition">The duration between the last and the current time step.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.ITimeConditional" /> and <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" />.</typeparam>
      <returns>
            The value of the PMF or the PDF.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Evaluate``3(``1,``0,``2)">
      <summary>
            Evaluates the value of the probability mass function (PMF) or the probability density function (PDF)
            for the specified sample and the given condition.
            </summary>
      <param name="evaluableConditional">The conditional distribution to evaluate.</param>
      <param name="sample">The sample.</param>
      <param name="condition">The condition.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.IConditional`1" /> and <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" />.</typeparam>
      <typeparam name="TCondition">The type of the condition.</typeparam>
      <returns>
            The value of the PMF or the PDF.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Evaluate``3(``1,``0,``2,System.TimeSpan)">
      <summary>
            Evaluates the value of the probability mass function (PMF) or the probability density function (PDF)
            for the specified sample and the given condition and time condition.
            </summary>
      <param name="evaluableTimeConditional">The conditional distribution to evaluate.</param>
      <param name="sample">The sample.</param>
      <param name="condition">The condition.</param>
      <param name="timeCondition">The duration between the last and the current time step.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.IConditional`1" />, <see cref="T:Baselabs.Statistics.Distributions.ITimeConditional" />,
            and <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" />.</typeparam>
      <typeparam name="TCondition">The type of the condition.</typeparam>
      <returns>
            The value of the PMF or the PDF.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Evaluate``4(``1,``0,``2,``3)">
      <summary>
            Evaluates the value of the probability mass function (PMF) or the probability density function (PDF)
            for the specified sample and the given conditions.
            </summary>
      <param name="evaluableConditional">The conditional distribution to evaluate.</param>
      <param name="sample">The sample.</param>
      <param name="condition1">The first condition.</param>
      <param name="condition2">The second condition.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.IConditional`1" /> and <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" />.</typeparam>
      <typeparam name="TCondition1">The type of the first condition.</typeparam>
      <typeparam name="TCondition2">The type of the second condition.</typeparam>
      <returns>
            The value of the PMF or the PDF.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Evaluate``4(``1,``0,``2,``3,System.TimeSpan)">
      <summary>
            Evaluates the value of the probability mass function (PMF) or the probability density function (PDF)
            for the specified sample and the given condition and time condition.
            </summary>
      <param name="evaluableTimeConditional">The conditional distribution to evaluate.</param>
      <param name="sample">The sample.</param>
      <param name="condition1">The first condition.</param>
      <param name="condition2">The second condition.</param>
      <param name="timeCondition">The duration between the last and the current time step.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.IConditional`2" />, <see cref="T:Baselabs.Statistics.Distributions.ITimeConditional" />,
            and <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" />.</typeparam>
      <typeparam name="TCondition1">The type of the first condition.</typeparam>
      <typeparam name="TCondition2">The type of the second condition.</typeparam>
      <returns>
            The value of the PMF or the PDF.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Evaluate``5(``1,``0,``2,``3,``4)">
      <summary>
            Evaluates the value of the probability mass function (PMF) or the probability density function (PDF)
            for the specified sample and the given conditions.
            </summary>
      <param name="evaluableConditional">The conditional distribution to evaluate.</param>
      <param name="sample">The sample.</param>
      <param name="condition1">The first condition.</param>
      <param name="condition2">The second condition.</param>
      <param name="condition3">The third condition.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.IConditional`3" />
            and <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" />.</typeparam>
      <typeparam name="TCondition1">The type of the first condition.</typeparam>
      <typeparam name="TCondition2">The type of the second condition.</typeparam>
      <typeparam name="TCondition3">The type of the third condition.</typeparam>
      <returns>
            The value of the PMF or the PDF.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Evaluate``6(``1,``0,``2,``3,``4,``5)">
      <summary>
            Evaluates the value of the probability mass function (PMF) or the probability density function (PDF)
            for the specified sample and the given conditions.
            </summary>
      <param name="evaluableConditional">The conditional distribution to evaluate.</param>
      <param name="sample">The sample.</param>
      <param name="condition1">The first condition.</param>
      <param name="condition2">The second condition.</param>
      <param name="condition3">The third condition.</param>
      <param name="condition4">The fourth condition.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.IConditional`4" />
            and <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" />.</typeparam>
      <typeparam name="TCondition1">The type of the first condition.</typeparam>
      <typeparam name="TCondition2">The type of the second condition.</typeparam>
      <typeparam name="TCondition3">The type of the third condition.</typeparam>
      <typeparam name="TCondition4">The type of the fourth condition.</typeparam>
      <returns>
            The value of the PMF or the PDF.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Evaluate``7(``1,``0,``2,``3,``4,``5,``6)">
      <summary>
            Evaluates the value of the probability mass function (PMF) or the probability density function (PDF)
            for the specified sample and the given conditions.
            </summary>
      <param name="evaluableConditional">The conditional distribution to evaluate.</param>
      <param name="sample">The sample.</param>
      <param name="condition1">The first condition.</param>
      <param name="condition2">The second condition.</param>
      <param name="condition3">The third condition.</param>
      <param name="condition4">The fourth condition.</param>
      <param name="condition5">The fifth condition.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.IConditional`5" />
            and <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" />.</typeparam>
      <typeparam name="TCondition1">The type of the first condition.</typeparam>
      <typeparam name="TCondition2">The type of the second condition.</typeparam>
      <typeparam name="TCondition3">The type of the third condition.</typeparam>
      <typeparam name="TCondition4">The type of the fourth condition.</typeparam>
      <typeparam name="TCondition5">The type of the fifth condition.</typeparam>
      <returns>
            The value of the PMF or the PDF.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.EvaluateMarginalized``3(``1,``0,Baselabs.Statistics.Distributions.SampleSet{``2})">
      <summary>
            Marginalizes the specified conditional distribution with at least one condition
            over the distribution of the first condition and evaluates the value of the
            probability mass function (PMF) or the probability density function (PDF)
            for the specified sample.
            </summary>
      <param name="evaluableConditional">The conditional distribution.</param>
      <param name="sample">The sample to evaluate.</param>
      <param name="condition">The condition.</param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and
            provides a parameterless constructor.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to be a class type implementing
            <see cref="T:Baselabs.Statistics.Distributions.IConditional`1" /> and <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" />.</typeparam>
      <typeparam name="TConditionSpace">The type of the condition space which needs to inherit from
            <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor.</typeparam>
      <returns>
            The value of the PMF or the PDF.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Marginalize``3(``1,Baselabs.Statistics.Distributions.SigmaPoints{``2})">
      <summary>
            Marginalizes the specified conditional distribution with at least one condition
            over the distribution of the first condition.
            </summary>
      <param name="conditionalDistribution">The conditional distribution that is marginalized.</param>
      <param name="condition">The probability distribution of the condition over which is marginalized.</param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and
            provides a parameterless constructor.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.IConditional`1" /> and <see cref="T:Baselabs.Statistics.Distributions.IExpectation`1" />.</typeparam>
      <typeparam name="TConditionSpace">The type of the condition space which needs to inherit from
            <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor.</typeparam>
      <returns>The marginal probability distribution.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition" /> is null.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Marginalize``4(``1,Baselabs.Statistics.Distributions.SigmaPoints{``2},Baselabs.Statistics.Distributions.SigmaPoints{``3})">
      <summary>
             Marginalizes the specified conditional distribution with at least two conditions
             over the distributions of the first and the second condition.
             </summary>
      <param name="conditionalDistribution">The conditional distribution that is marginalized.</param>
      <param name="condition1">The probability distribution of the first condition over which is marginalized.
             </param>
      <param name="condition2">The probability distribution of the second condition over which is marginalized.
             </param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and
             provides a parameterless constructor.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to implement
             <see cref="T:Baselabs.Statistics.Distributions.IConditional`2" /> and <see cref="T:Baselabs.Statistics.Distributions.IExpectation`1" />.
             </typeparam>
      <typeparam name="TConditionSpace1">The type of the first condition space which needs to inherit
             from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor.</typeparam>
      <typeparam name="TConditionSpace2">The type of the second condition space which needs to inherit
             from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor.</typeparam>
      <returns>The marginal probability distribution.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition1" /> or <paramref name="condition2" /> is null.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Marginalize``5(``1,Baselabs.Statistics.Distributions.SigmaPoints{``2},Baselabs.Statistics.Distributions.SigmaPoints{``3},Baselabs.Statistics.Distributions.SigmaPoints{``4})">
      <summary>
            Marginalizes the specified conditional distribution with at least three conditions
            over the distributions of the first, second, and third condition.
            </summary>
      <param name="conditionalDistribution">The conditional distribution that is marginalized.</param>
      <param name="condition1">The probability distribution of the first condition over which is marginalized.
            </param>
      <param name="condition2">The probability distribution of the second condition over which is marginalized.
            </param>
      <param name="condition3">The probability distribution of the third condition over which is marginalized.
            </param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and
            provides a parameterless constructor.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.IConditional`3" />
            and <see cref="T:Baselabs.Statistics.Distributions.IExpectation`1" />.
            </typeparam>
      <typeparam name="TConditionSpace1">The type of the first condition space which needs to inherit
            from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor.</typeparam>
      <typeparam name="TConditionSpace2">The type of the second condition space which needs to inherit
            from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor.</typeparam>
      <typeparam name="TConditionSpace3">The type of the third condition space which needs to inherit
            from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor.</typeparam>
      <returns>The marginal probability distribution.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition1" />, <paramref name="condition2" />, or <paramref name="condition3" /> is null.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Marginalize``5(``1,Baselabs.Statistics.Distributions.SigmaPoints{``2},Baselabs.Statistics.Distributions.SigmaPoints{``4})">
      <summary>
            Marginalizes the specified conditional distribution with at least three conditions
            over the distributions of the first and the third condition.
            </summary>
      <param name="conditionalDistribution">The conditional distribution that is marginalized.</param>
      <param name="condition1">The probability distribution of the first condition over which is marginalized.
            </param>
      <param name="condition3">The probability distribution of the third condition over which is marginalized.
            </param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and
            provides a parameterless constructor.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.IConditional`3" /> and
            <see cref="T:Baselabs.Statistics.Distributions.IExpectation`1" />.
            </typeparam>
      <typeparam name="TConditionSpace1">The type of the first condition space which needs to inherit
            from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor.</typeparam>
      <typeparam name="TVoid">The type of the second condition. It can be arbitrary, but must be identical
            to the second condition of <typeparamref name="TConditional" />.</typeparam>
      <typeparam name="TConditionSpace3">The type of the third condition space which needs to inherit
            from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor.</typeparam>
      <returns>The marginal probability distribution.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition1" /> or <paramref name="condition3" /> is null.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Marginalize``4(``1,Baselabs.Statistics.Distributions.SigmaPoints{``3})">
      <summary>
            Marginalizes the specified conditional distribution with at least two conditions
            over the distribution of the second condition.
            </summary>
      <param name="conditionalDistribution">The conditional distribution that is marginalized.</param>
      <param name="condition2">The probability distribution of the second condition over which
            is marginalized.</param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and
            provides a parameterless constructor.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.IConditional`2" /> and <see cref="T:Baselabs.Statistics.Distributions.IExpectation`1" />.</typeparam>
      <typeparam name="TVoid">The type of the first condition. It can be arbitrary, but must be identical
            to the first condition of <typeparamref name="TConditional" />.</typeparam>
      <typeparam name="TConditionSpace2">The type of the second condition space which needs to inherit
            from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor. </typeparam>
      <returns>The marginal probability distribution.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="condition2" /> is null.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Marginalize``4(``1,``3)">
      <summary>
            Marginalizes the specified conditional distribution with at least one condition
            over the distribution of the first condition.
            </summary>
      <param name="conditionalDistribution">The conditional distribution that is marginalized.</param>
      <param name="condition">The probability distribution of the condition over which is marginalized.</param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and
            provides a parameterless constructor.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to be a class type implementing
            <see cref="T:Baselabs.Statistics.Distributions.IConditional`1" /> and <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" />.</typeparam>
      <typeparam name="TConditionSpace">The type of the condition space,
            it must inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TCondition">The type of the condition which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>The marginal probability distribution.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.Marginalize``6(``1,``3,``5)">
      <summary>
             Marginalizes the specified conditional distribution with at least two conditions
             over the distribution of the first and the second condition.
             </summary>
      <param name="conditionalDistribution">The conditional distribution that is marginalized.</param>
      <param name="condition1">The probability distribution of the first condition over which is marginalized.
             </param>
      <param name="condition2">The probability distribution of the second condition over which is marginalized.
             </param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and
             provides a parameterless constructor.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to be a class type implementing
             <see cref="T:Baselabs.Statistics.Distributions.IConditional`1" /> and <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" />.</typeparam>
      <typeparam name="TConditionSpace1">The type of the first condition space,
             it must inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TCondition1">The type of the first condition which needs to implement
             <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <typeparam name="TConditionSpace2">The type of the second condition space,
             it must inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TCondition2">The type of the second condition which needs to implement
             <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>The marginal probability distribution.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Conditional.MarginalizePartially``5(``1,``4)">
      <summary>
             Marginalizes the specified conditional distribution with at least two conditions
             over the distribution of the second condition.
             </summary>
      <param name="conditionalDistribution">The conditional distribution that is marginalized.</param>
      <param name="condition2">The probability distribution of the second condition over which is marginalized.
             </param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and
             provides a parameterless constructor.</typeparam>
      <typeparam name="TConditional">The type of the conditional which needs to be a class type implementing
             <see cref="T:Baselabs.Statistics.Distributions.IConditional`1" /> and <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" />.</typeparam>
      <typeparam name="TConditionSpace1">The type of the first condition space,
             it must inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TConditionSpace2">The type of the second condition space,
             it must inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TCondition2">The type of the second condition which needs to implement
             <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" /> and <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>The partially marginalized conditional probability distribution.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.Covariance">
      <summary>
            Provides extension methods for distributions that implement the <see cref="T:Baselabs.Statistics.Distributions.ICovariance`1" /> interface.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Covariance.GetCovarianceEllipseParameters``1(Baselabs.Statistics.Distributions.ICovariance{``0},System.Double)">
      <summary>
            Gets the parameters of the covariance ellipse which is formed by all points that have the same
            Mahalanobis distance to the expectation value.
            </summary>
      <param name="distribution">
                The distribution which needs to implement <see cref="T:Baselabs.Statistics.Distributions.ICovariance`1" />.
            </param>
      <param name="mahalanobisDistance">The Mahalanobis distance of the covariance ellipse.</param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />,
            provides a parameterless constructor, and implements <see cref="T:Baselabs.Statistics.Spaces.ICartesian" />.</typeparam>
      <returns>
            The parameters of the covariance ellipse.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="mahalanobisDistance" /> is less than zero.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="distribution" /> is <c>null</c>.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.CovarianceEllipseParameters">
      <summary>
            The parameters of a covariance ellipse.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.CovarianceEllipseParameters.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.CovarianceEllipseParameters" /> structure.
            </summary>
      <param name="majorSemiAxis">The major semi-axis.</param>
      <param name="minorSemiAxis">The minor semi-axis.</param>
      <param name="angle">The angle between the <paramref name="majorSemiAxis" /> of the ellipse and the x-axis
            of the underlying coordinate system.</param>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.CovarianceEllipseParameters.Angle">
      <summary>
            Gets the angle between the <see cref="P:Baselabs.Statistics.Distributions.CovarianceEllipseParameters.MajorSemiAxis" /> of the ellipse and the x-axis
            of the underlying coordinate system.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.CovarianceEllipseParameters.MajorSemiAxis">
      <summary>
            Gets the major semi-axis.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.CovarianceEllipseParameters.MinorSemiAxis">
      <summary>
            Gets the minor semi-axis.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.Evaluable">
      <summary>
            Provides extension methods for distributions that implement the <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" /> interface.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Evaluable.RegularSampling``2(``1,System.Double[],System.Double,System.Int32)">
      <summary>
            Creates a sample set with equally spaced samples.
            </summary>
      <param name="distribution">
              The distribution which needs to implement <see cref="T:Baselabs.Statistics.Distributions.IEvaluable`1" /> and
              <see cref="T:Baselabs.Statistics.Distributions.IExpectation`1" />.
            </param>
      <param name="stepping">
              The size of the bins in each dimension.
            </param>
      <param name="residualIntegralError">
              The maximum residual error. If the sum of sample weights becomes greater
              than 1-<paramref name="residualIntegralError" />, the algorithm is terminated.
            </param>
      <param name="maximumSamples">
              The maximum number of samples. If the number of created samples becomes greater
              than <paramref name="maximumSamples" />, the algorithm is terminated.
              <para>
              Note: As the algorithm creates multiple samples in one
              step, the actual number of samples can be higher.
              </para></param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and
            provides a parameterless constructor.</typeparam>
      <typeparam name="TDistribution">The type of the distribution.</typeparam>
      <returns>
            The resulting sample set.
            </returns>
      <exception cref="T:System.ArgumentException">
              The length of the <paramref name="stepping" /> array is not equal to the number of dimensions
              of the <paramref name="distribution" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              At least one element of <paramref name="stepping" /> is equal to or less than zero.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The <paramref name="residualIntegralError" /> is not between 0 and 1.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.ExpectationAndCovariance">
      <summary>
            Provides extension methods for distributions that implement the <see cref="T:Baselabs.Statistics.Distributions.IExpectation`1" /> and the
            <see cref="T:Baselabs.Statistics.Distributions.ICovariance`1" /> interfaces.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.ExpectationAndCovariance.Fuse``2(``1,``1)">
      <summary>
            Returns the optimal fusion of the specified distributions.
            </summary>
      <param name="left">The first distribution to fuse.</param>
      <param name="right">The second distribution to fuse.</param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />,
            provides a parameterless constructor, and implements<see cref="T:Baselabs.Statistics.Spaces.ICartesian" />.</typeparam>
      <typeparam name="TDistribution">The type of the distributions which need to implement
            <see cref="T:Baselabs.Statistics.Distributions.IExpectation`1" /> and <see cref="T:Baselabs.Statistics.Distributions.ICovariance`1" />, 
            e.g. <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" />.
            </typeparam>
      <returns>
            The optimal fusion of both distributions in Gaussian representation.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> is <c>null</c><para>or</para><paramref name="right" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.ExpectationAndCovariance.GetCovarianceEllipsePoints``2(``1,System.Int32,System.Double)">
      <summary>
            Gets an array of samples which lay on the covariance ellipse, i.e. they have the same Mahalanobis distance
            to the expectation value.
            </summary>
      <param name="distribution">The distribution which needs to implement <see cref="T:Baselabs.Statistics.Distributions.IExpectation`1" />
            and <see cref="T:Baselabs.Statistics.Distributions.ICovariance`1" />.</param>
      <param name="points">
        <para>The number of points. The first and last point are identical. The minimum value is 3.</para>
        <para>
          <note type="tip">The points have the same angular distance, which does not necessarily imply a regular
            euclidean distance. For spatially large or highly eccentric ellipses, a large number of points might
            be necessary to get a suitable resolution.
            </note>
        </para>
      </param>
      <param name="mahalanobisDistance">The Mahalanobis distance of the covariance ellipse.</param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />,
            provides a parameterless constructor, and implements <see cref="T:Baselabs.Statistics.Spaces.ICartesian" />.</typeparam>
      <typeparam name="TDistribution">The type of the distribution which needs to implement
            <see cref="T:Baselabs.Statistics.Distributions.IExpectation`1" /> and <see cref="T:Baselabs.Statistics.Distributions.ICovariance`1" />, 
            e.g. <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" />.
            </typeparam>
      <returns>
            An array of samples forming the covariance ellipse. The non-Cartesian dimensions are set to their
            expectations. The first and last point are identical to form a closed shape.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="points" /> is less than 3
            <para>or</para><paramref name="mahalanobisDistance" /> is less than zero.
            </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="distribution" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.ExpectationAndCovariance.GetMahalanobisDistanceSquared``2(``1,``0)">
      <summary>
            Gets the squared Mahalanobis distance for the given sample.
            </summary>
      <param name="distribution">The distribution which needs to implement <see cref="T:Baselabs.Statistics.Distributions.IExpectation`1" />
            and <see cref="T:Baselabs.Statistics.Distributions.ICovariance`1" />.</param>
      <param name="sample">The sample for which the Mahalanobis distance is calculated.</param>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and
            provides a parameterless constructor.</typeparam>
      <typeparam name="TDistribution">The type of the distribution.</typeparam>
      <returns>
            The squared Mahalanobis distance.
            </returns>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.Gaussian`1">
      <summary>
            Represents a multivariate Gaussian or normal probability density function (pdf).
            </summary>
      <typeparam name="TSpace">The type of the space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.#ctor">
      <summary>
            Initializes a new instance of the Gaussian distribution with zero expectation and covariance matrix.
            The number of dimensions is defined by the <typeparamref name="TSpace" /> type.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the Gaussian distribution using a zero expectation vector and
            a copy of the given covariance matrix.
            </summary>
      <param name="covariance">The covariance matrix. A solid copy of the matrix is used internally.</param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the Gaussian distribution with default values for 
            the expectation and the covariance.
            </summary>
      <param name="noInitialization">
            If true, no instances for expectation vector and covariance matrix are created.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.#ctor(`0,Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the Gaussian distribution filled with copies of the given expectation
            vector and covariance matrix.
            </summary>
      <param name="expectation">The expectation vector. A solid copy of the space is used internally.</param>
      <param name="covariance">The covariance matrix. A solid copy of the matrix is used internally.</param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.Cast``1">
      <summary>
            Casts this distribution into a Gaussian Distribution of type <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" />.
            </summary>
      <typeparam name="TResultSpace">The type of the result space.</typeparam>
      <returns>The cast Gaussian.</returns>
      <exception cref="T:System.InvalidOperationException">
            The number of dimensions of <typeparamref name="TSpace" /> and 
            <typeparamref name="TResultSpace" /> is not equal.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.Clone">
      <summary>
            Creates a deep copy of the Gaussian.
            </summary>
      <returns>
            The copy of the Gaussian.
            </returns>
    </member>
    <member name="F:Baselabs.Statistics.Distributions.Gaussian`1.covariance">
      <summary>
            The internal storage for the covariance matrix.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.Gaussian`1.Covariance">
      <summary>
            Gets the covariance matrix of the distribution.
            Write access to the elements is possible by its index operator.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.Create(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Creates a new instance of the Gaussian distribution using a zero expectation vector
            and the given covariance matrix. No solid copy of the matrix is made.
            </summary>
      <param name="covariance"></param>
      <returns>The created instance of the Gaussian distribution.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.Create(`0,Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Creates a new instance of the Gaussian distribution using the instances of the given
            expectation vector and covariance matrix. No solid copy of the vectors are made.
            </summary>
      <param name="expectation">The expectation vector.</param>
      <param name="covariance">The covariance matrix.</param>
      <returns>
            The created instance of the Gaussian distribution.
            </returns>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.Gaussian`1.Dimensions">
      <summary>
            Gets the number of dimensions, which is equal to the number of dimensions of <typeparamref name="TSpace" />.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.Draw">
      <summary>
            Draws a random sample from the distribution.
            </summary>
      <returns>The randomly drawn sample.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.Draw(System.Int32)">
      <summary>
            Draws <paramref name="count" /> random samples from the distribution.
            </summary>
      <param name="count">The number of samples to be drawn.</param>
      <returns>
        <remarks>
            Domain limitations of the space are ignored.
            </remarks>
            The randomly drawn samples.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.Equals(Baselabs.Statistics.Distributions.Gaussian{`0})">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.Evaluate(System.Double)">
      <summary>
            Calculates the value of the probability density function (pdf) for the given squared mahalanobis distance
            d².
            </summary>
      <param name="mahalanobisSquared">The squared mahalanobis distance d².</param>
      <returns>
            The value of the pdf.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.Evaluate(`0)">
      <summary>
            Evaluates the probability mass function (PMF) or the probability density function (PDF) at the 
            <paramref name="sample" /> and provides a value proportional to the PMF or the PDF.
            </summary>
      <param name="sample">The sample.</param>
      <returns>The value proportional to the PMF or the PDF.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.Gaussian`1.Expectation">
      <summary>
            Gets the expectation vector of the distribution.
            Write access to the elements is possible by its index operator.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.GetGateProbability(System.Double)">
      <summary>
            Gets the probability for any sample for being inside a gate around the expectation of a Gaussian
            distribution, if the gate is defined by the given maximum squared mahalanobis distance.
            </summary>
      <param name="mahalanobisSquared">The maximum squared mahalanobis distance which defines the gate.</param>
      <returns>
            The gate probability.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The squared mahalanobis distance is less than zero.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.GetHashCode">
      <summary>Serves as a hash function for a particular type. </summary>
      <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.GetMahalanobisDistanceSquared(`0)">
      <summary>
            Gets the squared Mahalanobis distance 
            <latex>d^2=(x-\mathbf{\mu})^T P^{-1} (x-\mathbf{\mu})</latex> 
            at the given <paramref name="sample" />.
            </summary>
      <param name="sample">The sample x for which the Mahalanobis distance is calculated.</param>
      <returns>
            The squared Mahalanobis distance.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.GetMaximumMahalanobisDistanceSquared(System.Double)">
      <summary>
            Gets the maximum squared mahalanobis distance a sample can have to a Gaussian distribution for being
            inside a gate around its expectation with the given <paramref name="gateProbability" />.
            </summary>
      <param name="gateProbability">The gate probability.</param>
      <returns>
            The quantile of the Chi-Square pdf.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The probability is less than zero or greater than one.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.Marginalize``1">
      <summary>
            Marginalizes the Gaussian to the <typeparamref name="TMarginalizedSpace" />.
            This means that all dimensions are removed which are
            not contained in <typeparamref name="TMarginalizedSpace" />.
            <typeparamref name="TMarginalizedSpace" /> needs to be a subset of <typeparamref name="TSpace" />.
            </summary>
      <typeparam name="TMarginalizedSpace">
            The marginalized space, which needs to be a subset of <typeparamref name="TSpace" />.
            </typeparam>
      <returns>
            The marginalized Gaussian.
            </returns>
      <exception cref="T:System.ArgumentException">
            The space <typeparamref name="TMarginalizedSpace" /> is not a subset of <typeparamref name="TSpace" />.
            </exception>
    </member>
    <member name="F:Baselabs.Statistics.Distributions.Gaussian`1.NormalizationFactor">
      <summary>
            The normalization factor for the calculation of the pdf value.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.op_Addition(Baselabs.Statistics.Distributions.Gaussian{`0},Baselabs.Statistics.Distributions.Gaussian{`0})">
      <summary>
            Adds two Gaussians by summing their expectations and covariances.
            </summary>
      <param name="left">The left Gaussian.</param>
      <param name="right">The right Gaussian.</param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.op_Equality(Baselabs.Statistics.Distributions.Gaussian{`0},Baselabs.Statistics.Distributions.Gaussian{`0})">
      <summary>
            Compares the specified Gaussians for equality.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>True if the Gaussians are equal.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.op_Inequality(Baselabs.Statistics.Distributions.Gaussian{`0},Baselabs.Statistics.Distributions.Gaussian{`0})">
      <summary>
            Compares the specified Gaussians for inequality.
            </summary>
      <param name="left">The left.</param>
      <param name="right">The right.</param>
      <returns>True if the Gaussians are not equal.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.op_Multiply(Baselabs.Statistics.Distributions.Gaussian{`0},System.Double)">
      <summary>
            Creates a new <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" /> using the expectation of <paramref name="gaussian" />
            multiplied by the specified <paramref name="factor" /> 
            and the covariance of <paramref name="gaussian" /> multiplied by the squared <paramref name="factor" />.
            </summary>
      <param name="factor">The factor.</param>
      <param name="gaussian">The Gaussian.</param>
      <returns></returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.op_Multiply(System.Double,Baselabs.Statistics.Distributions.Gaussian{`0})">
      <summary>
            Creates a new <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" /> using the expectation of <paramref name="gaussian" />
            multiplied by the specified <paramref name="factor" /> 
            and the covariance of <paramref name="gaussian" /> multiplied by the squared <paramref name="factor" />.
            </summary>
      <param name="factor">The factor.</param>
      <param name="gaussian">The Gaussian.</param>
      <returns></returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.op_Subtraction(Baselabs.Statistics.Distributions.Gaussian{`0},Baselabs.Statistics.Distributions.Gaussian{`0})">
      <summary>
            Subtracts two Gaussians by subtracting their expectations and summing their covariances.
            </summary>
      <param name="left">The left Gaussian.</param>
      <param name="right">The right Gaussian.</param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.ResetCachedValues">
      <summary>
            Resets the cached values. This includes the <see cref="F:Baselabs.Statistics.Distributions.Gaussian`1.NormalizationFactor" /> (set to null).
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.UnscentedTransform``1(Baselabs.Statistics.Distributions.Gaussian{`0}.Transformation{``0})">
      <summary>
            Performs an Unscented Transformation (UT) on the distribution
            using the default parameters for α, β, and κ.
            </summary>
      <param name="transformation">The transformation function (might be non-linear).</param>
      <typeparam name="TResultSpace">The type of the resulting space.</typeparam>
      <returns>
            A new instance of the transformed distribution.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Gaussian`1.UnscentedTransform``1(Baselabs.Statistics.Distributions.Gaussian{`0}.Transformation{``0},System.Double,System.Double,System.Double)">
      <summary>
            Performs an Unscented Transformation (UT) on the distribution.
            </summary>
      <param name="transformation">The transformation function (might be non-linear).</param>
      <param name="alpha">Parameter α for the scaled UT.</param>
      <param name="beta">Parameter β for the scaled UT.</param>
      <param name="kappa">Parameter κ for the scaled UT.</param>
      <typeparam name="TResultSpace">The type of the resulting space.</typeparam>
      <returns>
            A new instance of the transformed distribution.
            </returns>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.Gaussian`1.Transformation`1">
      <summary>
            Specifies a transformation function to transform an instance of 
            the source space <typeparamref name="TSpace" /> to an instance of
            the result space <typeparamref name="TResultSpace" />.
            </summary>
      <param name="source">The source.</param>
      <param name="result">The result.</param>
      <typeparam name="TResultSpace">The type of the result space.</typeparam>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.GaussianMixture`1">
      <summary>
            Represents a mixture of Gaussians.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.#ctor(Baselabs.Collections.IListFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.GaussianMixture`1" /> class with zero elements.
            </summary>
      <param name="listFactory">
            The factory that is used to create lists that hold <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" /> instances and their
            weights.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.#ctor(Baselabs.Statistics.Distributions.Gaussian{`0}[],System.Double[])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.GaussianMixture`1" /> class and
            initializes it with the given <paramref name="gaussians" /> and <paramref name="weights" />.
            A <see cref="T:Baselabs.Collections.DynamicListFactory" /> is used to create lists that hold <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" />
            instances and their weights.
            </summary>
      <param name="gaussians">The gaussians.</param>
      <param name="weights">The weights.</param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.#ctor(Baselabs.Statistics.Distributions.Gaussian{`0}[],System.Double[],Baselabs.Collections.IListFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.GaussianMixture`1" /> class and
            initializes it with the given <paramref name="gaussians" /> and <paramref name="weights" />.
            </summary>
      <param name="gaussians">The gaussians.</param>
      <param name="weights">The weights.</param>
      <param name="listFactory">
            The factory that is used to create lists that hold <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" /> instances and their
            weights.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.GaussianMixture`1" /> class
            and allocates <paramref name="capacity" /> Gaussians and their appropriate weights.
            A <see cref="T:Baselabs.Collections.DynamicListFactory" /> is used to create lists that hold <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" />
            instances and their weights.
            </summary>
      <param name="capacity">The capacity.</param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.#ctor(System.Int32,Baselabs.Collections.IListFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.GaussianMixture`1" /> class
            and allocates <paramref name="capacity" /> Gaussians and their appropriate weights.
            </summary>
      <param name="capacity">The capacity.</param>
      <param name="listFactory">
            The factory that is used to create lists that hold <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" /> instances and their
            weights.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.Add(Baselabs.Statistics.Distributions.Gaussian{`0},System.Double)">
      <summary>
            Adds the specified gaussian to the Gaussian mixture.
            </summary>
      <param name="gaussian">The gaussian.</param>
      <param name="weight">The weight.</param>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.GaussianMixture`1.Count">
      <summary>
            Gets the number of Gaussians.
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Distributions.GaussianMixture`1.Dimensions">
      <summary>
            The number of dimensions of the <typeparamref name="TSpace" />.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.Draw">
      <summary>
            Draws a random sample from the distribution.
            </summary>
      <returns>The randomly drawn sample.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.Draw(System.Int32)">
      <summary>
            Draws <paramref name="count" /> random samples from the distribution.
            </summary>
      <param name="count">The number of samples to be drawn.</param>
      <returns>
        <remarks>
            Domain limitations of the space are ignored.
            </remarks>
            The randomly drawn samples.
            </returns>
      <exception cref="T:System.InvalidOperationException">The Gaussian mixture is empty.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.Evaluate(`0)">
      <summary>
            Evaluates the probability mass function (PMF) or the probability density function (PDF) at the 
            <paramref name="sample" /> and provides a value proportional to the PMF or the PDF.
            </summary>
      <param name="sample">The sample.</param>
      <returns>The value proportional to the PMF or the PDF.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.GetExpectations">
      <summary>
            Gets the expectation values of the Gaussians.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.GetWeightedExpectations">
      <summary>
            Gets the weighted expectations of the Gaussians.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.GaussianMixture`1.IsNormalized">
      <summary>
            Gets a value indicating whether this <see cref="T:Baselabs.Statistics.Distributions.GaussianMixture`1" /> is normalized.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.GaussianMixture`1.Item(System.Int32)">
      <summary>
            Gets the <see cref="T:Baselabs.Statistics.Distributions.GaussianWeightPair`1" /> at the specified index.
            </summary>
      <param name="index">The index.</param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.Normalize">
      <summary>
            Normalizes this <see cref="T:Baselabs.Statistics.Distributions.GaussianMixture`1" /> so that the weights sum to 1.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.op_Explicit(Baselabs.Statistics.Distributions.GaussianMixture{`0})~Baselabs.Statistics.Distributions.Gaussian{`0}">
      <summary>
            Casts the specified <paramref name="gaussianMixture" /> to a <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" /> 
            using the <see cref="M:Baselabs.Statistics.Distributions.GaussianMixture`1.ToGaussian" /> method.
            </summary>
      <param name="gaussianMixture">The gaussian mixture.</param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.ToGaussian">
      <summary>
            Calculates a Gaussian approximation of the Gaussian mixture.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianMixture`1.ToString">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.GaussianWeightPair`1">
      <summary>
            Encapsulates a Gaussian distribution and its weight for being used in the <see cref="T:Baselabs.Statistics.Distributions.GaussianMixture`1" /> class.
            </summary>
      <typeparam name="TSpace">The type of the space</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.GaussianWeightPair`1.#ctor(Baselabs.Statistics.Distributions.Gaussian{`0},System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.GaussianWeightPair`1" /> class.
            The <paramref name="gaussian" /> reference is used directly, no deep copy is made.
            </summary>
      <param name="gaussian">The gaussian.</param>
      <param name="weight">The weight of the <paramref name="gaussian" />.</param>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.GaussianWeightPair`1.Gaussian">
      <summary>
            Gets the gaussian.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.GaussianWeightPair`1.Weight">
      <summary>
            Gets the weight.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.IConditional`1">
      <summary>
            Exposes the condition of a conditional probability distribution
            with one condition.
            </summary>
      <typeparam name="TCondition">The type of the condition.</typeparam>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.IConditional`1.Condition">
      <summary>
            Sets the (first) condition.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.IConditional`2">
      <summary>
            Exposes the condition of a conditional probability distribution
            with two conditions.
            </summary>
      <typeparam name="TCondition1">The type of the first condition.</typeparam>
      <typeparam name="TCondition2">The type of the second condition.</typeparam>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.IConditional`2.Condition2">
      <summary>
            Sets the second condition.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.IConditional`3">
      <summary>
            Exposes the condition of a conditional probability distribution
            with three conditions.
            </summary>
      <typeparam name="TCondition1">The type of the first condition.</typeparam>
      <typeparam name="TCondition2">The type of the second condition.</typeparam>
      <typeparam name="TCondition3">The type of the third condition.</typeparam>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.IConditional`3.Condition3">
      <summary>
            Sets the third condition.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.IConditional`4">
      <summary>
            Exposes the condition of a conditional probability distribution
            with four conditions.
            </summary>
      <typeparam name="TCondition1">The type of the first condition.</typeparam>
      <typeparam name="TCondition2">The type of the second condition.</typeparam>
      <typeparam name="TCondition3">The type of the third condition.</typeparam>
      <typeparam name="TCondition4">The type of the fourth condition.</typeparam>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.IConditional`4.Condition4">
      <summary>
            Sets the fourth condition.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.IConditional`5">
      <summary>
            Exposes the condition of a conditional probability distribution
            with five conditions.
            </summary>
      <typeparam name="TCondition1">The type of the first condition.</typeparam>
      <typeparam name="TCondition2">The type of the second condition.</typeparam>
      <typeparam name="TCondition3">The type of the third condition.</typeparam>
      <typeparam name="TCondition4">The type of the fourth condition.</typeparam>
      <typeparam name="TCondition5">The type of the fifth condition.</typeparam>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.IConditional`5.Condition5">
      <summary>
            Sets the fifth condition.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.ICovariance`1">
      <summary>
            Exposes the covariance matrix of a probability distribution with at least two moments.
            </summary>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.ICovariance`1.Covariance">
      <summary>
            Gets the covariance matrix.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.IDrawable`1">
      <summary>
            Specifies a probability distribution as drawable, that means random samples of type
            <typeparamref name="TSpace" /> can be drawn from the distribution.
            </summary>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.IDrawable`1.Draw">
      <summary>
            Draws one random sample from the distribution.
            </summary>
      <returns>The randomly drawn sample.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.IDrawable`1.Draw(System.Int32)">
      <summary>
            Draws <paramref name="count" /> random samples from the distribution.
            </summary>
      <param name="count">The number of samples to be drawn.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with the randomly drawn samples.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.IEvaluable`1">
      <summary>
            Specifies a probability mass function (PMF) or a probability density function (PDF) as evaluable
            and provides a method to calculate a proportional value to this PMF or PDF given a sample of type
            <typeparamref name="TSpace" />.
            </summary>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.IEvaluable`1.Evaluate(`0)">
      <summary>
            Evaluates the probability mass function (PMF) or the probability density function (PDF) at the 
            <paramref name="sample" /> and provides a value proportional to the PMF or the PDF.
            </summary>
      <param name="sample">The sample.</param>
      <returns>The value proportional to the PMF or the PDF.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.IEvaluableConditional`2">
      <summary>
            Represents an evaluable conditional probability distribution with one condition.
            </summary>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TCondition">The type of the condition.</typeparam>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.IExpectation`1">
      <summary>
            Indicates that a probability distribution is characterized
            by an expectation vector of type <typeparamref name="TSpace" />.
            </summary>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.IExpectation`1.Expectation">
      <summary>
            Gets the expectation vector.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.ILinearOnly">
      <summary>
            Marks conditional probability distributions as truly linear transitions, that is the transition is completely
            described by the <see cref="P:Baselabs.Statistics.Distributions.ILinearTransition`2.TransitionMatrix" />.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.ILinearTransition`2">
      <summary>
            Exposes the linear transition matrix of a special conditional distribution, whose the expectation vector linearly depends
            on the first condition.
            </summary>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TCondition">
            The type of the condition which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" /></typeparam>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.ILinearTransition`2.TransitionMatrix">
      <summary>
            Gets the linear transition matrix.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.IPreevaluatedConditional`1">
      <summary>
            Represents an evaluable conditional probability distribution with one condition where the sample at which the
            probability mass function (PMF) or the probability density function (PDF) is evaluated is already defined
            and cannot be changed.
            </summary>
      <typeparam name="TCondition">The type of the condition.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.IPreevaluatedConditional`1.Evaluate">
      <summary>
            Evaluates the probability mass function (PMF) or the probability density function (PDF) 
            and provides a value proportional to the PMF or the PDF.
            </summary>
      <returns>The value proportional to the PMF or the PDF.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.ITimeConditional">
      <summary>
             Exposes the time span condition of a conditional probability distribution
             with a time condition.
             </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.ITimeConditional.TimeCondition">
      <summary>
            Sets the time condition which gives the duration between the last and the current time step.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.SampleProbabilityPair`1">
      <summary>
            Represents a sample of type <typeparamref name="TSpace" /> with its associated probability or weight
            in a <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" />.
            </summary>
      <typeparam name="TSpace">The type of the space which needs to inherit from
            <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleProbabilityPair`1.#ctor(`0,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SampleProbabilityPair`1" /> class with the given
            sample and its probability or weight. The instance of the sample is used directly, no deep copy is made.
            </summary>
      <param name="sample">The sample.</param>
      <param name="probability">The probability or weight of the sample.</param>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SampleProbabilityPair`1.Probability">
      <summary>
            Gets or sets the probability or weight.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SampleProbabilityPair`1.Sample">
      <summary>
            Gets or sets the sample.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleProbabilityPair`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.SampleSet`1">
      <summary>
            Represents a discrete probability distribution by a set of samples of type <typeparamref name="TSpace" /> with
            an associated probability or weight.
            </summary>
      <typeparam name="TSpace">The type of the space which needs to inherit from
            <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.#ctor(Baselabs.Collections.IListFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> class with no samples, i.e. the value
            of the PMF is zero everywhere.
            </summary>
      <param name="listFactory">
            The factory that is used to create lists that hold <see cref="T:Baselabs.Statistics.Distributions.SampleProbabilityPair`1" /> instances
            Passing <c>null</c> is equivalent to passing an instance of <see cref="T:Baselabs.Collections.DynamicListFactory" />.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.#ctor(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.SampleProbabilityPair{`0}},Baselabs.Collections.IListFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> class with copies of the
            given samples and their associated probabilities.
            </summary>
      <param name="sampleWeightPairs">The samples with their associated probabilities.</param>
      <param name="listFactory">
            The factory that is used to create lists that hold <see cref="T:Baselabs.Statistics.Distributions.SampleProbabilityPair`1" /> instances
            Passing <c>null</c> is equivalent to passing an instance of <see cref="T:Baselabs.Collections.DynamicListFactory" />.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},Baselabs.Collections.IListFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> class with copies of the
            given samples and equal probabilities.
            </summary>
      <param name="samples">The samples.</param>
      <param name="listFactory">
            The factory that is used to create lists that hold <see cref="T:Baselabs.Statistics.Distributions.SampleProbabilityPair`1" /> instances
            Passing <c>null</c> is equivalent to passing an instance of <see cref="T:Baselabs.Collections.DynamicListFactory" />.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.#ctor(System.Int32,Baselabs.Collections.IListFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> class with the specified capacity.
            </summary>
      <param name="capacity">The capacity.</param>
      <param name="listFactory">
            The factory that is used to create lists that hold <see cref="T:Baselabs.Statistics.Distributions.SampleProbabilityPair`1" /> instances
            Passing <c>null</c> is equivalent to passing an instance of <see cref="T:Baselabs.Collections.DynamicListFactory" />.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.Add(`0,System.Double)">
      <summary>
            Adds the specified sample to the sample set. The instance of the sample is used directly, no deep copy
            is created.
            </summary>
      <param name="sample">The sample to be added.</param>
      <param name="probability">The probability of the sample.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="probability" /> is less than zero.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.Cast``1">
      <summary>
            Casts this distribution into a sample set of type <typeparamref name="TResultSpace" />.
            </summary>
      <typeparam name="TResultSpace">The type of the result space which needs to inherit from
            <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor.</typeparam>
      <returns>The cast sample set.</returns>
      <exception cref="T:System.InvalidOperationException">The number of dimensions of <typeparamref name="TSpace" />
            and <typeparamref name="TResultSpace" /> are not equal.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.Clone">
      <summary>Creates a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of this instance.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.CollectMultipleSamples">
      <summary>
            Collects multiple samples, i.e. the multiplicity of all samples is reduced to one.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SampleSet`1.Count">
      <summary>
            Gets the number of samples in the sample set.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.Create(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.SampleProbabilityPair{`0}},Baselabs.Collections.IListFactory)">
      <summary>
            Creates a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> class with the
            given samples and their associated probabilities. No deep copies of the samples are made.
            </summary>
      <param name="sampleWeightPairs">The samples with their associated probabilities.</param>
      <param name="listFactory">
            The factory that is used to create lists that hold <see cref="T:Baselabs.Statistics.Distributions.SampleProbabilityPair`1" /> instances
            Passing <c>null</c> is equivalent to passing an instance of <see cref="T:Baselabs.Collections.DynamicListFactory" />.
            </param>
      <returns>
            The created instance of the <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> distribution.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.Create(System.Collections.Generic.IEnumerable{`0},Baselabs.Collections.IListFactory)">
      <summary>
            Creates a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> class filled with the instances of the
            given samples and equal probabilities. No deep copies of the samples are made.
            </summary>
      <param name="samples">The samples.</param>
      <param name="listFactory">
            The factory that is used to create lists that hold <see cref="T:Baselabs.Statistics.Distributions.SampleProbabilityPair`1" /> instances
            Passing <c>null</c> is equivalent to passing an instance of <see cref="T:Baselabs.Collections.DynamicListFactory" />.
            </param>
      <returns>
            The created instance of the <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> distribution.
            </returns>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SampleSet`1.Dimensions">
      <summary>
            Gets the number of dimensions of the distribution which is equal to the dimensions of
            <typeparamref name="TSpace" />.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SampleSet`1.EffectiveCount">
      <summary>
            Gets the effective number of samples in the sample set.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.Equals(Baselabs.Statistics.Distributions.SampleSet{`0})">
      <summary>
            Determines whether the specified sample set is equal to this one.
            </summary>
      <param name="other">The other sample set.</param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.Evaluate(`0)">
      <summary>
            Evaluates the value of the probability mass function (PMF) for the specified sample.
            That means it gets the summed up probabilities of all multiplicities of the sample.
            </summary>
      <param name="sample">The sample for which the PMF is evaluated.</param>
      <returns>The value of the PMF for the sample. It is 0, if the sample is not contained.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.GetHashCode">
      <summary>Serves as a hash function for a particular type. </summary>
      <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.GetMaximumSample">
      <summary>
            Gets the sample with the greatest probability or weight.
            </summary>
      <returns>The sample with the greatest probability and its probability. If the sample set contains
            no samples, <c>null</c>.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.GetMinimumSample">
      <summary>
            Gets the sample with the smallest probability.
            </summary>
      <returns>The sample with the smallest probability and its probability. If the sample set contains
            no samples, <c>null</c>.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.GetMultiplicity(`0)">
      <summary>
            Gets the multiplicity of the specified sample.
            </summary>
      <param name="sample">The sample.</param>
      <returns>The multiplicity of the sample or 0, if the sample is not contained in the set.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SampleSet`1.IsNormalized">
      <summary>
            Gets a value indicating whether this <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> is normalized, i.e. the
            probabilities or weights sum to one.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SampleSet`1.Item(System.Int32)">
      <summary>
            Gets or sets the sample and its associated probability at the specified index.
            </summary>
      <param name="index">The index of the sample.</param>
      <returns>
            The <see cref="T:Baselabs.Statistics.Distributions.SampleProbabilityPair`1" /> containing the sample and its probability. No deep copy
            of the <see cref="T:Baselabs.Statistics.Distributions.SampleProbabilityPair`1" /> is made, but just the reference is returned.
            </returns>
      <exception cref="T:System.IndexOutOfRangeException">
            The <paramref name="index" /> is less than zero. When the getter is called, this
            exception is also thrown when <paramref name="index" /> is equal to or greater than <see cref="P:Baselabs.Statistics.Distributions.SampleSet`1.Count" />. When
            the setter is called,
            this exception is also thrown when <paramref name="index" /> is greater than <see cref="P:Baselabs.Statistics.Distributions.SampleSet`1.Count" />.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SampleSet`1.Item(`0)">
      <summary>
            Gets or sets the value of the probability mass function (PMF) of this distribution for the specified sample.
            </summary>
      <param name="sample">The sample where the the PMF is evaluated.</param>
      <returns>The value of the PMF for the sample. It is 0, if the sample is not contained.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.Normalize">
      <summary>
            Normalizes this instance, i.e. it forces the sum of all sample probabilities to be unity.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.op_Equality(Baselabs.Statistics.Distributions.SampleSet{`0},Baselabs.Statistics.Distributions.SampleSet{`0})">
      <summary>
            Compares the specified sample sets for equality.
            </summary>
      <param name="left">The left sample set.</param>
      <param name="right">The right sample set.</param>
      <returns>
        <c>true</c> if the samples and their probabilities of both sample sets are equal; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.op_Explicit(Baselabs.Statistics.Distributions.SampleSet{`0})~Baselabs.Statistics.Distributions.Gaussian{`0}">
      <summary>
            Casts a sample set distribution to a Gaussian distribution.
            </summary>
      <param name="sampleSet">The sample set to transform.</param>
      <returns>
    The approximated Gaussian distribution.
  </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.op_Inequality(Baselabs.Statistics.Distributions.SampleSet{`0},Baselabs.Statistics.Distributions.SampleSet{`0})">
      <summary>
            Compares the specified sample sets for inequality.
            </summary>
      <param name="left">The left sample set.</param>
      <param name="right">The right sample set.</param>
      <returns>
        <c>true</c> if the samples and their probabilities of both sample sets are equal; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SampleSet`1.RandomGenerator">
      <summary> 
            Gets or sets the <see cref="T:Baselabs.Math.IRandomGenerator" /> implementation that is used in the
            <see cref="M:Baselabs.Statistics.Distributions.SampleSet`1.ResampleLowVariance(System.Int32)" /> method.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.RemoveZeroSamples">
      <summary>
            Removes samples that have a probability of zero.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.ResampleLowVariance">
      <summary>
            Performs low variance resampling on this distribution and returns a new resampled set with the same
            number of samples as this set. This sample set is not modified.
            </summary>
      <returns>
    The resampled set.
  </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.ResampleLowVariance(System.Int32)">
      <summary>
            Performs low variance resampling on this distribution and returns a new resampled set with the given
            number of samples. This sample set is not modified.
            </summary>
      <param name="numberOfSamples">The number of samples in the resampled set.</param>
      <returns>The resampled set.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SampleSet`1.Samples">
      <summary>
            Gets the internal storage of the samples and their associated probabilities encapsulated in
            <see cref="T:Baselabs.Statistics.Distributions.SampleProbabilityPair`1" />.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.Set(`0,System.Double)">
      <summary>
            Sets the value of the probability mass function for the specified sample
            to the given probability.
            </summary>
      <param name="sample">The sample at which the PMF is set.</param>
      <param name="probability">The probability of the sample.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="probability" /> is less than zero.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.System#Collections#Generic#IEnumerable{TSpace}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SampleSet`1.ToGaussian">
      <summary>
            Calculates the Gaussian approximation of this distribution.
            </summary>
      <returns>The approximated Gaussian distribution.</returns>
      <exception cref="T:System.InvalidOperationException">
            The <see cref="P:Baselabs.Statistics.Distributions.SampleSet`1.Count" /> of the <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> is less than two.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.SigmaPoints`1">
      <summary>
            Represents a sigma point collection which is a representation of a continuous probability distribution.
            </summary>
      <typeparam name="TSpace">The type of the space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" /> and
            provide a parameterless constructor.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SigmaPoints`1" /> class with the standard scaling parameters
            and 2n+1 sigma points with n being the number of dimensions specified by <typeparamref name="TSpace" />.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.#ctor(Baselabs.Statistics.Distributions.Gaussian{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SigmaPoints`1" /> class from the given Gaussian
            distribution with the standard scaling parameters.
            </summary>
      <param name="gaussian">The Gaussian from which the sigma points are created.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="gaussian" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.#ctor(Baselabs.Statistics.Distributions.Gaussian{`0},Baselabs.Statistics.Distributions.SigmaPointsScaling)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SigmaPoints`1" /> class from the given Gaussian
            distribution with the specified scaling parameters.
            </summary>
      <param name="gaussian">The Gaussian from which the sigma points are created.</param>
      <param name="scalingParameters">The scaling parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="gaussian" /> is <c>null</c>.
            <para>-or-</para><paramref name="scalingParameters" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.#ctor(Baselabs.ThirdParty.LapackBlas.MatrixData)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SigmaPoints`1" /> class with the standard scaling
            parameters and a copy of the given <paramref name="matrix" />.
            </summary>
      <param name="matrix">
            The matrix which contains the sigma points.
            A copy of the matrix is used internally.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in <paramref name="matrix" /> is not equal to the dimensions of
            <typeparamref name="TSpace" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The number of sigma points (which is the number of columns of <paramref name="matrix" />)
            is not an odd number.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.#ctor(Baselabs.ThirdParty.LapackBlas.MatrixData,Baselabs.Statistics.Distributions.SigmaPointsScaling)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SigmaPoints`1" /> class with the specified scaling
            parameters and a copy of the given <paramref name="matrix" />.
            </summary>
      <param name="matrix">
            The matrix which contains the sigma points.
            A copy of the matrix is used internally.
            </param>
      <param name="scalingParameters">The scaling parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="matrix" /> is <c>null</c>.
            <para>-or-</para><paramref name="scalingParameters" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows in <paramref name="matrix" /> is not equal to the dimensions of
            <typeparamref name="TSpace" />.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The number of sigma points (which is the number of columns of <paramref name="matrix" />)
            is not an odd number.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SigmaPoints`1" /> class with the standard scaling parameters
            and the given number of sigma points.
            </summary>
      <param name="sigmaPointsCount">The number of sigma points.
            It needs to be an odd number and at least 3.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of sigma points is less than 3.</exception>
      <exception cref="T:System.ArgumentException">The number of sigma points is not an odd number.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.#ctor(System.Int32,Baselabs.Statistics.Distributions.SigmaPointsScaling)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SigmaPoints`1" /> class with the specified scaling parameters
            and the given number of sigma points.
            </summary>
      <param name="sigmaPointsCount">The number of sigma points.
            It needs to be an odd number and at least 3.</param>
      <param name="scalingParameters">The scaling parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scalingParameters" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of sigma points is less than 3.</exception>
      <exception cref="T:System.ArgumentException">The number of sigma points is not an odd number.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.#ctor(System.Int32,Baselabs.Statistics.Distributions.SigmaPointsScaling,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SigmaPoints`1" /> class with the specified scaling parameters,
            the given number of sigma points, and the generic space type given by <paramref name="spaceType" />.
            <para /><note type="caution">
            This constructor can only be used when <typeparamref name="TSpace" /> is or inherits from
            <see cref="T:Baselabs.Statistics.Spaces.Euclidean.GenericSpace" />.
            </note></summary>
      <param name="sigmaPointsCount">The number of sigma points.
            It needs to be an odd number and at least 3.</param>
      <param name="scalingParameters">The scaling parameters.</param>
      <param name="spaceType">The type of the generic space.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scalingParameters" /> is <c>null</c>.
            <para>-or-</para><paramref name="spaceType" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of sigma points is less than 3.</exception>
      <exception cref="T:System.ArgumentException">The number of sigma points is not an odd number.</exception>
      <exception cref="T:System.InvalidOperationException">
            The <typeparamref name="TSpace" /> is not a or does not inherit from GenericSpace.
            </exception>
      <exception cref="T:System.ArgumentException">
            The <paramref name="spaceType" /> does not inherit from GenericSpace.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.#ctor(System.Int32,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SigmaPoints`1" /> class with the standard scaling parameters,
            the given number of sigma points, and the generic space type given by <paramref name="spaceType" />.
            <para /><note type="caution">
            This constructor can only be used when <typeparamref name="TSpace" /> is or inherits from
            <see cref="T:Baselabs.Statistics.Spaces.Euclidean.GenericSpace" />.
            </note></summary>
      <param name="spaceType">
            The type of the generic space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Euclidean.GenericSpace" />.</param>
      <param name="sigmaPointsCount">The number of sigma points.
            It needs to be an odd number and at least 3.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spaceType" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The <typeparamref name="TSpace" /> is not a or does not inherit from GenericSpace.
            </exception>
      <exception cref="T:System.ArgumentException">
            The <paramref name="spaceType" /> does not inherit from GenericSpace.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of sigma points is less than 3.</exception>
      <exception cref="T:System.ArgumentException">The number of sigma points is not an odd number.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.SigmaPoints`1" /> class with the standard scaling parameters
            and 2n+1 sigma points with n being the number of dimensions specified by the generic space given by
            <paramref name="spaceType" />.
            <para /><note type="caution">
            This constructor can only be used when <typeparamref name="TSpace" /> is a <see cref="T:Baselabs.Statistics.Spaces.Euclidean.GenericSpace" />
            or inherits from it.
            </note></summary>
      <param name="spaceType">
            The type of the generic space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Euclidean.GenericSpace" /></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spaceType" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.InvalidOperationException">
            The <typeparamref name="TSpace" /> is not a or does not inherit from GenericSpace.
            </exception>
      <exception cref="T:System.ArgumentException">
            The <paramref name="spaceType" /> does not inherit from GenericSpace.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SigmaPoints`1.Count">
      <summary>
            Gets the number of sigma points.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.CrossCovariance``2(Baselabs.Statistics.Distributions.SigmaPoints{``0},Baselabs.Statistics.Distributions.SigmaPoints{``1})">
      <summary>
            Calculates the cross covariance matrix of two sigma point distributions.
            They need to have the same number of sigma points and the same scaling parameters.
            </summary>
      <param name="left">The left sigma point set.</param>
      <param name="right">The right sigma point set.</param>
      <typeparam name="TSpaceLeft">The type of the left space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />
            and provide a parameterless constructor.</typeparam>
      <typeparam name="TSpaceRight">The type of the right space which needs to inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />
            and provide a parameterless constructor.</typeparam>
      <returns>
            The cross covariance matrix. Its number of rows is equal to
            <paramref name="left" />.<see cref="P:Baselabs.Statistics.Distributions.SigmaPoints`1.Dimensions" />, the number of columns is equal to
            <paramref name="right" />.<see cref="P:Baselabs.Statistics.Distributions.SigmaPoints`1.Dimensions" />.</returns>
      <exception cref="T:System.ArgumentException">
            The number of sigma points of <paramref name="left" /> and <paramref name="right" /> are not equal.
            </exception>
      <exception cref="T:System.ArgumentException">
            The scaling parameters of <paramref name="left" /> and <paramref name="right" /> are not equal.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SigmaPoints`1.Dimensions">
      <summary>
            Gets the number of dimensions which is equal to the number of dimensions of <typeparamref name="TSpace" />.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SigmaPoints`1.Item(System.Int32)">
      <summary>
            Gets or sets the sigma points with the specified index.
            </summary>
      <param name="index">The index of the sigma point.</param>
      <returns>An instance of <typeparamref name="TSpace" /> filled with the sigma point.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The index is equal to or greater than the number of sigma points.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SigmaPoints`1.MatrixData">
      <summary>
            Gets the sigma point matrix where each column is a sigma point.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.op_Addition(Baselabs.Statistics.Distributions.Gaussian{`0},Baselabs.Statistics.Distributions.SigmaPoints{`0})">
      <summary>
    
            Performs the addition of two random variables where one is represented by a sigma point set
            and the other one is given as a Gaussian.
            
  </summary>
      <param name="left">The left Gaussian.</param>
      <param name="right">The right sigma point set.</param>
      <returns>
    The resulting sigma point set.
  </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.op_Addition(Baselabs.Statistics.Distributions.SigmaPoints{`0},Baselabs.Statistics.Distributions.Gaussian{`0})">
      <summary>
            Performs the addition of two random variables where one is represented by a sigma point set
            and the other one is given as a Gaussian.
            </summary>
      <param name="left">The left sigma point set.</param>
      <param name="right">The right Gaussian.</param>
      <returns>
    The resulting sigma point set.
  </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.op_Addition(Baselabs.Statistics.Distributions.SigmaPoints{`0},Baselabs.Statistics.Distributions.SigmaPoints{`0})">
      <summary>
            Performs the addition of two random variables represented by sigma point sets.
            </summary>
      <param name="left">The left sigma point set.</param>
      <param name="right">The right sigma point set.</param>
      <returns>The resulting sigma point set.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.op_Explicit(Baselabs.Statistics.Distributions.SigmaPoints{`0})~Baselabs.Statistics.Distributions.Gaussian{`0}">
      <summary>
            Casts a sigma point set to a Gaussian distribution.
            </summary>
      <param name="sigmaPoints">The sigma point set to transform.</param>
      <returns>
    The Gaussian distribution.
  </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.op_Implicit(Baselabs.Statistics.Distributions.Gaussian{`0})~Baselabs.Statistics.Distributions.SigmaPoints{`0}">
      <summary>
            Casts a Gaussian distribution to a sigma point distribution using the standard scaling parameters.
            </summary>
      <param name="gaussian">The Gaussian to transform.</param>
      <returns>The sigma point set.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.Rescale(Baselabs.Statistics.Distributions.SigmaPointsScaling)">
      <summary>
            Changes the scaling parameters of the sigma point set.
            </summary>
      <param name="newScalingParameters">The scaling parameters.</param>
      <returns>The rescaled sigma point set.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SigmaPoints`1.Scaling">
      <summary>
            Gets the scaling parameters of the sigma point set.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPoints`1.ToGaussian">
      <summary>
            Transforms this sigma point set to a Gaussian distribution.
            </summary>
      <returns>The Gaussian distribution.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.SigmaPointsScaling">
      <summary>
            Contains the four relevant scaling parameters for a sigma point set.<para /></summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPointsScaling.#ctor(System.Int32)">
      <summary>
            Creates a new set of scaling parameters for the SigmaPoints class using the default values for α, β, and κ.
            </summary>
      <param name="dimensions">The number of dimensions which is used for scaling.
            This is not necessarily the actual number of dimensions of the sigma point set,
            but normally it is.</param>
      <exception cref="T:System.ArgumentException">The number of <paramref name="dimensions" /> is less than 1.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPointsScaling.#ctor(System.Int32,System.Double,System.Double,System.Double)">
      <summary>
            Creates a new set of scaling parameters for the SigmaPoints class.
            </summary>
      <param name="dimensions">The number of dimensions which is used for scaling.
            This is not necessarily the actual number of dimensions of the sigma point set,
            but normally it is.</param>
      <param name="alpha">The scaling parameter α.</param>
      <param name="beta">The scaling parameter β.</param>
      <param name="kappa">The scaling parameter κ.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The number of <paramref name="dimensions" /> is less than 1.
            <para>-or-</para>
            The scaling parameter <paramref name="alpha" /> is not greater than zero.
            </exception>
      <exception cref="T:System.ArgumentException">
            The sum of the scaling parameter <paramref name="kappa" /> and the number of <paramref name="dimensions" />
            is less than or equal to zero.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SigmaPointsScaling.Alpha">
      <summary>
            Gets the scaling parameter α.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SigmaPointsScaling.Beta">
      <summary>
            Gets the scaling parameter β.
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Distributions.SigmaPointsScaling.DefaultAlpha">
      <summary>
            The default value for the scaling parameter α. 
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Distributions.SigmaPointsScaling.DefaultBeta">
      <summary>
            The default value for the scaling parameter β. 
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Distributions.SigmaPointsScaling.DefaultKappa">
      <summary>
            The default value for the scaling parameter κ. 
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SigmaPointsScaling.Dimensions">
      <summary>
            Gets the number of dimensions which is used for scaling.
            This is not necessarily the actual number of dimensions of the sigma point set.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPointsScaling.Equals(Baselabs.Statistics.Distributions.SigmaPointsScaling)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPointsScaling.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPointsScaling.GetHashCode">
      <summary>Serves as a hash function for a particular type. </summary>
      <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SigmaPointsScaling.Kappa">
      <summary>
            Gets the scaling parameter κ.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.SigmaPointsScaling.Lambda">
      <summary>
            Gets the parameter λ which is used for the transformation from and to Gaussian.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPointsScaling.op_Equality(Baselabs.Statistics.Distributions.SigmaPointsScaling,Baselabs.Statistics.Distributions.SigmaPointsScaling)">
      <summary>
            Determines whether two instances of <see cref="T:Baselabs.Statistics.Distributions.SigmaPointsScaling" /> are equal.
            </summary>
      <param name="left">The left scaling parameter set.</param>
      <param name="right">The right scaling parameter set.</param>
      <returns>
        <c>true</c> if the two instances are equal, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPointsScaling.op_Inequality(Baselabs.Statistics.Distributions.SigmaPointsScaling,Baselabs.Statistics.Distributions.SigmaPointsScaling)">
      <summary>
            Determines whether two instances of <see cref="T:Baselabs.Statistics.Distributions.SigmaPointsScaling" /> are not equal.
            </summary>
      <param name="left">The left scaling parameter set.</param>
      <param name="right">The right scaling parameter set.</param>
      <returns>
        <c>true</c> if the two instances are not equal, <c>false</c> otherwise.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.SigmaPointsScaling.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.TwoPointDistribution`1">
      <summary>
            Represents a two point distribution, i.e. a discrete probability distribution with two possible
            values only.
            </summary>
      <typeparam name="TSpace">The type of the space which needs to inherit from
            <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.#ctor(`0,`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Distributions.TwoPointDistribution`1" /> class with the given
            instances of the success and the failure sample.
            </summary>
      <param name="successSample">The success sample.</param>
      <param name="failureSample">The failure sample.</param>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.Add(`0,System.Double)">
      <summary>
            Adding samples is not allowed for the <see cref="T:Baselabs.Statistics.Distributions.TwoPointDistribution`1" />. The success and failure
            sample can only be set once in the constructor.
            </summary>
      <exception cref="T:System.NotImplementedException">
            Adding samples is not allowed for the <see cref="T:Baselabs.Statistics.Distributions.TwoPointDistribution`1" />.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.Cast``1">
      <summary>
            Casts this distribution into a <see cref="T:Baselabs.Statistics.Distributions.TwoPointDistribution`1" />
            of type <typeparamref name="TResultSpace" />.
            </summary>
      <typeparam name="TResultSpace">The type of the result space which needs to inherit from
            <see cref="T:Baselabs.Statistics.Spaces.Space" /> and provide a parameterless constructor.</typeparam>
      <returns>The cast distribution.</returns>
      <exception cref="T:System.InvalidOperationException">The number of dimensions of <typeparamref name="TSpace" />
            and <typeparamref name="TResultSpace" /> are not equal.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.Clone">
      <summary>Creates a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of this instance.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.CollectMultipleSamples">
      <summary>
    
            Collects multiple samples, i.e. the multiplicity of all samples is reduced to one.
            
  </summary>
      <returns></returns>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.TwoPointDistribution`1.Count">
      <summary>
            Gets the number of samples in the sample set.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.Equals(Baselabs.Statistics.Distributions.TwoPointDistribution{`0})">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.Evaluate(`0)">
      <summary>
    
            Evaluates the value of the probability mass function (PMF) for the specified sample.
            That means it gets the summed up probabilities of all multiplicities of the sample.
            
  </summary>
      <param name="sample">
    The sample for which the PMF is evaluated.
  </param>
      <returns>The value of the PMF for the sample. It is 0, if the <paramref name="sample" /> is
            neither <see cref="P:Baselabs.Statistics.Distributions.TwoPointDistribution`1.SuccessSample" /> nor <see cref="P:Baselabs.Statistics.Distributions.TwoPointDistribution`1.FailureSample" />.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.TwoPointDistribution`1.FailureSample">
      <summary>
            Gets the failure sample.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.GetHashCode">
      <summary>Serves as a hash function for a particular type. </summary>
      <returns>A hash code for the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.GetMultiplicity(`0)">
      <summary>
    
            Gets the multiplicity of the specified sample.
            
  </summary>
      <param name="sample">
    The sample.
  </param>
      <returns>
    The multiplicity of the sample or 0, if the sample is not contained in the set.
  </returns>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.TwoPointDistribution`1.IsNormalized">
      <summary>
            Gets a value indicating whether this <see cref="T:Baselabs.Statistics.Distributions.TwoPointDistribution`1" /> is normalized.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.TwoPointDistribution`1.LogOdds">
      <summary>
            Gets or sets the log odds value of this <see cref="T:Baselabs.Statistics.Distributions.TwoPointDistribution`1" />.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.Normalize">
      <summary>
            Normalizes this instance, i.e. it forces the sum of both sample probabilities to be unity.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.op_Equality(Baselabs.Statistics.Distributions.TwoPointDistribution{`0},Baselabs.Statistics.Distributions.TwoPointDistribution{`0})">
      <summary>
            Compares the specified sample sets for equality.
            </summary>
      <param name="left">The left sample set.</param>
      <param name="right">The right sample set.</param>
      <returns>
        <c>true</c> if the samples and their probabilities of both sample sets are equal; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.op_Inequality(Baselabs.Statistics.Distributions.TwoPointDistribution{`0},Baselabs.Statistics.Distributions.TwoPointDistribution{`0})">
      <summary>
            Compares the specified sample sets for inequality.
            </summary>
      <param name="left">The left sample set.</param>
      <param name="right">The right sample set.</param>
      <returns>
        <c>true</c> if the samples and their probabilities of both sample sets are equal; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.RemoveZeroSamples">
      <summary>
    
            Removes samples that have a probability of zero.
            
  </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.Set(`0,System.Double)">
      <summary>
    
            Sets the value of the probability mass function for the specified sample
            to the given probability.
            
  </summary>
      <param name="sample">The sample where the PMF is set.</param>
      <param name="probability">The probability of the sample.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="sample" /> is neither the <see cref="P:Baselabs.Statistics.Distributions.TwoPointDistribution`1.SuccessSample" /> nor the
            <see cref="P:Baselabs.Statistics.Distributions.TwoPointDistribution`1.FailureSample" />. Only these two samples are allowed to be set.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Distributions.TwoPointDistribution`1.SuccessSample">
      <summary>
            Gets the success sample.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.TwoPointDistribution`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.Uniform">
      <summary>
            Provides methods to create or to fill a <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> so that it represents a uniform
            probability density function (pdf).
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Uniform.Create``1">
      <summary>
            Creates a <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> representing a discrete pdf 
            initialized with all supported values 
            and sets its sample weights to 1/NumberOfSupportedValues.
            </summary>
      <typeparam name="TSpace">The type of the finite space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Uniform.Fill``1(Baselabs.Statistics.Distributions.SampleSet{``0})">
      <summary>
            Sets the probability or weight of the samples in the specified <paramref name="sampleSet" />
            to 1/<paramref name="sampleSet" />.<see cref="P:Baselabs.Statistics.Distributions.SampleSet`1.Count" />.
            </summary>
      <param name="sampleSet">The sample set.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
    </member>
    <member name="T:Baselabs.Statistics.Distributions.Tools.Comparer">
      <summary>
            Provides a method to compare two Gaussian distributions for equality.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Distributions.Tools.Comparer.Equals``1(Baselabs.Statistics.Distributions.Gaussian{``0},Baselabs.Statistics.Distributions.Gaussian{``0},System.Double,System.UInt32)">
      <summary>
            Tests the specified Gaussian distributions for equality.
            </summary>
      <param name="first">The first Gaussian.</param>
      <param name="second">The second Gaussian.</param>
      <param name="maximumRootJSD">
            The maximum value of the square root of the Jensen-Shannon divergence between both Gaussians.
            The value must be in the interval [0, 1]. A value of 0 means that the Gaussians have to be identical,
            a value of 1 leads to a <c>true</c> result for any pair of Gaussians.
            </param>
      <param name="samples">The number of samples which are used for the calculation.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <returns>
        <c>true</c> if the two Gaussian distributions represent the same PDF, otherwise <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or
            <para /><paramref name="second" /> is null.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumRootJSD" /> is smaller than zero or
            <para /><paramref name="maximumRootJSD" /> is greater than one.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Filters.BayesFilter">
      <summary>
            Provides methods of the discrete Bayes filter.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Predict``3(Baselabs.Statistics.Distributions.SampleSet{``0},Baselabs.Statistics.Distributions.SampleSet{``1},``2)">
      <summary>
            Predicts the specified <paramref name="state" /> using the given <paramref name="systemModel" />
            and the <paramref name="control" />.
            </summary>
      <param name="state">The last a posteriori state.</param>
      <param name="control">The control.</param>
      <param name="systemModel">The system model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TControlSpace">The type of the control space.</typeparam>
      <typeparam name="TSystemModel">The type of the system model.</typeparam>
      <returns>The predicted state.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Predict``2(Baselabs.Statistics.Distributions.SampleSet{``0},``1)">
      <summary>
            Predicts the specified <paramref name="state" /> using the given <paramref name="systemModel" />.
            </summary>
      <param name="state">The last a posteriori state.</param>
      <param name="systemModel">The system model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TSystemModel">The type of the system model.</typeparam>
      <returns>The predicted state.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Predict``3(Baselabs.Statistics.Distributions.SampleSet{``0}@,Baselabs.Statistics.Distributions.SampleSet{``1},``2)">
      <summary>
    
            Predicts the specified <paramref name="state" /> using the given <paramref name="systemModel" />
            and the <paramref name="control" />.
            
  </summary>
      <param name="state">
            The last a posteriori state.
            <note type="caution">
            This method changes the content of <paramref name="state" />.
            When the method has been finished, it contains the a priori state.
            To create a new <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" />, use the
            <see cref="M:Baselabs.Statistics.Filters.BayesFilter.Predict``3(Baselabs.Statistics.Distributions.SampleSet{``0},Baselabs.Statistics.Distributions.SampleSet{``1},``2)" />
            method instead.
            </note></param>
      <param name="control">
    The last a posteriori state.The control.The system model.
  </param>
      <param name="systemModel">
    The last a posteriori state.The control.The system model.
  </param>
      <typeparam name="TStateSpace">
    The type of the state space.The type of the control space.The type of the system model.
  </typeparam>
      <typeparam name="TControlSpace">
    The type of the state space.The type of the control space.The type of the system model.
  </typeparam>
      <typeparam name="TSystemModel">
    The type of the state space.The type of the control space.The type of the system model.
  </typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Predict``2(Baselabs.Statistics.Distributions.SampleSet{``0}@,``1)">
      <summary>
            Predicts the specified <paramref name="state" /> using the given <paramref name="systemModel" />.
            </summary>
      <param name="state">
            The last a posteriori state.
            <note type="caution">
            This method changes the content of <paramref name="state" />.
            When the method has been finished, it contains the a priori state.
            To create a new <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" />, use the
            <see cref="M:Baselabs.Statistics.Filters.BayesFilter.Predict``2(Baselabs.Statistics.Distributions.SampleSet{``0},``1)" />
            method instead.
            </note></param>
      <param name="systemModel">The system model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TSystemModel">The type of the system model.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Predict``3(Baselabs.Statistics.Distributions.TwoPointDistribution{``0},Baselabs.Statistics.Distributions.SampleSet{``1},``2)">
      <summary>
            Predicts the specified <paramref name="state" /> using the given <paramref name="systemModel" />
            and the <paramref name="control" />.
            </summary>
      <param name="state">The last a posteriori state.</param>
      <param name="control">The control.</param>
      <param name="systemModel">The system model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TControlSpace">The type of the control space.</typeparam>
      <typeparam name="TSystemModel">The type of the system model.</typeparam>
      <returns>The predicted state.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Predict``2(Baselabs.Statistics.Distributions.TwoPointDistribution{``0},``1)">
      <summary>
            Predicts the specified <paramref name="state" /> using the given <paramref name="systemModel" />.
            </summary>
      <param name="state">The last a posteriori state.</param>
      <param name="systemModel">The system model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TSystemModel">The type of the system model.</typeparam>
      <returns>The predicted state.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Predict``3(Baselabs.Statistics.Distributions.TwoPointDistribution{``0}@,Baselabs.Statistics.Distributions.SampleSet{``1},``2)">
      <summary>
            Predicts the specified <paramref name="state" /> using the given <paramref name="systemModel" />
            and the <paramref name="control" />.
            </summary>
      <param name="state">
            The last a posteriori state.
            <note type="caution">
            This method changes the content of <paramref name="state" />.
            When the method has been finished, it contains the a priori state.
            To reuse an existing <see cref="T:Baselabs.Statistics.Distributions.TwoPointDistribution`1" />, use the
            <see cref="M:Baselabs.Statistics.Filters.BayesFilter.Predict``3(Baselabs.Statistics.Distributions.TwoPointDistribution{``0},Baselabs.Statistics.Distributions.SampleSet{``1},``2)" />
            method instead.
            </note></param>
      <param name="control">The control.</param>
      <param name="systemModel">The system model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TControlSpace">The type of the control space.</typeparam>
      <typeparam name="TSystemModel">The type of the system model.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Predict``2(Baselabs.Statistics.Distributions.TwoPointDistribution{``0}@,``1)">
      <summary>
            Predicts the specified <paramref name="state" /> using the given <paramref name="systemModel" />.
            </summary>
      <param name="state">
            The last a posteriori state.
            <note type="caution">
            This method changes the content of <paramref name="state" />.
            When the method has been finished, it contains the a priori state.
            To reuse an existing <see cref="T:Baselabs.Statistics.Distributions.TwoPointDistribution`1" />, use the
            <see cref="M:Baselabs.Statistics.Filters.BayesFilter.Predict``2(Baselabs.Statistics.Distributions.TwoPointDistribution{``0},``1)" />
            method instead.
            </note></param>
      <param name="systemModel">The system model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TSystemModel">The type of the system model.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Update``1(Baselabs.Statistics.Distributions.SampleSet{``0},Baselabs.Statistics.Distributions.IPreevaluatedConditional{``0})">
      <summary>
            Updates the specified <paramref name="predictedState" /> using the given 
            <paramref name="measurementLikelihood" />.
            </summary>
      <param name="predictedState">The a priori state.</param>
      <param name="measurementLikelihood">
            The preevaluated measurement likelihood <latex>p(z=z_0|x)</latex>.
            </param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <returns>The a posteriori state.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Update``3(Baselabs.Statistics.Distributions.SampleSet{``0},``1,``2)">
      <summary>
            Updates the specified <paramref name="predictedState" /> using the given <paramref name="measurement" />
            and the <paramref name="measurementModel" />.
            </summary>
      <param name="predictedState">The a priori state.</param>
      <param name="measurement">The measurement.</param>
      <param name="measurementModel">The measurement model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TMeasurementModel">The type of the measurement model.</typeparam>
      <returns>The a posteriori state.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Update``1(Baselabs.Statistics.Distributions.SampleSet{``0}@,Baselabs.Statistics.Distributions.IPreevaluatedConditional{``0})">
      <summary>
            Updates the specified <paramref name="predictedState" /> using the given 
            <paramref name="measurementLikelihood" />.
            </summary>
      <param name="predictedState">
            The a priori state.
            <note type="caution">
            This method changes the content of <paramref name="predictedState" />. When the method has finished,
            it contains the a posteriori state. To create a new <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" />, use the
            <see cref="M:Baselabs.Statistics.Filters.BayesFilter.Update``1(Baselabs.Statistics.Distributions.SampleSet{``0},Baselabs.Statistics.Distributions.IPreevaluatedConditional{``0})" />
            method instead.
            </note></param>
      <param name="measurementLikelihood">
            The preevaluated measurement likelihood <latex>p(z=z_0|x)</latex>.
            </param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Update``3(Baselabs.Statistics.Distributions.SampleSet{``0}@,``1,``2)">
      <summary>
            Updates the specified <paramref name="predictedState" /> using the given <paramref name="measurement" />
            and the <paramref name="measurementModel" />.
            </summary>
      <param name="predictedState">
            The a priori state.
            <note type="caution">
            This method changes the content of <paramref name="predictedState" />. When the method has finished,
            it contains the a posteriori state. To create a new <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" />, use the
            <see cref="M:Baselabs.Statistics.Filters.BayesFilter.Update``3(Baselabs.Statistics.Distributions.SampleSet{``0},``1,``2)" />
            method instead.
            </note></param>
      <param name="measurement">The measurement.</param>
      <param name="measurementModel">The measurement model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TMeasurementModel">The type of the measurement model.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Update``1(Baselabs.Statistics.Distributions.TwoPointDistribution{``0},Baselabs.Statistics.Distributions.IPreevaluatedConditional{``0})">
      <summary>
            Updates the specified <paramref name="predictedState" /> using the given 
            <paramref name="measurementLikelihood" />.
            </summary>
      <param name="predictedState">The a priori state.</param>
      <param name="measurementLikelihood">
            The preevaluated measurement likelihood <latex>p(z=z_0|x)</latex>.
            </param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <returns>The a posteriori state.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Update``3(Baselabs.Statistics.Distributions.TwoPointDistribution{``0},``1,``2)">
      <summary>
            Updates the specified <paramref name="predictedState" /> using the given <paramref name="measurement" />
            and the <paramref name="measurementModel" />.
            </summary>
      <param name="predictedState">The a priori state.</param>
      <param name="measurement">The measurement.</param>
      <param name="measurementModel">The measurement model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TMeasurementModel">The type of the measurement model.</typeparam>
      <returns>The a posteriori state.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Update``1(Baselabs.Statistics.Distributions.TwoPointDistribution{``0}@,Baselabs.Statistics.Distributions.IPreevaluatedConditional{``0})">
      <summary>
            Updates the specified <paramref name="predictedState" /> using the given 
            <paramref name="measurementLikelihood" />.
            </summary>
      <param name="predictedState">
            The a priori state.
            <note type="caution">
            This method changes the content of <paramref name="predictedState" />. When the method has finished,
            it contains the a posteriori state. To create a new <see cref="T:Baselabs.Statistics.Distributions.TwoPointDistribution`1" />, use the
            <see cref="M:Baselabs.Statistics.Filters.BayesFilter.Update``1(Baselabs.Statistics.Distributions.TwoPointDistribution{``0},Baselabs.Statistics.Distributions.IPreevaluatedConditional{``0})" />
            method instead.
            </note></param>
      <param name="measurementLikelihood">
            The preevaluated measurement likelihood <latex>p(z=z_0|x)</latex>.
            </param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Filters.BayesFilter.Update``3(Baselabs.Statistics.Distributions.TwoPointDistribution{``0}@,``1,``2)">
      <summary>
            Updates the specified <paramref name="predictedState" /> using the given <paramref name="measurement" />
            and the <paramref name="measurementModel" />.
            </summary>
      <param name="predictedState">
            The a priori state.
            <note type="caution">
            This method changes the content of <paramref name="predictedState" />. When the method has finished,
            it contains the a posteriori state. To create a new <see cref="T:Baselabs.Statistics.Distributions.TwoPointDistribution`1" />, use the
            <see cref="M:Baselabs.Statistics.Filters.BayesFilter.Update``3(Baselabs.Statistics.Distributions.TwoPointDistribution{``0},``1,``2)" />
            method instead.
            </note></param>
      <param name="measurement">The measurement.</param>
      <param name="measurementModel">The measurement model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TMeasurementModel">The type of the measurement model.</typeparam>
    </member>
    <member name="T:Baselabs.Statistics.Filters.EKF">
      <summary>
            Provides extended Kalman filter methods for non-linear transitions.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Filters.EKF.PredictMeasurement``3(Baselabs.Statistics.Distributions.Gaussian{``0},``2)">
      <summary>
            Calculates the predicted measurement PDF.
            </summary>
      <param name="predictedState">
            The a priori PDF <latex>p(x_k|Z_{k-1})</latex> in Gaussian representation.
            </param>
      <param name="measurementModel">The measurement model.</param>
      <param name="transitionMatrix">The linearized transition matrix of the measurement Model.</param>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TMeasurementModel">The type of the measurement model.</typeparam>
      <returns>
            The predicted measurement PDF <latex>p(z_k|Z_{k-1})</latex> in Gaussian representation.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.EKF.PredictMeasurement``3(Baselabs.Statistics.Distributions.Gaussian{``0},``2,Baselabs.Statistics.Spaces.Matrix{``1,``0}@)">
      <summary>
            Calculates the predicted measurement PDF and the measurement transition matrix.
            </summary>
      <param name="predictedState">
            The a priori PDF <latex>p(x_k|Z_{k-1})</latex> in Gaussian representation.
            </param>
      <param name="measurementModel">The measurement model.</param>
      <param name="transitionMatrix">The linearized transition matrix of the measurement Model.</param>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TMeasurementModel">The type of the measurement model.</typeparam>
      <returns>
            The predicted measurement PDF <latex>p(z_k|Z_{k-1})</latex> in Gaussian representation.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.EKF.PredictState``2(System.TimeSpan,Baselabs.Statistics.Distributions.Gaussian{``0},``1)">
      <summary>
            Predicts the specified <paramref name="state" /> from time k-1 to time k.
            </summary>
      <param name="deltaT">The time span between time k-1 and time k.</param>
      <param name="state">The state at time k-1.</param>
      <param name="systemModel">The linearized system model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TSystemModel">The type of the linearized system model.</typeparam>
      <returns>The predicted state at time k.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.EKF.Update``2(Baselabs.Statistics.Distributions.Gaussian{``0},Baselabs.Statistics.Distributions.Gaussian{``1},``1,Baselabs.Statistics.Spaces.Matrix{``1,``0})">
      <summary>
            Updates the specified predicted state using the given <paramref name="measurement" /> and predicted measurement.
            </summary>
      <param name="predictedState">
            The a priori PDF <latex>p(x_k|Z_{k-1})</latex> in Gaussian representation.
            </param>
      <param name="predictedMeasurement">
            The predicted measurement <latex>p(z_k|Z_{k-1})</latex> in Gaussian representation.
            </param>
      <param name="measurement">The measurement z.</param>
      <param name="transitionMatrix">The linearized transition matrix of the measurement model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <returns>
            The a posteriori state PDF <latex>p(x_k|Z_k)</latex> in Gaussian representation.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.EKF.Update``3(Baselabs.Statistics.Distributions.Gaussian{``0},``1,``2)">
      <summary>
            Updates the specified predicted state using the given <paramref name="measurement" /> and measurement model.
            </summary>
      <param name="predictedState">
    
            The a priori PDF <latex>p(x_k|Z_{k-1})</latex> in Gaussian representation.
            
            The predicted measurement <latex>p(z_k|Z_{k-1})</latex> in Gaussian representation.
            The measurement z.The linearized transition matrix of the measurement model.
  </param>
      <param name="measurement">
    
            The a priori PDF <latex>p(x_k|Z_{k-1})</latex> in Gaussian representation.
            
            The predicted measurement <latex>p(z_k|Z_{k-1})</latex> in Gaussian representation.
            The measurement z.The linearized transition matrix of the measurement model.
  </param>
      <param name="measurementModel">
            The linearized measurement model.
            </param>
      <typeparam name="TStateSpace">
    The type of the state space.The type of the measurement space.
  </typeparam>
      <typeparam name="TMeasurementSpace">
    The type of the state space.The type of the measurement space.
  </typeparam>
      <typeparam name="TMeasurementModel">
            The type of the linearized measurement model.
            </typeparam>
      <returns>
    
            The a posteriori state PDF <latex>p(x_k|Z_k)</latex> in Gaussian representation.
            
  </returns>
    </member>
    <member name="T:Baselabs.Statistics.Filters.KF">
      <summary>
            Provides linear Kalman filter methods.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Filters.KF.Predict``2(System.TimeSpan,Baselabs.Statistics.Distributions.Gaussian{``0},``1)">
      <summary>
            Predicts the specified <paramref name="state" /> from time k-1 to time k using a linear transition.
            </summary>
      <param name="deltaT">The time span between k-1 and k.</param>
      <param name="state">The state at time k-1.</param>
      <param name="systemModel">The linear system model.</param>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TSystemModel">The type of the linear system model.</typeparam>
      <returns>The predicted state a time k.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.KF.Update``3(Baselabs.Statistics.Distributions.Gaussian{``0},``1,``2)">
      <summary>
            Updates the specified <paramref name="predictedState" /> using the given <paramref name="measurement" />.
            </summary>
      <param name="predictedState">
            The predicted state as given by <see cref="M:Baselabs.Statistics.Filters.KF.Predict``2(System.TimeSpan,Baselabs.Statistics.Distributions.Gaussian{``0},``1)" />.
            </param>
      <param name="measurement">The measurement.</param>
      <param name="measurementModel">The linear measurement model.</param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TMeasurementModel">The type of the linear measurement model.</typeparam>
      <returns>The updated state.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Filters.ParticleFilter">
      <summary>
            Provides particle filter methods.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Filters.ParticleFilter.Predict``2(System.TimeSpan,Baselabs.Statistics.Distributions.SampleSet{``0},``1)">
      <summary>
            Predicts the specified <paramref name="state" /> from time k-1 to time k.
            </summary>
      <param name="deltaT">The time span between k-1 and k.</param>
      <param name="state">The state at time k-1.</param>
      <param name="systemModel">The system model.</param>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TSystemModel">The type of the system model.</typeparam>
      <returns>The predicted state at time k represented by a new <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> instance.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.ParticleFilter.Predict``2(System.TimeSpan,Baselabs.Statistics.Distributions.SampleSet{``0}@,``1)">
      <summary>
            Predicts the specified <paramref name="state" /> from time k-1 to time k.
            </summary>
      <param name="deltaT">The time span between k-1 and k.</param>
      <param name="state">
            The state at time k-1. After method completion, this instance contains the state at time k.
            </param>
      <param name="systemModel">The system model.</param>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TSystemModel">The type of the system model.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Filters.ParticleFilter.Update``3(Baselabs.Statistics.Distributions.SampleSet{``0},``1,``2)">
      <summary>
            Updates the specified <paramref name="predictedState" /> by the given <paramref name="measurement" />.
            </summary>
      <param name="predictedState">The predicted state.</param>
      <param name="measurement">The measurement.</param>
      <param name="measurementModel">The measurement model.</param>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TMeasurementModel">The type of the measurement model.</typeparam>
      <returns>The updated state represented by a new <see cref="T:Baselabs.Statistics.Distributions.SampleSet`1" /> instance.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.ParticleFilter.Update``3(Baselabs.Statistics.Distributions.SampleSet{``0}@,``1,``2)">
      <summary>
            Updates the specified <paramref name="predictedState" /> by the given <paramref name="measurement" />.
            </summary>
      <param name="predictedState">
            The predicted state. After method completion this instance contains the updated state.
            </param>
      <param name="measurement">The measurement.</param>
      <param name="measurementModel">The measurement model.</param>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TMeasurementModel">The type of the measurement model.</typeparam>
    </member>
    <member name="T:Baselabs.Statistics.Filters.UKF">
      <summary>
            Provides unscented Kalman filter methods for non-linear transitions.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Filters.UKF.PredictMeasurement``3(Baselabs.Statistics.Distributions.SigmaPoints{``0},``2)">
      <summary>
            Calculates the predicted measurement PDF.
            </summary>
      <param name="predictedState">
            The a priori PDF <latex>p(x_k|Z_{k-1})</latex> in sigma point representation.
            </param>
      <param name="measurementModel">The measurement model.</param>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TMeasurementModel">The type of the measurement model.</typeparam>
      <returns>
            The predicted measurement PDF <latex>p(z_k|Z_{k-1})</latex> in sigma point representation.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.UKF.PredictState``4(System.TimeSpan,Baselabs.Statistics.Distributions.Gaussian{``0},Baselabs.Statistics.Distributions.Gaussian{``2},``3)">
      <summary>
            Predicts the state PDF <latex>p(x_k|Z_{k-1})</latex> from epoch k-1 to epoch k using a system model
            with arbitrary Gaussian noise.
            </summary>
      <param name="deltaT">The time span between epochs k-1 and k.</param>
      <param name="state">The last a posteriori state <latex>p(x_{k-1}|Z_{k-1})</latex>.</param>
      <param name="processNoiseCovariance">
            The covariance matrix of the time continuous process noise distribution <latex>p(w_{k-1}|Z_{k-1})</latex>.
            </param>
      <param name="systemModel">The system model.</param>
      <param name="alpha">The scaling parameter α.</param>
      <param name="beta">The scaling parameter β.</param>
      <param name="kappa">The scaling parameter κ.</param>
      <typeparam name="TSystemModel">The system model with arbitrary Gaussian noise.</typeparam>
      <typeparam name="TStateSpace">The state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The system noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <returns>The predicted state <latex>p(x_k|Z_{k-1})</latex> in sigma point representation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="processNoiseCovariance" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Filters.UKF.PredictState``4(System.TimeSpan,Baselabs.Statistics.Distributions.Gaussian{``0},Baselabs.Statistics.Distributions.Gaussian{``2},``3,System.Double,System.Double,System.Double)">
      <summary>
            Predicts the state PDF <latex>p(x_k|Z_{k-1})</latex> from epoch k-1 to epoch k using a system model
            with arbitrary Gaussian noise.
            </summary>
      <param name="deltaT">The time span between epochs k-1 and k.</param>
      <param name="state">The last a posteriori state <latex>p(x_{k-1}|Z_{k-1})</latex>.</param>
      <param name="processNoiseCovariance">
            The covariance matrix of the time continuous process noise distribution <latex>p(w_{k-1}|Z_{k-1})</latex>.
            </param>
      <param name="systemModel">The system model.</param>
      <param name="alpha">The scaling parameter α.</param>
      <param name="beta">The scaling parameter β.</param>
      <param name="kappa">The scaling parameter κ.</param>
      <typeparam name="TSystemModel">The system model with arbitrary Gaussian noise.</typeparam>
      <typeparam name="TStateSpace">The state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The system noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <returns>The predicted state <latex>p(x_k|Z_{k-1})</latex> in sigma point representation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="processNoiseCovariance" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Filters.UKF.PredictState``4(System.TimeSpan,Baselabs.Statistics.Distributions.Gaussian{``0},Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{``1},Baselabs.Statistics.Distributions.Gaussian{``2},``3)">
      <summary>
            Predicts the state PDF <latex>p(x_k|Z_{k-1})</latex> from epoch k-1 to epoch k using a system model
            with arbitrary Gaussian noise.
            </summary>
      <param name="deltaT">The time span between epochs k-1 and k.</param>
      <param name="state">The last a posteriori state <latex>p(x_{k-1}|Z_{k-1})</latex>.</param>
      <param name="processNoiseCovariance">
            The covariance matrix of the time continuous process noise distribution <latex>p(w_{k-1}|Z_{k-1})</latex>.
            </param>
      <param name="systemModel">The system model.</param>
      <param name="alpha">The scaling parameter α.</param>
      <param name="beta">The scaling parameter β.</param>
      <param name="kappa">The scaling parameter κ.</param>
      <typeparam name="TSystemModel">The system model with arbitrary Gaussian noise.</typeparam>
      <typeparam name="TStateSpace">The state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The system noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <returns>The predicted state <latex>p(x_k|Z_{k-1})</latex> in sigma point representation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="processNoiseCovariance" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Filters.UKF.PredictState``4(System.TimeSpan,Baselabs.Statistics.Distributions.Gaussian{``0},Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{``1},Baselabs.Statistics.Distributions.Gaussian{``2},``3,System.Double,System.Double,System.Double)">
      <summary>
            Predicts the state PDF <latex>p(x_k|Z_{k-1})</latex> from epoch k-1 to epoch k using a system model
            with arbitrary Gaussian noise and an additional Gaussian condition.
            </summary>
      <param name="deltaT">The time span between epochs k-1 and k.</param>
      <param name="state">The last a posteriori state <latex>p(x_{k-1}|Z_{k-1})</latex>.</param>
      <param name="processNoiseCovariance">
            The covariance matrix of the time continuous process noise distribution <latex>p(w_{k-1}|Z_{k-1})</latex>.
            </param>
      <param name="additionalCondition">An additional condition for the system model.</param>
      <param name="systemModel">The system model.</param>
      <param name="alpha">The scaling parameter α.</param>
      <param name="beta">The scaling parameter β.</param>
      <param name="kappa">The scaling parameter κ.</param>
      <typeparam name="TSystemModel">The system model with arbitrary Gaussian noise.</typeparam>
      <typeparam name="TStateSpace">The state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The system noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TConditionSpace">The type of the condition <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <returns>The predicted state <latex>p(x_k|Z_{k-1})</latex> in sigma point representation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="processNoiseCovariance" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Filters.UKF.PredictState``3(System.TimeSpan,Baselabs.Statistics.Distributions.Gaussian{``0},Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{``1},``2)">
      <summary>
            Predicts the state PDF <latex>p(x_k|Z_{k-1})</latex> from epoch k-1 to epoch k using a system model
            with arbitrary Gaussian noise.
            The scaling parameters are the standard parameters defined in <see cref="T:Baselabs.Statistics.Distributions.SigmaPointsScaling" />.
            </summary>
      <param name="deltaT">The time span between epochs k-1 and k.</param>
      <param name="state">The last a posteriori state <latex>p(x_{k-1}|Z_{k-1})</latex>.</param>
      <param name="processNoiseCovariance">
            The covariance matrix of the time continuous process noise distribution <latex>p(w_{k-1}|Z_{k-1})</latex>.
            </param>
      <param name="systemModel">The system model.</param>
      <typeparam name="TSystemModel">The system model with arbitrary Gaussian noise.</typeparam>
      <typeparam name="TStateSpace">The state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The system noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <returns>The predicted state <latex>p(x_k|Z_{k-1})</latex> in sigma point representation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="processNoiseCovariance" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Filters.UKF.PredictState``3(System.TimeSpan,Baselabs.Statistics.Distributions.Gaussian{``0},Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{``1},``2,System.Double,System.Double,System.Double)">
      <summary>
            Predicts the state PDF <latex>p(x_k|Z_{k-1})</latex> from epoch k-1 to epoch k using a system model
            with arbitrary Gaussian noise.
            </summary>
      <param name="deltaT">The time span between epochs k-1 and k.</param>
      <param name="state">The last a posteriori state <latex>p(x_{k-1}|Z_{k-1})</latex>.</param>
      <param name="processNoiseCovariance">
            The covariance matrix of the time continuous process noise distribution <latex>p(w_{k-1}|Z_{k-1})</latex>.
            </param>
      <param name="systemModel">The system model.</param>
      <param name="alpha">The scaling parameter α.</param>
      <param name="beta">The scaling parameter β.</param>
      <param name="kappa">The scaling parameter κ.</param>
      <typeparam name="TSystemModel">The system model with arbitrary Gaussian noise.</typeparam>
      <typeparam name="TStateSpace">The state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The system noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <returns>The predicted state <latex>p(x_k|Z_{k-1})</latex> in sigma point representation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="processNoiseCovariance" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Filters.UKF.PredictState``3(System.TimeSpan,Baselabs.Statistics.Distributions.Gaussian{``0},``2)">
      <summary>
            Predicts the state PDF <latex>p(x_k|Z_{k-1})</latex> from epoch k-1 to epoch k using a system model
            with arbitrary Gaussian noise.
            The scaling parameters are the standard parameters defined in <see cref="T:Baselabs.Statistics.Distributions.SigmaPointsScaling" />.
            </summary>
      <param name="systemModel">The system model with Gaussian noise.</param>
      <param name="deltaT">The time span between epochs k-1 and k.</param>
      <param name="state">The last a posteriori state <latex>p(x_{k-1}|Z_{k-1})</latex>.</param>
      <param name="processNoiseCovariance">
            The covariance matrix of the time continuous process noise distribution <latex>p(w_{k-1}|Z_{k-1})</latex>.
            </param>
      <typeparam name="TSystemModel">The system model with arbitrary Gaussian noise.</typeparam>
      <typeparam name="TStateSpace">The state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The system noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <returns>The predicted state <latex>p(x_k|Z_{k-1})</latex> in sigma point representation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="processNoiseCovariance" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Filters.UKF.PredictState``3(System.TimeSpan,Baselabs.Statistics.Distributions.Gaussian{``0},``2,System.Double,System.Double,System.Double)">
      <summary>
            Predicts the state PDF <latex>p(x_k|Z_{k-1})</latex> from epoch k-1 to epoch k using a system model
            with arbitrary Gaussian noise.
            </summary>
      <param name="systemModel">The system model with Gaussian noise.</param>
      <param name="deltaT">The time span between epochs k-1 and k.</param>
      <param name="state">The last a posteriori state <latex>p(x_{k-1}|Z_{k-1})</latex>.</param>
      <param name="processNoiseCovariance">
            The covariance matrix of the time continuous process noise distribution <latex>p(w_{k-1}|Z_{k-1})</latex>.
            </param>
      <param name="alpha">The scaling parameter α.</param>
      <param name="beta">The scaling parameter β.</param>
      <param name="kappa">The scaling parameter κ.</param>
      <typeparam name="TSystemModel">The system model with arbitrary Gaussian noise.</typeparam>
      <typeparam name="TStateSpace">The state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The system noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <returns>The predicted state <latex>p(x_k|Z_{k-1})</latex> in sigma point representation.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="processNoiseCovariance" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Filters.UKF.Update``2(Baselabs.Statistics.Distributions.SigmaPoints{``0},Baselabs.Statistics.Distributions.SigmaPoints{``1},``1)">
      <summary>
            Corrects the state by the <paramref name="measurement" />
            and returns the a posteriori state <latex>p(x_k|Z_k)</latex>.
            </summary>
      <param name="predictedState">
            The a priori PDF <latex>p(x_k|Z_{k-1})</latex> in sigma point representation.
            </param>
      <param name="predictedMeasurement">
            The predicted measurement <latex>p(z_k|Z_{k-1})</latex> in sigma point representation.
            </param>
      <param name="measurement">The measurement z.</param>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <returns>
            The a posteriori state PDF <latex>p(x_k|Z_k)</latex> in Gaussian representation.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Filters.UKF.Update``2(Baselabs.Statistics.Distributions.SigmaPoints{``0},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.SigmaPoints{``1}},System.Collections.Generic.IEnumerable{``1})">
      <summary>
            Corrects the state by a set of predicted measurements and the corresponding actual measurements
            and returns the a posteriori state <latex>p(x_k|Z_k)</latex>.
            </summary>
      <param name="predictedState">
            The a priori PDF <latex>p(x_k|Z_{k-1})</latex> in sigma point representation.
            </param>
      <param name="predictedMeasurements">
            A set of predicted measurements <latex>p(z_{k,1...n}|Z_{k-1})</latex> in sigma point representation
            created by the <see cref="M:Baselabs.Statistics.Filters.UKF.PredictMeasurement``3(Baselabs.Statistics.Distributions.SigmaPoints{``0},``2)" /> method.
            </param>
      <param name="measurements">
            A set of measurements <latex>z_{1..n}</latex>.
            </param>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <returns>
            The a posteriori state PDF <latex>p(x_k|Z_k)</latex> in Gaussian representation.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            The parameter <paramref name="predictedState" /> is null.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The parameter <paramref name="predictedMeasurements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            The parameter <paramref name="measurements" /> is null.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of predicted measurements does not equal the number of measurements.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Filters.UKF.Update``3(Baselabs.Statistics.Distributions.SigmaPoints{``0},``1,``2)">
      <summary>
            Corrects the state by the <paramref name="measurement" />
            and returns the a posteriori state <latex>p(x_k|Z_k)</latex>.
            </summary>
      <param name="predictedState">
            The a priori PDF <latex>p(x_k|Z_{k-1})</latex> in sigma point representation.
            </param>
      <param name="measurementModel">The measurement model.</param>
      <param name="measurement">The measurement z.</param>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TMeasurementModel">The type of the measurement model.</typeparam>
      <returns>
            The a posteriori state PDF <latex>p(x_k|Z_k)</latex> in Gaussian representation.
            </returns>
    </member>
    <member name="T:Baselabs.Statistics.Models.EgoMotionCompensation`2">
      <summary>
            A nonlinear transformation to compensate the ego motion in vehicle tracking applications.
            </summary>
      <typeparam name="TStateSpace">The <see cref="T:Baselabs.Statistics.Spaces.Space" /> of the tracked vehicle.</typeparam>
      <typeparam name="TEgoMotionSpace">The <see cref="T:Baselabs.Statistics.Spaces.Space" /> of the ego vehicle.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.EgoMotionCompensation`2.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Models.EgoMotionCompensation`2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.EgoMotionCompensation`2.Condition">
      <summary>
            Gets or sets the first condition, which is the system state of the tracked object.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.EgoMotionCompensation`2.Condition2">
      <summary>
            Gets or sets the second condition, which is the system state of the ego vehicle.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.EgoMotionCompensation`2.Expectation">
      <summary>
            Gets the expectation vector.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Models.IGaussianNoise`1">
      <summary>
            Exposes the noise covariance matrix of a zero mean Gaussian noise process.
            </summary>
      <typeparam name="TNoiseSpace">The type of the noise space.</typeparam>
    </member>
    <member name="P:Baselabs.Statistics.Models.IGaussianNoise`1.NoiseCovariance">
      <summary>
            Gets the covariance matrix of the zero mean Gaussian noise.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Models.SystemModel`2">
      <summary>
            Represents an abstract base class for non-linear system models 
            which can incorporate the process noise in an arbitrary way.
            </summary>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TProcessNoiseSpace">The type of the process noise space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModel`2" /> class
            with an uninitialized process noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModel`2" /> class
            with the given process noise covariance matrix <paramref name="processNoiseCovariance" />.
            </summary>
      <param name="processNoiseCovariance">The process noise covariance.</param>
    </member>
    <member name="P:Baselabs.Statistics.Models.SystemModel`2.Condition">
      <summary>
            Sets the state condition.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.SystemModel`2.Condition2">
      <summary>
            Sets the process noise condition.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModel`2.Draw">
      <summary>
            Draws one random sample from the distribution.
            </summary>
      <returns>The randomly drawn sample.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModel`2.Draw(System.Int32)">
      <summary>
            Draws <paramref name="count" /> random samples from the distribution.
            </summary>
      <param name="count">The number of samples to be drawn.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> with the randomly drawn samples.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Models.SystemModel`2.Expectation">
      <summary>
            Gets the expectation vector.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModel`2.f(`0,System.TimeSpan,`1,`0@)">
      <summary>
            Calculates the specified state.
            </summary>
      <param name="state">The state.</param>
      <param name="deltaT">The time span to predict.</param>
      <param name="processNoise">A process noise sample.</param>
      <param name="predictedState">The predicted state.</param>
    </member>
    <member name="P:Baselabs.Statistics.Models.SystemModel`2.NoiseCovariance">
      <summary>
            Gets or sets the process noise covariance.
            </summary>
      <exception cref="T:System.InvalidOperationException">The process noise covariance of the model is not initialized.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Models.SystemModel`2.TimeCondition">
      <summary>
            Sets the time condition which gives the duration between the last and the current time step.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2">
      <summary>
            Provides an abstract base class for non-linear measurement models.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2" /> class
            with an uninitialized measurement noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2" /> class
            with the given measurement noise covariance matrix <paramref name="measurementNoiseCovariance" />.
            </summary>
      <param name="measurementNoiseCovariance">The measurement noise covariance.</param>
    </member>
    <member name="P:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2.Condition">
      <summary>
            Sets the state condition.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2.Covariance">
      <summary>
            Gets the measurement noise covariance matrix.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2.Evaluate(`0)">
      <summary>
            Evaluates the probability mass function (PMF) or the probability density function (PDF) at the 
            <paramref name="sample" /> and provides a value proportional to the PMF or the PDF.
            </summary>
      <param name="sample">The sample.</param>
      <returns>The value proportional to the PMF or the PDF.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2.Expectation">
      <summary>
            Gets the expectation of the measurement model.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2.h(`1,`0@)">
      <summary>
            Calculates the predicted measurement from the given <paramref name="state" />.
            </summary>
      <param name="state">The state.</param>
      <param name="predictedMeasurement">The predicted measurement.</param>
    </member>
    <member name="P:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2.NoiseCovariance">
      <summary>
            Gets or sets the measurement noise covariance.
            </summary>
      <exception cref="T:System.InvalidOperationException">The measurement noise covariance of the model is not initialized.</exception>
    </member>
    <member name="T:Baselabs.Statistics.Models.AdditiveNoise.SystemModel`2">
      <summary>
            Represents an abstract base class for non-linear system models with additive noise.
            </summary>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TProcessNoiseSpace">The type of the process noise space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.AdditiveNoise.SystemModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.AdditiveNoise.SystemModel`2" /> class
            with an uninitialized process noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.AdditiveNoise.SystemModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.AdditiveNoise.SystemModel`2" /> class
            with the given process noise covariance matrix <paramref name="processNoiseCovariance" />.
            </summary>
      <param name="processNoiseCovariance">The process noise covariance.</param>
    </member>
    <member name="P:Baselabs.Statistics.Models.AdditiveNoise.SystemModel`2.Covariance">
      <summary>
            Gets the predicted covariance component due to process noise.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.AdditiveNoise.SystemModel`2.f(`0,System.TimeSpan,`1,`0@)">
      <summary>
            Calculates the specified state.
            </summary>
      <param name="state">The state.</param>
      <param name="deltaT">The time span to predict.</param>
      <param name="processNoise">A process noise sample.</param>
      <param name="predictedState">The predicted state.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.AdditiveNoise.SystemModel`2.f(`0,System.TimeSpan,`0@)">
      <summary>
            Predicts the <paramref name="state" /> using the given time span.
            </summary>
      <param name="state">The state.</param>
      <param name="deltaT">The time span.</param>
      <param name="predictedState">The predicted state.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.AdditiveNoise.SystemModel`2.FillNoiseDiscretizationMatrix(`0,System.TimeSpan,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            Fills the noise discretization matrix.
            </summary>
      <param name="stateExpectation">The state expectation.</param>
      <param name="deltaT">The time span.</param>
      <param name="G">The noise discretization matrix to fill.</param>
    </member>
    <member name="T:Baselabs.Statistics.Models.LinearizedTransition.MeasurementModel`2">
      <summary>
            Represents an abstract base class for linearized measurement models.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearizedTransition.MeasurementModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.LinearizedTransition.MeasurementModel`2" /> class
            with an uninitialized measurement noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearizedTransition.MeasurementModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.LinearizedTransition.MeasurementModel`2" /> class
            with the given measurement noise covariance matrix <paramref name="measurementNoiseCovariance" />.
            </summary>
      <param name="measurementNoiseCovariance">The measurement noise covariance.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearizedTransition.MeasurementModel`2.FillTransitionMatrix(`1,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            When overridden, fills the given matrix with the measurement matrix of the model.
            </summary>
      <param name="predictedStateExpectation">
            The predicted system state. 
            This state will be used as linearization point for calculating the Jacobian.
            </param>
      <param name="H">
            The <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> instance to write
            the measurement matrix of the model to.
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Models.LinearizedTransition.MeasurementModel`2.TransitionMatrix">
      <summary>
            Gets the measurement matrix.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Models.LinearizedTransition.SystemModel`2">
      <summary>
            Represents an abstract base class for linearized system models.
            </summary>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TProcessNoiseSpace">The type of the process noise space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearizedTransition.SystemModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.LinearizedTransition.SystemModel`2" /> class
            with an uninitialized process noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearizedTransition.SystemModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.LinearizedTransition.SystemModel`2" /> class
            with the given process noise covariance matrix <paramref name="processNoiseCovariance" />.
            </summary>
      <param name="processNoiseCovariance">The process noise covariance.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearizedTransition.SystemModel`2.FillTransitionMatrix(`0,System.TimeSpan,Baselabs.Statistics.Spaces.SquareMatrix{`0}@)">
      <summary>
            When overridden, fills the given matrix with the time discrete state transition matrix of the model.
            </summary>
      <param name="stateExpectation">
            The previous system state. This state will be used as linearization point for calculating the Jacobian.
            </param>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="F">
            The <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" /> instance to write the transition matrix of the model to.
            It is initialized with an identity matrix.
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Models.LinearizedTransition.SystemModel`2.TransitionMatrix">
      <summary>
            Gets the transition matrix.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Models.LinearTransition.MeasurementModel`2">
      <summary>
            Represents an abstract base class for linear measurement models.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearTransition.MeasurementModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.LinearTransition.MeasurementModel`2" /> class
            with an uninitialized measurement noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearTransition.MeasurementModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.LinearTransition.MeasurementModel`2" /> class
            with the given measurement noise covariance matrix <paramref name="measurementNoiseCovariance" />.
            </summary>
      <param name="measurementNoiseCovariance">The measurement noise covariance.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearTransition.MeasurementModel`2.FillTransitionMatrix(Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            When overridden, fills the given matrix with the measurement matrix of the model.
            </summary>
      <param name="H">
            The <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> instance 
            to write the measurement matrix of the model to.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearTransition.MeasurementModel`2.FillTransitionMatrix(`1,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            When overridden, fills the given matrix with the measurement matrix of the model.
            </summary>
      <param name="predictedStateExpectation">
            The predicted system state. 
            This state will be used as linearization point for calculating the Jacobian.
            </param>
      <param name="H">
            The <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> instance to write
            the measurement matrix of the model to.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearTransition.MeasurementModel`2.h(`1,`0@)">
      <summary>
            Calculates the predicted measurement from the given <paramref name="state" />.
            </summary>
      <param name="state">The state.</param>
      <param name="predictedMeasurement">The predicted measurement.</param>
    </member>
    <member name="T:Baselabs.Statistics.Models.LinearTransition.SystemModel`2">
      <summary>
            Represents an abstract base class for linear system models.
            </summary>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
      <typeparam name="TProcessNoiseSpace">The type of the process noise space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearTransition.SystemModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.LinearTransition.SystemModel`2" /> class
            with an uninitialized process noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearTransition.SystemModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.LinearTransition.SystemModel`2" /> class
            with the given process noise covariance matrix <paramref name="processNoiseCovariance" />.
            </summary>
      <param name="processNoiseCovariance">The process noise covariance.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearTransition.SystemModel`2.f(`0,System.TimeSpan,`0@)">
      <summary>
            Predicts the <paramref name="state" /> using the given time span.
            </summary>
      <param name="state">The state.</param>
      <param name="deltaT">The time span.</param>
      <param name="predictedState">The predicted state.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearTransition.SystemModel`2.FillNoiseDiscretizationMatrix(System.TimeSpan,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            Fills the noise discretization matrix.
            </summary>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="G">
            The noise discretization matrix <latex>\mathbf{G}</latex> is used for the state prediction
            <para><latex>
            \mathbf{x}_k=\mathbf{F} \mathbf{x}_{k-1} + \mathbf{G} \mathbf{v}_k
            </latex>
            where <latex>v_k</latex> is the process noise.
            </para></param>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearTransition.SystemModel`2.FillNoiseDiscretizationMatrix(`0,System.TimeSpan,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            Fills the noise discretization matrix.
            </summary>
      <param name="stateExpectation">The state expectation.</param>
      <param name="deltaT">The time span.</param>
      <param name="G">The noise discretization matrix to fill.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearTransition.SystemModel`2.FillTransitionMatrix(System.TimeSpan,Baselabs.Statistics.Spaces.SquareMatrix{`0}@)">
      <summary>
            When overridden, fills the given matrix with the time discrete state transition matrix of the model.
            </summary>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="F">
            The <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" /> instance to write the transition matrix of the model to.
            It is initialized with an identity matrix.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Models.LinearTransition.SystemModel`2.FillTransitionMatrix(`0,System.TimeSpan,Baselabs.Statistics.Spaces.SquareMatrix{`0}@)">
      <summary>
            This method calls the 
            <see cref="M:Baselabs.Statistics.Models.LinearTransition.SystemModel`2.FillTransitionMatrix(System.TimeSpan,Baselabs.Statistics.Spaces.SquareMatrix{`0}@)" />
            method neglecting <paramref name="stateExpectation" />.
            </summary>
      <param name="stateExpectation">
            The previous system state. This state will be used as linearization point for calculating the Jacobian.
            </param>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="F">
            The <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" /> instance to write the transition matrix of the model to.
            It is initialized with an identity matrix.
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Models.MeasurementModels.HeadingMeasurementModel`2">
      <summary>
            A heading measurement model.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.HeadingMeasurementModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.HeadingMeasurementModel`2" />
            class with an uninitialized measurement noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.HeadingMeasurementModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.HeadingMeasurementModel`2" />
            class with the specified measurement noise covariance.
            </summary>
      <param name="measurementNoiseCovariance">The measurement noise covariance.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.HeadingMeasurementModel`2.FillTransitionMatrix(Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            When overridden, fills the given matrix with the measurement matrix of the model.
            </summary>
      <param name="H">
            The <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> instance 
            to write the measurement matrix of the model to.
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Models.MeasurementModels.PositionMeasurementModel`2">
      <summary>
            A Cartesian position measurement model.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.PositionMeasurementModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.PositionMeasurementModel`2" />
            class with an uninitialized measurement noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.PositionMeasurementModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.PositionMeasurementModel`2" />
            class with the specified measurement noise covariance.
            </summary>
      <param name="measurementNoiseCovariance">The measurement noise covariance.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.PositionMeasurementModel`2.FillTransitionMatrix(Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            When overridden, fills the given matrix with the measurement matrix of the model.
            </summary>
      <param name="H">
            The <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> instance 
            to write the measurement matrix of the model to.
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Models.MeasurementModels.PositionMeasurementModel3D`2">
      <summary>
            A Cartesian measurement model including altitude.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.PositionMeasurementModel3D`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.PositionMeasurementModel3D`2" />
            class with an uninitialized measurement noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.PositionMeasurementModel3D`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.PositionMeasurementModel3D`2" />
            class with the specified measurement noise covariance.
            </summary>
      <param name="measurementNoiseCovariance">The measurement noise covariance.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.PositionMeasurementModel3D`2.FillTransitionMatrix(Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            When overridden, fills the given matrix with the measurement matrix of the model.
            </summary>
      <param name="H">
            The <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> instance 
            to write the measurement matrix of the model to.
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2">
      <summary>
            A measurement model for a generic radar sensor.
            </summary>
      <typeparam name="TRadarSpace">The type of the measurement space.</typeparam>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2" /> class 
            with an uninitialized measurement noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2" /> class with the given
            measurement noise covariance matrix.
            </summary>
      <param name="measurementNoiseCovariance">The measurement noise covariance matrix.</param>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.Baselabs#Statistics#Distributions#IConditional{TStateSpace@System#Double@System#Double}#Condition3">
      <summary>
            Sets the third condition.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.Baselabs#Statistics#Distributions#IConditional{TStateSpace@System#Double}#Condition2">
      <summary>
            Sets the second condition.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.EgoAngularRate">
      <summary>
            Gets or sets the ego angular rate <latex>\omega_e</latex> of the radar sensor around its z-axis. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.EgoVelocity">
      <summary>
            Gets or sets the ego velocity magnitude <latex>v_e</latex> of the radar sensor. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.FillTransitionMatrix(`1,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            When overridden, fills the given matrix with the measurement matrix of the model.
            </summary>
      <param name="predictedStateExpectation">
            The predicted system state. 
            This state will be used as linearization point for calculating the Jacobian.
            </param>
      <param name="H">
            The <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> instance to write
            the measurement matrix of the model to.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="predictedStateExpectation" /> is closer than 0.1 m to the radar
            position (<see cref="P:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.RadarPositionX" />, <see cref="P:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.RadarPositionY" />).
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.h(`1,`0@)">
      <summary>
            Calculates the predicted measurement from the given <paramref name="state" />.
            </summary>
      <param name="state">The state.</param>
      <param name="predictedMeasurement">The predicted measurement.</param>
    </member>
    <member name="F:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.RadarIdxs">
      <summary>
            Provides the indexes of the radar space.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.RadarPositionX">
      <summary>
            The x-coordinate <latex>x_r</latex> of the position of the radar sensor in the global coordinate frame in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.RadarPositionY">
      <summary>
            The y-coordinate <latex>y_r</latex> of the position of the radar sensor in the global coordinate frame in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.RadarRotationZ">
      <summary>
            The rotation <latex>\varphi_r</latex> of the radar around its z-axis in radians. 
            A positive value is assumed for counterclockwise rotation.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than -π, greater than or equal to π, infinite or not a number.
            </exception>
    </member>
    <member name="F:Baselabs.Statistics.Models.MeasurementModels.RadarMeasurementModel`2.StateIdxs">
      <summary>
            Provides the indexes of the state space.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Models.MeasurementModels.SixPointRadarMeasurementModel`2">
      <summary>
            A base clase for radar measurement models which observe the closest reflection point of an extended object.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SixPointRadarMeasurementModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.SixPointRadarMeasurementModel`2" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SixPointRadarMeasurementModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.SixPointRadarMeasurementModel`2" /> class
            with the given measurement noise covariance matrix.
            </summary>
      <param name="noiseCovariance">The measurement noise covariance matrix.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SixPointRadarMeasurementModel`2.GetExtendedObject(`1)">
      <summary>
            Gets the extended object.
            </summary>
      <param name="state">The state of the object.</param>
      <returns>The extended object.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SixPointRadarMeasurementModel`2.h(`1,`0@)">
      <summary>
            Calculates the expected measurement from the given state.
            </summary>
      <param name="state">The state.</param>
      <param name="predictedMeasurement">The expected measurement.</param>
    </member>
    <member name="T:Baselabs.Statistics.Models.MeasurementModels.SixPointRadarMeasurementModel`2.ExtendedObject">
      <summary>
            An extended object described by its width, length and wheelbase.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SixPointRadarMeasurementModel`2.ExtendedObject.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Models.MeasurementModels.SixPointRadarMeasurementModel`2.ExtendedObject</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SixPointRadarMeasurementModel`2.ExtendedObject.Length">
      <summary>
            Gets or sets the length of the extended object in meters.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SixPointRadarMeasurementModel`2.ExtendedObject.Wheelbase">
      <summary>
            Gets or sets the distance between the front and rear axle in meters.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SixPointRadarMeasurementModel`2.ExtendedObject.Width">
      <summary>
            Gets or sets the width of the extended object in meters.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2">
      <summary>
            A base class for the measurement model of a smart sensor with longitudinal velocity. 
            The model defines the measurement model for mapping from a Cartesian state space to a Cartesian 
            measurement space with only longitudinal component of the relative velocity information.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2" /> class 
            with an uninitialized measurement noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2" /> class
            with the given measurement noise covariance matrix.
            </summary>
      <param name="measurementNoiseCovariance">Measurement noise covariance matrix.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2" /> class
            with the specified standard deviations of the measurement noise. Only the main diagonal of the measurement noise covariance matrix will be initialized.
            </summary>
      <param name="sigmaPositionX">Standard deviation of the measurement noise for the position X component.</param>
      <param name="sigmaPositionY">Standard deviation of the measurement noise for the position Y component.</param>
      <param name="sigmaVelocityX">Standard deviation of the measurement noise for the velocity X component.</param>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2.Baselabs#Statistics#Distributions#IConditional{TStateSpace@System#Double@System#Double}#Condition3">
      <summary>
            Sets the third condition.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2.Baselabs#Statistics#Distributions#IConditional{TStateSpace@System#Double}#Condition2">
      <summary>
            Sets the second condition.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2.EgoAngularRate">
      <summary>
            Gets or sets the angular rate <latex>\omega_e</latex> of the smart sensor around its z-axis.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2.EgoVelocity">
      <summary>
            Gets or sets the ego velocity magnitude <latex>v_e</latex> of the smart sensor. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2.FillTransitionMatrix(`1,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            When overridden, fills the given matrix with the measurement matrix of the model.
            </summary>
      <param name="predictedStateExpectation">
            The predicted system state. 
            This state will be used as linearization point for calculating the Jacobian.
            </param>
      <param name="H">
            The <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> instance to write
            the measurement matrix of the model to.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2.h(`1,`0@)">
      <summary>
            Calculates the predicted measurement from the given <paramref name="state" />.
            </summary>
      <param name="state">The state.</param>
      <param name="predictedMeasurement">The predicted measurement.</param>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2.SensorPositionX">
      <summary>
            Gets or sets the X component of the sensor's mounting position in the coordinate system of the vehicle in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2.SensorPositionY">
      <summary>
            Gets or sets the Y component of the sensor's mounting position in the coordinate system of the vehicle in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorLongitudinalVelocityMeasurementModel`2.SensorRotationZ">
      <summary>
            Gets or sets the smart sensor rotation around the Z axis relative to the coordinate
            system of the vehicle in radians. A positive value is assumed for counterclockwise rotation.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than -π, greater than or equal to π, infinite or not a number.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2">
      <summary>
            A base class for the measurement model of a generic smart sensor. The model defines the 
            measurement model for mapping from a Cartesian state space to a Cartesian 
            measurement space with relative vectorial velocity.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2" /> class 
            with an uninitialized measurement noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2" /> class
            with the given measurement noise covariance matrix.
            </summary>
      <param name="measurementNoiseCovariance">Measurement noise covariance matrix.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of <see cref="T:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2" /> class
            with the specified standard deviations of the measurement noise. 
            Only the main diagonal of the measurement noise covariance matrix will be initialized.
            </summary>
      <param name="sigmaPositionX">Standard deviation of the measurement noise for the position X component.</param>
      <param name="sigmaPositionY">Standard deviation of the measurement noise for the position Y component.</param>
      <param name="sigmaVelocityX">Standard deviation of the measurement noise for the velocity X component.</param>
      <param name="sigmaVelocityY">Standard deviation of the measurement noise for the velocity Y component.</param>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2.Baselabs#Statistics#Distributions#IConditional{TStateSpace@System#Double@System#Double}#Condition3">
      <summary>
            Sets the third condition.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2.Baselabs#Statistics#Distributions#IConditional{TStateSpace@System#Double}#Condition2">
      <summary>
            Sets the second condition.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2.EgoAngularRate">
      <summary>
            Gets or sets the angular rate of the smart sensor around its z-axis.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2.EgoVelocity">
      <summary>
            Gets or sets the ego velocity magnitude of the smart sensor. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2.FillTransitionMatrix(`1,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            When overridden, fills the given matrix with the measurement matrix of the model.
            </summary>
      <param name="predictedStateExpectation">
            The predicted system state. 
            This state will be used as linearization point for calculating the Jacobian.
            </param>
      <param name="H">
            The <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> instance to write
            the measurement matrix of the model to.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2.h(`1,`0@)">
      <summary>
            Calculates the predicted measurement from the given <paramref name="state" />.
            </summary>
      <param name="state">The state.</param>
      <param name="predictedMeasurement">The predicted measurement.</param>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2.SensorPositionX">
      <summary>
            Gets or sets the X component of the sensor's mounting position in the coordinate system of the vehicle in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2.SensorPositionY">
      <summary>
            Gets or sets the Y component of the sensor's mounting position in the coordinate system of the vehicle in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.SmartSensorMeasurementModel`2.SensorRotationZ">
      <summary>
            Gets or sets the smart sensor rotation around Z axis relative to the coordinate
            system of the vehicle in radians. A positive value is assumed for counterclockwise rotation.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than -π, greater than or equal to π, infinite or not a number.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Models.MeasurementModels.VelocityMeasurementModel`2">
      <summary>
            A linear velocity measurement model.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.VelocityMeasurementModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.VelocityMeasurementModel`2" />
            class with an uninitialized measurement noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.VelocityMeasurementModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.VelocityMeasurementModel`2" />
            class with the specified measurement noise covariance.
            </summary>
      <param name="measurementNoiseCovariance">The measurement noise covariance.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.VelocityMeasurementModel`2.FillTransitionMatrix(Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            When overridden, fills the given matrix with the measurement matrix of the model.
            </summary>
      <param name="H">
            The <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> instance 
            to write the measurement matrix of the model to.
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.VelocityMeasurementModel`2.VelocityScale">
      <summary>
            Gets or sets the scaling factor <latex>s_v</latex> of the velocity sensor, e.g. to account for wheel
            diameters.
            Default is 1.0.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Models.MeasurementModels.VelocityValueMeasurementModel`2">
      <summary>
            A linearized velocity measurement model.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.VelocityValueMeasurementModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.VelocityValueMeasurementModel`2" />
            class with an uninitialized measurement noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.VelocityValueMeasurementModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.VelocityValueMeasurementModel`2" />
            class with the specified measurement noise covariance.
            </summary>
      <param name="measurementNoiseCovariance">The measurement noise covariance.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.VelocityValueMeasurementModel`2.FillTransitionMatrix(`1,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            When overridden, fills the given matrix with the measurement matrix of the model.
            </summary>
      <param name="predictedStateExpectation">
            The predicted system state. 
            This state will be used as linearization point for calculating the Jacobian.
            </param>
      <param name="H">
            The <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> instance to write
            the measurement matrix of the model to.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.VelocityValueMeasurementModel`2.h(`1,`0@)">
      <summary>
            Calculates the predicted measurement from the given <paramref name="state" />.
            </summary>
      <param name="state">The state.</param>
      <param name="predictedMeasurement">The predicted measurement.</param>
    </member>
    <member name="T:Baselabs.Statistics.Models.MeasurementModels.YawRateMeasurementModel`2">
      <summary>
            A yaw rate measurement model.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.YawRateMeasurementModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.YawRateMeasurementModel`2" />
            class with an uninitialized measurement noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.YawRateMeasurementModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.MeasurementModels.YawRateMeasurementModel`2" />
            class with the specified measurement noise covariance.
            </summary>
      <param name="measurementNoiseCovariance">The measurement noise covariance.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.YawRateMeasurementModel`2.FillTransitionMatrix(`1,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            When overridden, fills the given matrix with the measurement matrix of the model.
            </summary>
      <param name="predictedStateExpectation">
            The predicted system state. 
            This state will be used as linearization point for calculating the Jacobian.
            </param>
      <param name="H">
            The <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> instance to write
            the measurement matrix of the model to.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Models.MeasurementModels.YawRateMeasurementModel`2.h(`1,`0@)">
      <summary>
            Calculates the predicted measurement from the given <paramref name="state" />.
            </summary>
      <param name="state">The state.</param>
      <param name="predictedMeasurement">The predicted measurement.</param>
    </member>
    <member name="P:Baselabs.Statistics.Models.MeasurementModels.YawRateMeasurementModel`2.YawRateBias">
      <summary>
            Gets or sets an additive yaw rate bias <latex>\omega_0</latex>, i.e. the yaw rate the that sensor outputs
            when the vehicle is standing.
            Default is 0.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Models.SystemModels.CAVectorialModel`2">
      <summary>
            A motion model of an object represented by a position,
            a heading, a velocity and an acceleration.
            The model assumes a motion with constant acceleration and heading.
            </summary>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The type of the process noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CAVectorialModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CAVectorialModel`2" /> class
            with an uninitialized process noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CAVectorialModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CAVectorialModel`2" /> class
            with the given process noise covariance matrix.
            </summary>
      <param name="processNoiseCovariance">The process noise covariance matrix.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CAVectorialModel`2.f(`0,System.TimeSpan,`1,`0@)">
      <summary>
            Describes the state transition function of the model.
            </summary>
      <param name="state">The previous system state.</param>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="processNoise">A process noise sample.</param>
      <param name="predictedState">The predicted state.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CAVectorialModel`2.f(`0,System.TimeSpan,`0@)">
      <summary>
            Predicts the <paramref name="state" /> using the given time span.
            </summary>
      <param name="state">The state.</param>
      <param name="deltaT">The time span.</param>
      <param name="predictedState">The predicted state.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CAVectorialModel`2.FillNoiseDiscretizationMatrix(`0,System.TimeSpan,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            Fills the noise discretization matrix.
            </summary>
      <param name="stateExpectation">The state expectation.</param>
      <param name="deltaT">The time span.</param>
      <param name="G">The noise discretization matrix to fill.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CAVectorialModel`2.FillTransitionMatrix(`0,System.TimeSpan,Baselabs.Statistics.Spaces.SquareMatrix{`0}@)">
      <summary>
            When overridden, fills the given matrix with the time discrete state transition matrix of the model.
            </summary>
      <param name="stateExpectation">
            The previous system state. This state will be used as linearization point for calculating the Jacobian.
            </param>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="F">
            The <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" /> instance to write the transition matrix of the model to.
            It is initialized with an identity matrix.
            </param>
    </member>
    <member name="F:Baselabs.Statistics.Models.SystemModels.CAVectorialModel`2.NoiseIdxs">
      <summary>
            Provides the indexes of the process noise space.
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Models.SystemModels.CAVectorialModel`2.StateIdxs">
      <summary>
            Provides the indexes of the state space.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Models.SystemModels.CPModel`2">
      <summary>
            A motion model of an object represented by a position.
            The model assumes that the object is not moving.
            </summary>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The type of the process noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CPModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CPModel`2" /> class
            with an uninitialized process noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CPModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CPModel`2" /> class
            with the given process noise covariance matrix.
            </summary>
      <param name="processNoiseCovariance">The process noise covariance matrix.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CPModel`2.FillNoiseDiscretizationMatrix(System.TimeSpan,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            Fills the noise discretization matrix.
            </summary>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="G">
            The noise discretization matrix <latex>\mathbf{G}</latex> is used for the state prediction
            <para><latex>
            \mathbf{x}_k=\mathbf{F} \mathbf{x}_{k-1} + \mathbf{G} \mathbf{v}_k
            </latex>
            where <latex>v_k</latex> is the process noise.
            </para></param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CPModel`2.FillTransitionMatrix(System.TimeSpan,Baselabs.Statistics.Spaces.SquareMatrix{`0}@)">
      <summary>
            When overridden, fills the given matrix with the time discrete state transition matrix of the model.
            </summary>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="F">
            The <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" /> instance to write the transition matrix of the model to.
            It is initialized with an identity matrix.
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Models.SystemModels.CTRAModel`2">
      <summary>
            A motion model of an object represented by a position,
            a heading, a velocity, a turn rate, and an acceleration.
            The model assumes a motion with a constant turn rate and acceleration.
            </summary>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The type of the process noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CTRAModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CTRAModel`2" /> class
            with an uninitialized process noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CTRAModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CTRAModel`2" /> class
            with the given process noise covariance matrix.
            </summary>
      <param name="processNoiseCovariance">The process noise covariance matrix.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CTRAModel`2.f(`0,System.TimeSpan,`1,`0@)">
      <summary>
            Describes the state transition function of the model.
            </summary>
      <param name="state">The previous system state.</param>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="processNoise">A process noise sample.</param>
      <param name="predictedState">The predicted state.</param>
    </member>
    <member name="T:Baselabs.Statistics.Models.SystemModels.CTRVModel`2">
      <summary>
            A motion model of an object represented by a position,
            a heading, a velocity, and a turn rate.
            The model assumes a motion with a constant turn rate and velocity.
            </summary>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The type of the process noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CTRVModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CTRVModel`2" /> class
            with an uninitialized process noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CTRVModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CTRVModel`2" /> class
            with the given process noise covariance matrix.
            </summary>
      <param name="processNoiseCovariance">The process noise covariance matrix.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CTRVModel`2.f(`0,System.TimeSpan,`1,`0@)">
      <summary>
            Describes the state transition function of the model.
            </summary>
      <param name="state">The previous system state.</param>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="processNoise">A process noise sample.</param>
      <param name="predictedState">The predicted state.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CTRVModel`2.f(`0,System.TimeSpan,`0@)">
      <summary>
    
            Describes the state transition function of the model.
            
  </summary>
      <param name="state">
    The previous system state.The time span for the prediction.A process noise sample.The predicted state.
  </param>
      <param name="deltaT">
    The previous system state.The time span for the prediction.A process noise sample.The predicted state.
  </param>
      <param name="predictedState">
    The previous system state.The time span for the prediction.A process noise sample.The predicted state.
  </param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CTRVModel`2.FillNoiseDiscretizationMatrix(`0,System.TimeSpan,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            Fills the noise discretization matrix.
            </summary>
      <param name="stateExpectation">The state expectation.</param>
      <param name="deltaT">The time span.</param>
      <param name="G">The noise discretization matrix to fill.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CTRVModel`2.FillTransitionMatrix(`0,System.TimeSpan,Baselabs.Statistics.Spaces.SquareMatrix{`0}@)">
      <summary>
            When overridden, fills the given matrix with the time discrete state transition matrix of the model.
            </summary>
      <param name="stateExpectation">
            The previous system state. This state will be used as linearization point for calculating the Jacobian.
            </param>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="F">
            The <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" /> instance to write the transition matrix of the model to.
            It is initialized with an identity matrix.
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Models.SystemModels.CTRVModel3D`2">
      <summary>
            A motion model of an object represented by a position including height,
            a heading, a velocity, and a turn rate.
            The model assumes a motion with a constant turn rate, velocity, and height.
            </summary>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The type of the process noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CTRVModel3D`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CTRVModel3D`2" /> class 
            with an uninitialized process noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CTRVModel3D`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CTRVModel3D`2" /> class
            with the given process noise covariance matrix.
            </summary>
      <param name="processNoiseCovariance">The process noise covariance matrix.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CTRVModel3D`2.f(`0,System.TimeSpan,`1,`0@)">
      <summary>
            Describes the state transition function of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CTRVModel3D`2" />.
            </summary>
      <param name="state">The previous system state.</param>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="processNoise">A process noise sample.</param>
      <param name="predictedState">The predicted state.</param>
    </member>
    <member name="T:Baselabs.Statistics.Models.SystemModels.CVComponentsModel`2">
      <summary>
            A motion model of an object represented by a position and a velocity vector
            consisting of X and Y velocity components.
            The model assumes a motion with a constant velocity in both the X and Y direction.
            </summary>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The type of the process noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CVComponentsModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CVComponentsModel`2" /> class
            with an uninitialized process noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CVComponentsModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CVComponentsModel`2" /> class
            with the given process noise covariance matrix.
            </summary>
      <param name="processNoiseCovariance">The process noise covariance matrix.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CVComponentsModel`2.FillNoiseDiscretizationMatrix(System.TimeSpan,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            Fills the noise discretization matrix.
            </summary>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="G">
            The noise discretization matrix <latex>\mathbf{G}</latex> is used for the state prediction
            <para><latex>
            \mathbf{x}_k=\mathbf{F} \mathbf{x}_{k-1} + \mathbf{G} \mathbf{v}_k
            </latex>
            where <latex>v_k</latex> is the process noise.
            </para></param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CVComponentsModel`2.FillTransitionMatrix(System.TimeSpan,Baselabs.Statistics.Spaces.SquareMatrix{`0}@)">
      <summary>
            When overridden, fills the given matrix with the time discrete state transition matrix of the model.
            </summary>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="F">
            The <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" /> instance to write the transition matrix of the model to.
            It is initialized with an identity matrix.
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Models.SystemModels.CVVectorialModel`2">
      <summary>
            A motion model of an object represented by a position,
            a heading, and a velocity.
            The model assumes a motion with a constant velocity and heading.
            </summary>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The type of the process noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CVVectorialModel`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CVVectorialModel`2" /> class
            with an uninitialized process noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CVVectorialModel`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CVVectorialModel`2" /> class
            with the given process noise covariance matrix.
            </summary>
      <param name="processNoiseCovariance">The process noise covariance matrix.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CVVectorialModel`2.f(`0,System.TimeSpan,`1,`0@)">
      <summary>
            Describes the state transition function of the model.
            </summary>
      <param name="state">The previous system state.</param>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="processNoise">A process noise sample.</param>
      <param name="predictedState">The predicted state.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CVVectorialModel`2.f(`0,System.TimeSpan,`0@)">
      <summary>
    
            Describes the state transition function of the model.
            
  </summary>
      <param name="state">
    The previous system state.The time span for the prediction.A process noise sample.The predicted state.
  </param>
      <param name="deltaT">
    The previous system state.The time span for the prediction.A process noise sample.The predicted state.
  </param>
      <param name="predictedState">
    The previous system state.The time span for the prediction.A process noise sample.The predicted state.
  </param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CVVectorialModel`2.FillNoiseDiscretizationMatrix(`0,System.TimeSpan,Baselabs.Statistics.Spaces.Matrix{`0,`1}@)">
      <summary>
            Fills the noise discretization matrix.
            </summary>
      <param name="stateExpectation">The state expectation.</param>
      <param name="deltaT">The time span.</param>
      <param name="G">The noise discretization matrix to fill.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CVVectorialModel`2.FillTransitionMatrix(`0,System.TimeSpan,Baselabs.Statistics.Spaces.SquareMatrix{`0}@)">
      <summary>
            When overridden, fills the given matrix with the time discrete state transition matrix of the model.
            </summary>
      <param name="stateExpectation">
            The previous system state. This state will be used as linearization point for calculating the Jacobian.
            </param>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="F">
            The <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" /> instance to write the transition matrix of the model to.
            It is initialized with an identity matrix.
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Models.SystemModels.CVVectorialModel3D`2">
      <summary>
            A motion model of an object represented by a position including height
            and a velocity vector consisting of X and Y velocity components.
            The model assumes a motion with a constant velocity in both the X and Y direction and a constant height.
            </summary>
      <typeparam name="TStateSpace">The type of the state <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
      <typeparam name="TProcessNoiseSpace">The type of the process noise <see cref="T:Baselabs.Statistics.Spaces.Space" />.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CVVectorialModel3D`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CVVectorialModel3D`2" /> class
            with an uninitialized process noise covariance.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CVVectorialModel3D`2.#ctor(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Models.SystemModels.CVVectorialModel3D`2" /> class
            with the given process noise covariance matrix.
            </summary>
      <param name="processNoiseCovariance">The process noise covariance matrix.</param>
    </member>
    <member name="M:Baselabs.Statistics.Models.SystemModels.CVVectorialModel3D`2.f(`0,System.TimeSpan,`1,`0@)">
      <summary>
            Describes the state transition function of the model.
            </summary>
      <param name="state">The previous system state.</param>
      <param name="deltaT">The time span for the prediction.</param>
      <param name="processNoise">A process noise sample.</param>
      <param name="predictedState">The predicted state.</param>
    </member>
    <member name="T:Baselabs.Statistics.Models.TypeConverters.DoubleConverter">
      <summary>
            Provides a type converter to convert double values to and from various other representations 
            and checks whether a value is within a certain range.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.TypeConverters.DoubleConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Models.TypeConverters.DoubleConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.TypeConverters.DoubleConverter.CheckValueInRange(System.Double)">
      <summary>
            Checks whether <paramref name="value" /> is not NaN.
            </summary>
      <param name="value">The value to check.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value" /> is not within the range.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Models.TypeConverters.DoubleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given value and checks if it is in a certain range.
            </summary>
      <param name="context"></param>
      <param name="culture"></param>
      <param name="value"></param>
      <returns>The converted double value or <c>null</c>.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Models.TypeConverters.PositiveNonZeroValueConverter">
      <summary>
            A type converter that can be applied to properties that hold positive values excluding zero.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.TypeConverters.PositiveNonZeroValueConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Models.TypeConverters.PositiveNonZeroValueConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.TypeConverters.PositiveNonZeroValueConverter.CheckValueInRange(System.Double)">
      <summary>
            Checks whether <paramref name="value" /> is greater than 0, not NaN and not infinite.
            </summary>
      <param name="value">The value to check.</param>
    </member>
    <member name="T:Baselabs.Statistics.Models.TypeConverters.PositiveValueConverter">
      <summary>
            A type converter that can be applied to properties that hold positive values.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.TypeConverters.PositiveValueConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Models.TypeConverters.PositiveValueConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.TypeConverters.PositiveValueConverter.CheckValueInRange(System.Double)">
      <summary>
            Checks whether <paramref name="value" /> is greater than or equal to 0.
            </summary>
      <param name="value">The value to check.</param>
    </member>
    <member name="T:Baselabs.Statistics.Models.TypeConverters.ProbabilityConverter">
      <summary>
            A type converter that can be applied to properties that hold probability values.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.TypeConverters.ProbabilityConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Models.TypeConverters.ProbabilityConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.TypeConverters.ProbabilityConverter.CheckValueInRange(System.Double)">
      <summary>
            Checks whether <paramref name="value" /> is greater than or equal to 0 and less than or equal to 1.
            </summary>
      <param name="value">The value to check.</param>
    </member>
    <member name="T:Baselabs.Statistics.Models.TypeConverters.RadConverter">
      <summary>
            A type converter that can be applied to properties that hold angle values in radians.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.TypeConverters.RadConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Models.TypeConverters.RadConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.TypeConverters.RadConverter.CheckValueInRange(System.Double)">
      <summary>
            Checks whether <paramref name="value" /> is greater than or equal to -π and less than π.
            </summary>
      <param name="value">The value to check.</param>
    </member>
    <member name="T:Baselabs.Statistics.Models.TypeConverters.ValidDoubleConverter">
      <summary>
            A concrete double converter.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Models.TypeConverters.ValidDoubleConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Models.TypeConverters.ValidDoubleConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.AngularSpace">
      <summary>
            Abstract base class for spaces with angular dimensions.
            The difference of angular dimensions is limited to the range [-pi...pi).
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.AngularSpace.#ctor(System.Int32)">
      <summary>
            Creates a new <see cref="T:Baselabs.Statistics.Spaces.AngularSpace" /> with the given number of dimensions.
            </summary>
      <param name="dimensions">
    The number of dimensions.
            An array containing the values of the dimensions.
            A solid copy of the array is used as internal memory.
            
  </param>
      <param name="values">
            An array containing the values of the dimensions.
            A solid copy of the array is used as internal memory.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dimensions" /> is less than one.
            </exception>
      <exception cref="T:System.ArgumentException">
            The length of the <paramref name="values" /> array is not equal 
            to the number of <paramref name="dimensions" />.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.AngularSpace.#ctor(System.Int32,System.Int32[])">
      <summary>
            Creates a new <see cref="T:Baselabs.Statistics.Spaces.AngularSpace" /> with the given number of dimensions
            and the indices of the angular dimensions.
            </summary>
      <param name="dimensions">
    The number of dimensions.
            An array containing the values of the dimensions.
            A solid copy of the array is used as internal memory.
            
  </param>
      <param name="angularDimensionsIndices">
            An array with the indices of the angular dimensions.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.AngularSpace.#ctor(System.Int32,System.Int32[],System.Int32[])">
      <summary>
    
            Creates a new <see cref="T:Baselabs.Statistics.Spaces.AngularSpace" /> with the given number of dimensions
            and the indices of the angular dimensions.
            
  </summary>
      <param name="dimensions">
    The number of dimensions.
            An array containing the values of the dimensions.
            A solid copy of the array is used as internal memory.
            
  </param>
      <param name="angularDimensionsIndices">
            An array with the indices of the angular dimensions.
            </param>
      <param name="additionalAngularDimensionsIndices">
            An array with additional indices of the angular dimensions.
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.AngularSpace.AngularDimensionsIndices">
      <summary>
            The indices of the angular dimensions.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.AngularSpace.Subtract(Baselabs.Statistics.Spaces.Space)">
      <summary>
            Subtracts a space from this space and returns the resulting vector.<para />
            Override this method to implement special subtraction operations for certain elements of the space,
            e.g. angles.
            </summary>
      <param name="other">The space to subtract.</param>
      <returns>The difference vector.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CAErrorSpace">
      <summary>
            An error space containing acceleration, jerk and yaw rate of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CAErrorSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CAErrorSpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CAErrorSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CAErrorSpace" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CAErrorSpace.A">
      <summary>
            Gets or sets the acceleration [m/s²].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CAErrorSpace.J">
      <summary>
            Gets or sets the jerk [m/s³].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CAErrorSpace.W">
      <summary>
            Gets or sets the yaw rate [rad/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CartesianSpace">
      <summary>
            A Cartesian coordinates space consisting of an x and y state.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CartesianSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CartesianSpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CartesianSpace.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CartesianSpace" /> class given its values.
            </summary>
      <param name="x">The x value.</param>
      <param name="y">The y value.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CartesianSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CartesianSpace" /> class
            with the number of additional dimensions from a derived state.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived class adds.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CartesianSpace.X">
      <summary>
            Gets or sets the x position [m].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CartesianSpace.Y">
      <summary>
            Gets or sets the y position [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CartesianSpace3D">
      <summary>
            A Cartesian coordinates space consisting of an x, y, and z state.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CartesianSpace3D.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CartesianSpace3D" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CartesianSpace3D.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CartesianSpace3D" /> class using its values.
            </summary>
      <param name="x">The x value.</param>
      <param name="y">The y value.</param>
      <param name="altitude">The altitude value.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CartesianSpace3D.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CartesianSpace" /> class
            with the number of additional dimensions from a derived state.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived class adds.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CartesianSpace3D.Altitude">
      <summary>
            Gets or sets the altitude [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CASpace">
      <summary>
            A state space containing the position, heading, velocity and acceleration of an object. 
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CASpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CASpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CASpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CASpace" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CASpace.#ctor(System.Int32,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CASpace" /> class
            with the number of additional dimensions and angular dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
      <param name="additionalAngularDimensionsIndices">The indexes of additional angular dimensions.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CASpace.A">
      <summary>
            Gets or sets the acceleration [m/s²].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CASpace.G">
      <summary>
            Gets or sets the heading angle [rad].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CASpace.V">
      <summary>
            Gets or sets the velocity [m/s].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CASpace.X">
      <summary>
            Gets or sets the x position [m].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CASpace.Y">
      <summary>
            Gets or sets the y position [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CTRAErrorSpace">
      <summary>
            An error state space containing the jerk and the angular acceleration of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRAErrorSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRAErrorSpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRAErrorSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRAErrorSpace" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRAErrorSpace.Alpha">
      <summary>
            Gets or sets the angular acceleration [rad/s²].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRAErrorSpace.J">
      <summary>
            Gets or sets the jerk [m/s³].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CTRASpace">
      <summary>
            A state space containing the position, heading, velocity, yaw rate, and acceleration of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRASpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRASpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRASpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRASpace" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRASpace.#ctor(System.Int32,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRASpace" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
      <param name="additionalAngularDimensionsIndices">
            The indices of additional angular dimensions a derived space adds.
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRASpace.A">
      <summary>
            Gets or sets the acceleration [m/s²].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRASpace.G">
      <summary>
            Gets or sets the heading angle [rad].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRASpace.V">
      <summary>
            Gets or sets the velocity [m/s].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRASpace.W">
      <summary>
            Gets or sets the yaw rate [rad/s].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRASpace.X">
      <summary>
            Gets or sets the x position [m].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRASpace.Y">
      <summary>
            Gets or sets the y position [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CTRVErrorSpace">
      <summary>
            An error state space containing the acceleration and the angular acceleration of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRVErrorSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRVErrorSpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRVErrorSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRVErrorSpace" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRVErrorSpace.A">
      <summary>
            Gets or sets the acceleration [m/s²].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRVErrorSpace.Alpha">
      <summary>
            Gets or sets the angular acceleration [rad/s²].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CTRVErrorSpace3D">
      <summary>
            An error state space containing the acceleration, the angular acceleration, and the altitude velocity of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRVErrorSpace3D.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRVErrorSpace3D" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRVErrorSpace3D.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRVErrorSpace3D" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRVErrorSpace3D.AltitudeVelocity">
      <summary>
            Gets or sets the altitude velocity [m/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CTRVSpace">
      <summary>
            A state space containing the position, heading, velocity, and yaw rate of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRVSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRVSpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRVSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRVSpace" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRVSpace.#ctor(System.Int32,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRVSpace" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
      <param name="additionalAngularDimensionsIndices">
            The indices of additional angular dimensions a derived space adds.
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRVSpace.G">
      <summary>
            Gets or sets the heading angle [rad].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRVSpace.V">
      <summary>
            Gets or sets the velocity [m/s].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRVSpace.W">
      <summary>
            Gets or sets the yaw rate [rad/s].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRVSpace.X">
      <summary>
            Gets or sets the x position [m].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRVSpace.Y">
      <summary>
            Gets or sets the y position [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CTRVSpace3D">
      <summary>
            A state space containing the position including altitude, heading, velocity and yaw rate of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRVSpace3D.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRVSpace3D" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRVSpace3D.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRVSpace3D" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CTRVSpace3D.#ctor(System.Int32,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CTRVSpace3D" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
      <param name="additionalAngularDimensionsIndices">
            The indices of additional angular dimensions a derived space adds.
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CTRVSpace3D.Altitude">
      <summary>
            Gets or sets the altitude [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CVComponentsErrorSpace">
      <summary>
            An error state space containing the component wise acceleration of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVComponentsErrorSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVComponentsErrorSpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVComponentsErrorSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVErrorSpace" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVComponentsErrorSpace.Ax">
      <summary>
            Gets or sets the acceleration in x direction [m/s²].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVComponentsErrorSpace.Ay">
      <summary>
            Gets or sets the acceleration in y direction [m/s²].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CVComponentsSpace">
      <summary>
            A state space containing the position and component wise velocity of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVComponentsSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVComponentsSpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVComponentsSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVComponentsSpace" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVComponentsSpace.Vx">
      <summary>
            Gets or sets the x component of the velocity [m/s].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVComponentsSpace.Vy">
      <summary>
            Gets or sets the y component of the velocity [m/s].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVComponentsSpace.X">
      <summary>
            Gets or sets the x position [m].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVComponentsSpace.Y">
      <summary>
            Gets or sets the y position [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CVErrorSpace">
      <summary>
            An error state space containing the acceleration and the yaw rate of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVErrorSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVErrorSpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVErrorSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVErrorSpace" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVErrorSpace.A">
      <summary>
            Gets or sets the acceleration [m/s²].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVErrorSpace.W">
      <summary>
            Gets or sets the yaw rate [rad/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CVErrorSpace3D">
      <summary>
            An error state space containing the acceleration, the yaw rate, and the altitude velocity of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVErrorSpace3D.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVErrorSpace3D" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVErrorSpace3D.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVSpace3D" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVErrorSpace3D.AltitudeVelocity">
      <summary>
            Gets or sets the altitude velocity [m/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CVSpace">
      <summary>
            A state space containing the position, heading, and velocity of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVSpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVSpace" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVSpace.#ctor(System.Int32,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVSpace" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
      <param name="additionalAngularDimensionsIndices">
            The indices of additional angular dimensions a derived space adds.
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVSpace.G">
      <summary>
            Gets or sets the heading angle [rad].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVSpace.V">
      <summary>
            Gets or sets the velocity [m/s].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVSpace.X">
      <summary>
            Gets or sets the x position [m].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVSpace.Y">
      <summary>
            Gets or sets the y position [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.CVSpace3D">
      <summary>
            A state space containing the position including altitude, heading, and velocity of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVSpace3D.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVSpace3D" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVSpace3D.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVSpace3D" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.CVSpace3D.#ctor(System.Int32,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.CVSpace3D" /> class
            with the number of additional dimensions from a derived space.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived space adds.</param>
      <param name="additionalAngularDimensionsIndices">
            The indices of additional angular dimensions a derived space adds.
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.CVSpace3D.Altitude">
      <summary>
            Gets or sets the altitude [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.DimensionAttribute">
      <summary>
            Defines the dimension index of a state (or dimension/random variable) within a state <see cref="T:Baselabs.Statistics.Spaces.Space" />.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.DimensionAttribute.#ctor(System.Int32)">
      <summary>
            Creates a <see cref="T:Baselabs.Statistics.Spaces.DimensionAttribute" /> class.
            </summary>
      <param name="dimensionIndex">The unique index of the dimension.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
              The <paramref name="dimensionIndex" /> is less than zero.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.DimensionAttribute.Index">
      <summary>
            Gets the index of the dimension.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.DimensionInfo">
      <summary>
            Provides serializable information of a <see cref="T:Baselabs.Statistics.Spaces.Space" /> dimension.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.DimensionInfo.Description">
      <summary>
            Gets the description.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.DimensionInfo.Index">
      <summary>
            Gets the index.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.DimensionInfo.Name">
      <summary>
            Gets the name.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.DimensionInfo.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.DimensionInfo.Unit">
      <summary>
            Gets the unit.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.FiniteSpace">
      <summary>
             Abstract base class representing spaces which contain finite states only.
             </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.FiniteSpace.#ctor(System.Double[][])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.FiniteSpace" /> class using the supported values of the space.
            </summary>
      <param name="supportedValues">
            The supported values for each dimension of the space. 
            The first index specifies the dimension, the second index specifies the value.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.FiniteSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.FiniteSpace" /> class.
            </summary>
      <param name="dimensions">The number of space dimensions.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.FiniteSpace.CreateEquallySpacedSamples(System.Double[],System.Double[])">
      <summary>
            Creates a collection of equally spaced states.
            </summary>
      <param name="begin">The start state.</param>
      <param name="end">The end state.</param>
      <param name="stepping">The stepping of the states.</param>
      <param name="justOuterSamples">
            If true, inner samples are not contained in the resulting collection.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.FiniteSpace.CreateEquallySpacedSamples(System.Double[],System.Double[],System.Boolean)">
      <summary>
            Creates a collection of equally spaced states.
            </summary>
      <param name="begin">The start state.</param>
      <param name="end">The end state.</param>
      <param name="stepping">The stepping of the states.</param>
      <param name="justOuterSamples">
            If true, inner samples are not contained in the resulting collection.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.FiniteSpace.CreateEquallySpacedSamples(System.Double[],System.Double[],System.Double[])">
      <summary>
            Creates a collection of equally spaced states.
            </summary>
      <param name="begin">The start state.</param>
      <param name="end">The end state.</param>
      <param name="stepping">The stepping of the states.</param>
      <param name="justOuterSamples">
            If true, inner samples are not contained in the resulting collection.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.FiniteSpace.CreateEquallySpacedSamples(System.Double[],System.Double[],System.Double[],System.Boolean)">
      <summary>
            Creates a collection of equally spaced states.
            </summary>
      <param name="begin">The start state.</param>
      <param name="end">The end state.</param>
      <param name="stepping">The stepping of the states.</param>
      <param name="justOuterSamples">
            If true, inner samples are not contained in the resulting collection.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.FiniteSpace.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.FiniteSpace.IsStateSupported">
      <summary>
            Gets a value indicating whether the current state of the space is a supported state.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.FiniteSpace.IsSupported(System.Double[])">
      <summary>
            Determines whether the specified array contains supported values.
            </summary>
      <param name="array">The array.</param>
      <returns>
        <c>true</c> if the specified array is supported; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.FiniteSpace.SupportedValues">
      <summary>
            Gets the supported values of the finite space.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.FiniteSpace.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.FiniteSpace.ToString">
      <summary>
            Provides a human friendly representation of the space's state.
            </summary>
      <param name="provider">The format provider.</param>
      <param name="digits">The number of significant digits or 0 to use all digits.</param>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.HeadingSpace">
      <summary>
            A heading space consisting of a heading state.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.HeadingSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.HeadingSpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.HeadingSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.HeadingSpace" /> class
            with the number of additional dimensions from a derived state.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived class adds.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.HeadingSpace.#ctor(System.Int32,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.HeadingSpace" /> class
            with the number of additional dimensions from a derived state.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived class adds.</param>
      <param name="additionalAngularDimensionsIndices">
            The indices of additional angular dimensions a derived class adds.
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.HeadingSpace.G">
      <summary>
            Gets or sets the heading angle [rad].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IAcceleration">
      <summary>
            Represents an acceleration.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IAcceleration.A">
      <summary>
            Gets or sets the acceleration [m/s²].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IAccelerationXY">
      <summary>
            Represents a component wise acceleration.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IAccelerationXY.Ax">
      <summary>
            Gets or sets the acceleration in x direction [m/s²].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IAccelerationXY.Ay">
      <summary>
            Gets or sets the acceleration in y direction [m/s²].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IAltitude">
      <summary>
            Represents an altitude.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IAltitude.Altitude">
      <summary>
            Gets or sets the altitude [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IAltitudeVelocity">
      <summary>
            Represents an altitude velocity.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IAltitudeVelocity.AltitudeVelocity">
      <summary>
            Gets or sets the altitude velocity [m/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IAngularAcceleration">
      <summary>
            Represents an angular acceleration.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IAngularAcceleration.Alpha">
      <summary>
            Gets or sets the angular acceleration [rad/s²].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.ICartesian">
      <summary>
            Represents a two dimensional Cartesian space.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.ICartesian.X">
      <summary>
            Gets or sets the x position [m].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.ICartesian.Y">
      <summary>
            Gets or sets the y position [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.ICartesianReadOnly">
      <summary>
            Represents a two dimensional Cartesian space.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.ICartesianReadOnly.X">
      <summary>
            Gets the x position [m].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.ICartesianReadOnly.Y">
      <summary>
            Gets the y position [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IHeading">
      <summary>
            Represents a heading.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IHeading.G">
      <summary>
            Gets or sets the heading angle [rad].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IJerk">
      <summary>
            Represents a jerk.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IJerk.J">
      <summary>
            Gets or sets the jerk [m/s³].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IJerkComponents">
      <summary>
            Represents a component wise jerk.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IJerkComponents.Jx">
      <summary>
            Gets or sets the jerk in x direction [m/s³].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IJerkComponents.Jy">
      <summary>
            Gets or sets the jerk in y direction [m/s³].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.ILongitudinalVelocity">
      <summary>
            Represents a longitudinal velocity component, i.e. a velocity component in x direction.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.ILongitudinalVelocity.Vx">
      <summary>
            Gets or sets the x component of the velocity [m/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IPolar">
      <summary>
            Represents a range and an angle.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IPolar.Phi">
      <summary>
            Gets or sets the angle [rad].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IPolar.Range">
      <summary>
            Gets or sets the range [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IPolar3D">
      <summary>
            Represents a range and a horizontal as well as a vertical angle.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IPolar3D.Rho">
      <summary>
            Gets the angle [rad].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IPolar3DReadOnly">
      <summary>
            Represents a range and a horizontal as well as a vertical angle.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IPolar3DReadOnly.Rho">
      <summary>
            Gets the angle [rad].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IPolarReadOnly">
      <summary>
            Represents a range and an angle.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IPolarReadOnly.Phi">
      <summary>
            Gets the angle [rad].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IPolarReadOnly.Range">
      <summary>
            Gets the range [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IRadialVelocity">
      <summary>
            Represents a radial velocity.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IRadialVelocity.RadialVelocity">
      <summary>
            Gets or sets the radial velocity [m/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IRadialVelocityReadOnly">
      <summary>
            Represents a radial velocity.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IRadialVelocityReadOnly.RadialVelocity">
      <summary>
            Gets the radial velocity [m/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IVelocity">
      <summary>
            Represents a velocity.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IVelocity.V">
      <summary>
            Gets or sets the velocity [m/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IVelocityComponents">
      <summary>
            Represents a velocity vector.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IVelocityComponents.Vy">
      <summary>
            Gets or sets the y component of the velocity [m/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.IYawRate">
      <summary>
            Represents a yaw rate.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.IYawRate.W">
      <summary>
            Gets or sets the yaw rate [rad/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Matrix`2">
      <summary>
            A rectangular array used for linear algebra.
            </summary>
      <typeparam name="TColumnSpace">
            The type of the column <see cref="T:Baselabs.Statistics.Spaces.Space" />.
            The dimensionality of the <typeparamref name="TColumnSpace" /> sets the number of rows of the matrix.
            </typeparam>
      <typeparam name="TRowSpace">
            The type of the row <see cref="T:Baselabs.Statistics.Spaces.Space" />. 
            The dimensionality of the <typeparamref name="TRowSpace" /> sets the number of columns of the matrix.
            </typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Matrix`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Matrix`2.#ctor(System.Double[0:,0:])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> class 
            and initializes its values.
            </summary>
      <param name="values">The values of the matrix.</param>
      <exception cref="T:System.ArgumentException">
            The length of dimension 0 of <paramref name="values" /> is not equal to 
            the number of dimensions of <typeparamref name="TColumnSpace" /><para>or</para>
            the length of dimension 1 of <paramref name="values" /> is not equal to 
            the number of dimensions of the <typeparamref name="TRowSpace" />.
            </exception>
    </member>
    <member name="F:Baselabs.Statistics.Spaces.Matrix`2.CachedTranspose">
      <summary>
            The cached transpose matrix.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Matrix`2.Cast``2">
      <summary>
            Casts the matrix to the given 
            <typeparamref name="TResultRowSpace" /> and <typeparamref name="TResultColumnSpace" />.
            </summary>
      <typeparam name="TResultRowSpace">The type of the resulting row space.</typeparam>
      <typeparam name="TResultColumnSpace">The type of the resulting column space.</typeparam>
      <exception cref="T:System.InvalidOperationException">
            The matrix cannot be cast to a matrix with the <typeparamref name="TResultRowSpace" />
            because the number of dimensions of the row space types is different or
            
            the matrix cannot be cast to a matrix with the <typeparamref name="TResultColumnSpace" />
            because the number of dimensions of the column space types is different.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Matrix`2.CheckMatrix">
      <summary>
            Checks the matrix for specific restrictions,
            e.g. that the number of rows and columns are equal for a <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" />.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Matrix`2.Clone">
      <summary>
            Creates a solid copy of the matrix.
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Spaces.Matrix`2.Columns">
      <summary>
            The number of matrix columns.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Matrix`2.Create(Baselabs.ThirdParty.LapackBlas.MatrixData)">
      <summary>
            Creates an instance of <see cref="T:Baselabs.Statistics.Spaces.Matrix`2" /> from the specified matrix data.
            No deep copy of the matrix is created, but the reference is used directly.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The created instance.</returns>
    </member>
    <member name="F:Baselabs.Statistics.Spaces.Matrix`2.EmptyColumnSpace">
      <summary>
            An empty column space.
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Spaces.Matrix`2.EmptyRowSpace">
      <summary>
            An empty row space.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Matrix`2.Eye">
      <summary>
            Creates a identity matrix with 1's on the diagonal and 0's elsewhere.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Matrix`2.InternalMatrixIsInitialized">
      <summary>
            Gets a value indicating whether the internal matrix is initialized.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Matrix`2.IsZero">
      <summary>
            Gets a value indicating whether the matrix is a zero matrix.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Matrix`2.Item(System.Double,System.Double)">
      <summary>
             Gets or sets the matrix element with the specified row and column using double indices.
             </summary>
      <param name="row">The row.</param>
      <param name="column">The column.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
             The <paramref name="row" /> or <paramref name="column" /> index is out of range.
             </exception>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Matrix`2.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the matrix element with the specified row and column.
            </summary>
      <param name="row">The zero based row index.</param>
      <param name="column">The zero based column index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="row" /> or <paramref name="column" /> index is out of range.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Matrix`2.Item(System.String,System.String)">
      <summary>
            Gets or sets the matrix element with the specified row and column names.
            </summary>
      <param name="rowDimensionName">The name of the row dimension.</param>
      <param name="columnDimensionName">The name of the column dimension.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="rowDimensionName" /> is not a known dimension of the row space or
            
            The <paramref name="columnDimensionName" /> is not a known dimension of the column space.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Matrix`2.MatrixChanged">
      <summary>
            Is called when the matrix is assumed to been changed.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Matrix`2.MatrixData">
      <summary>
            Gets or sets the internal matrix storage.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">
            The number of rows of the matrix is not equal to the dimensions of <typeparamref name="TColumnSpace" />
            or the number of columns of the matrix is not equal to the dimensions of <typeparamref name="TRowSpace" />.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Matrix`2.MaximumValue">
      <summary>
            Gets the maximum value of the matrix.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Matrix`2.MinimumValue">
      <summary>
            Gets the minimum value of the matrix.
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Spaces.Matrix`2.Rows">
      <summary>
            The number of matrix rows.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Matrix`2.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Matrix`2.Transpose">
      <summary>
            Gets the transpose matrix <latex>\mathbf(B)=A^\mathrm{T}</latex>.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Matrix`2.UncheckedGet(System.Int32,System.Int32)">
      <summary>
            Sets the matrix element with the specified <paramref name="row" /> and <paramref name="column" />
            without checking the matrix boundaries or other restrictions.
            </summary>
      <param name="row">The zero based row index.</param>
      <param name="column">The zero based column index.</param>
      <returns>The matrix element at the specified position.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Matrix`2.UncheckedSet(System.Double,System.Int32,System.Int32)">
      <summary>
            Sets the matrix element with the specified <paramref name="row" /> and <paramref name="column" />
            to the given <paramref name="value" /> without checking the matrix boundaries or
            other restrictions.
            </summary>
      <param name="value">The value to set.</param>
      <param name="row">The zero based row index.</param>
      <param name="column">The zero based column index.</param>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.MatrixContentException">
      <summary>
            The exception that is thrown when the content of a matrix does not fulfill the constraints of the matrix class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.MatrixContentException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.MatrixContentException" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.MatrixContentException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.MatrixContentException" /> class with a specified
            error message.
            </summary>
      <param name="message">The message that describes the error.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.MatrixContentException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.MatrixContentException" /> class with a specified error
            message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception. </param>
      <param name="innerException">
                The exception that is the cause of the current exception, or a null reference
                if no inner exception is specified.
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1">
      <summary>
            A positive definite matrix.
            </summary>
      <typeparam name="TSpace">The type of the space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1" /> class filled with zeros.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.#ctor(System.Double[0:,0:])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1" /> class
            and sets its values.
            </summary>
      <param name="values">The values of the matrix.</param>
      <exception cref="T:System.ArgumentException">
            The length of dimensions 0 and 1 of <paramref name="values" /> are not equal
            <para>or</para>
            the length of dimensions 0 and 1 of <paramref name="values" /> are not equal to
            the number of dimensions of <typeparamref name="TSpace" />.
            <para>or</para>
            The matrix defined by <paramref name="values" /> is not positive definite.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1" /> class
            and sets its main diagonal.
            </summary>
      <param name="mainDiagonal">The main diagonal values.</param>
      <exception cref="T:System.ArgumentException">
            At least one of the values of <paramref name="mainDiagonal" /> is equal to or less than zero.
            </exception>
    </member>
    <member name="F:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.CachedCholeskyDecomposition">
      <summary>
            The cached cholesky decomposition of the current matrix.
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.CachedInverse">
      <summary>
            The cached inverse of the current matrix.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.Cast``1">
      <summary>
            Casts the matrix to the given <typeparamref name="TResultSpace" />.
            </summary>
      <typeparam name="TResultSpace">The type of the resulting space.</typeparam>
      <exception cref="T:System.InvalidOperationException">
            The matrix cannot be cast to a matrix with the <typeparamref name="TResultSpace" />
            because the number of dimensions is different.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.CheckMatrix">
      <summary>
            Checks the matrix for specific restrictions,
            e.g. that the number of rows and columns are equal for a <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" />.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.CholeskyDecomposition">
      <summary>
            Gets the Cholesky decomposition <latex>G</latex> of the matrix <latex>A</latex>
            with <latex>G G^\mathrm{T}=A</latex>.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.Clone">
      <summary>
            Creates a solid copy of the matrix.
            </summary>
      <returns>A new object that is a copy of this instance.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.Create(Baselabs.ThirdParty.LapackBlas.MatrixData)">
      <summary>
            Creates an instance of <see cref="T:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1" /> from the specified matrix data.
            No deep copy of the matrix is created, but the reference is used directly.
            </summary>
      <returns>The created instance.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.CreateAndCorrect(Baselabs.ThirdParty.LapackBlas.MatrixData)">
      <summary>
            Creates an instance of <see cref="T:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1" /> from the specified matrix data that
            might not be exactly positive definite.
            No deep copy of the matrix is created, but the reference is used directly.
            </summary>
      <param name="matrix">The matrix which should be corrected.</param>
      <returns>The created instance.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.Eye">
      <summary>
            Creates a identity matrix with 1's on the diagonal and 0's elsewhere.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.Inverse">
      <summary>
            Gets the inverse matrix <latex>B=A^{-1}</latex>.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.Item(System.Double,System.Double)">
      <summary>
            Gets or sets the matrix element with the specified row and column and the corresponding element
            on the opposite side of the main diagonal using double indices.
            </summary>
      <param name="row">The row.</param>
      <param name="column">The column.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
             The <paramref name="row" /> or <paramref name="column" /> index is out of range.
             </exception>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the matrix element with the specified row and column and the corresponding element
            on the opposite side of the main diagonal.
            </summary>
      <param name="row">The zero based row index.</param>
      <param name="column">The zero based column index.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="row" /> or <paramref name="column" /> index is out of range.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.Item(System.String,System.String)">
      <summary>
            Gets or sets the matrix element with the specified row and column names and the corresponding element
            on the opposite side of the main diagonal.
            </summary>
      <param name="rowDimensionName">The name of the row dimension.</param>
      <param name="columnDimensionName">The name of the column dimension.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="rowDimensionName" /> is not a known dimension of the row space or
            
            The <paramref name="columnDimensionName" /> is not a known dimension of the column space.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.MatrixChanged">
      <summary>
            Is called when the matrix is assumed to been changed.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.op_Addition(Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0},Baselabs.Statistics.Spaces.PositiveDefiniteMatrix{`0})">
      <summary>
            Adds two matrices element-wise.
            </summary>
      <param name="left">The left matrix.</param>
      <param name="right">The right matrix.</param>
      <returns>The sum of the matrices.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.PositiveDefiniteMatrix`1.Transpose">
      <summary>
            Gets the transpose matrix <latex>\mathbf(B)=A^\mathrm{T}</latex>.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.RadarSpace">
      <summary>
            A space that contains the values of a typical radar detection in polar coordinates with Doppler measurement.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.RadarSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.RadarSpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.RadarSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.RadarSpace" /> class
            with the number of additional dimensions from a derived state.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived class adds.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.RadarSpace.#ctor(System.Int32,System.Int32[])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.RadarSpace" /> class
            with the number of additional dimensions from a derived state.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived class adds.</param>
      <param name="additionalAngularDimensionsIndices">
            The indices of additional angular dimensions a derived class adds.
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.RadarSpace.Phi">
      <summary>
            Gets or sets the angle [rad].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.RadarSpace.RadialVelocity">
      <summary>
            The range rate or velocity of the detected object [m/s].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.RadarSpace.Range">
      <summary>
            Gets or sets the range [m].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Space">
      <summary>
            Abstract base class for vector state spaces.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.#ctor(System.Int32)">
      <summary>
            Creates a new <see cref="T:Baselabs.Statistics.Spaces.Space" /> instance with the given number of dimensions
            and the values of the space.
            </summary>
      <param name="dimensions">The number of dimensions.</param>
      <param name="values">
            An array containing the values of the dimensions.
            A solid copy of the array is used as internal memory.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dimensions" /> is less than one.
            </exception>
      <exception cref="T:System.ArgumentException">
            The length of the <paramref name="values" /> array is not equal 
            to the number of <paramref name="dimensions" />.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.#ctor(System.Int32,System.Double[])">
      <summary>
            Creates a new <see cref="T:Baselabs.Statistics.Spaces.Space" /> instance with the given number of dimensions
            and the values of the space.
            </summary>
      <param name="dimensions">The number of dimensions.</param>
      <param name="values">
            An array containing the values of the dimensions.
            A solid copy of the array is used as internal memory.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="values" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dimensions" /> is less than one.
            </exception>
      <exception cref="T:System.ArgumentException">
            The length of the <paramref name="values" /> array is not equal 
            to the number of <paramref name="dimensions" />.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Space.Array">
      <summary>
            Gets the values of the dimensions (the elements) of the space.
            </summary>
      <exception cref="T:System.ArgumentNullException">The value is null.</exception>
      <exception cref="T:System.ArgumentException">
            The length of the array is not equal to the number of dimensions of this space.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.Cast``1">
      <summary>
            Casts the instance into a space instance of the given type.
            No deep copy of the internal vector is made, but just the reference is copied.
            </summary>
      <typeparam name="TResultSpace">The resulting type of the cast.</typeparam>
      <returns>
            The casted space.
            </returns>
      <exception cref="T:System.InvalidOperationException">
            The space cannot be cast to a space of type <typeparamref name="TResultSpace" />.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.Cast(System.Type)">
      <summary>
            Casts the instance into a space instance of the given type.
            No deep copy of the internal array is made, but just the reference is copied.
            </summary>
      <param name="spaceType">The type of the space.
            It must be a non abstract class with a public parameterless constructor.</param>
      <returns>The converted space.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.Cast``1(``0@)">
      <summary>
            Casts the instance into a space instance of the given type.
            No deep copy of the internal vector is made, but just the reference is copied.
            </summary>
      <param name="convertedSpace">The casted space.</param>
      <typeparam name="TResultSpace">The resulting type of the cast.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.Create``1(Baselabs.ThirdParty.LapackBlas.MatrixData)">
      <summary>
            Creates a space from a one-dimensional vector with the same number of elements.
            No deep copy of the vector is created, but the reference is used directly.
            </summary>
      <param name="vector">The vector containing the values of the dimensions.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <returns>The created space.</returns>
      <exception cref="T:System.ArgumentException">
            The length of the <paramref name="vector" /> is not equal to the number of dimensions of the space.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.Create``1(System.Double[])">
      <summary>
            Creates a space from a one-dimensional double array with the same number of elements.
            No deep copy of the array is created, but the reference is used directly.
            </summary>
      <param name="values">The array containing the values of the dimensions.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <returns>The created space.</returns>
      <exception cref="T:System.ArgumentException">
            The length of the <paramref name="values" /> array is not equal to the number of dimensions of the space.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.Create(System.Type,Baselabs.ThirdParty.LapackBlas.MatrixData)">
      <summary>
            Creates a space of the specified type from a one-dimensional double array.
            No deep copy of the array is created, but the reference is used directly.
            </summary>
      <param name="spaceType">Type of the space.</param>
      <param name="vector">The vector containing the values of the dimensions.</param>
      <returns>The created space of type <paramref name="spaceType" />.</returns>
      <exception cref="T:System.FormatException">
            The <paramref name="spaceType" /> is not the Type of a compatible space class.
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of rows of <paramref name="vector" /> is not equal to the number of dimensions of the space.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.Create(System.Type,System.Double[])">
      <summary>
            Creates a space of the specified type from a one-dimensional double array.
            No deep copy of the array is created, but the reference is used directly.
            </summary>
      <param name="spaceType">Type of the space.</param>
      <param name="values">The values.</param>
      <returns>The created space of type <paramref name="spaceType" />.</returns>
      <exception cref="T:System.FormatException">
            The <paramref name="spaceType" /> is not the Type of a compatible space class.
            </exception>
      <exception cref="T:System.ArgumentException">
            The length of <paramref name="values" /> is not equal to the number of dimensions of the space.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.Create``1(``0@,Baselabs.ThirdParty.LapackBlas.MatrixData)">
      <summary>
            Creates a space from a one-dimensional vector with the same length.
            No deep copy of the vector is created, but the reference is used directly.
            </summary>
      <param name="space">The created space.</param>
      <param name="vector">The vector containing the values of the dimensions.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <exception cref="T:System.ArgumentException">
            The length of the <paramref name="vector" /> is not equal to the number of dimensions of the space.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.Create``1(``0@,System.Double[])">
      <summary>
            Creates a space from a one-dimensional double array with the same length.
            No deep copy of the array is created, but the reference is used directly.
            </summary>
      <param name="space">The created space.</param>
      <param name="values">The array containing the values of the dimensions.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <exception cref="T:System.ArgumentException">
            The length of the <paramref name="values" /> array is not equal to the number of dimensions of the space.
            </exception>
    </member>
    <member name="F:Baselabs.Statistics.Spaces.Space.Dimensions">
      <summary>
            The number of dimensions of the space.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.Equals(Baselabs.Statistics.Spaces.Space)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. </param>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.GetDimensionIndex(System.String)">
      <summary>
            Returns the index of the dimension with the given <paramref name="dimensionName" />.
            </summary>
      <param name="dimensionName">The name of the dimension, this is identical to the property's identifier.</param>
      <returns>The index of the dimension.</returns>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
            The space contains no dimension with the specified name.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.GetDimensionInformation(System.Int32)">
      <summary>
            Returns information on the dimension with the specified index.
            </summary>
      <param name="index">The index of the dimension.</param>
      <returns>
            A <see cref="T:Baselabs.Statistics.Spaces.DimensionInfo" /> instance for the dimension.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="index" /> is below zero or greater or equal to the number of dimensions.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.GetDimensionInformations">
      <summary>
            Returns a collection containing a <see cref="T:Baselabs.Statistics.Spaces.DimensionInfo" /> instance for each
            dimension.
            </summary>
      <returns>The collection of <see cref="T:Baselabs.Statistics.Spaces.DimensionInfo" /> instances.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.GetHashCode">
      <summary>
            Calculates a hash code from the values of the vector and the type of the Space.
            
            This code is not thread safe!
            </summary>
      <returns>The hash code.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.GetIndices``1">
      <summary>
             Returns a vector where the value of each dimension is the index of the respective dimension.
             </summary>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <returns>The vector with the indices as values.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.IsSubset``2">
      <summary>
            Determines whether a space is a subset of another space.
            </summary>
      <typeparam name="TSpace">The space.</typeparam>
      <typeparam name="TSpaceSubset">
            The space assumed to be a subset of <typeparamref name="TSpace" />.
            </typeparam>
      <returns>
        <c>true</c> if the space is a subset.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.IsSubset(Baselabs.Statistics.Spaces.Space)">
      <summary>
            Determines whether the given space is a subset of this space.
            This is true, if spaceToCheck has less or equal dimensions as this space, and every dimension of
            spaceToCheck is also a dimension of this space.
            </summary>
      <param name="spaceToCheck">The space which is checked for being a subset.</param>
      <returns>True, if spaceToCheck is a subset.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Space.Item(System.Int32)">
      <summary>
            Gets or sets the value of the dimension specified by the index.
            </summary>
      <param name="index">The index of the dimension.</param>
      <returns>
            The value of the dimension.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The index is below zero or greater or equal than the number of dimensions.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Space.Item(System.String)">
      <summary>
            Gets or sets the value of the dimension specified by its name.
            The dimension needs to be marked with the <see cref="T:Baselabs.Statistics.Spaces.DimensionAttribute" />
            and the <see cref="T:Baselabs.Statistics.Spaces.UnitAttribute" />.
            </summary>
      <param name="dimensionName">The name of the dimension.</param>
      <returns>The value of the dimension.</returns>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">
              The space contains no dimension with the specified name.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Space.MatrixData">
      <summary>
            Gets or sets the column vector that contains the values of the dimensions (the elements) of the space.
            </summary>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is <c>null</c>.</exception>
      <exception cref="T:System.ArgumentException">
            The <paramref name="value" /> is not a column vector with the number of elements being equal
            to <see cref="F:Baselabs.Statistics.Spaces.Space.Dimensions" />.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.op_Equality(Baselabs.Statistics.Spaces.Space,Baselabs.Statistics.Spaces.Space)">
      <summary>
            Returns true if the space states are equal.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.op_Inequality(Baselabs.Statistics.Spaces.Space,Baselabs.Statistics.Spaces.Space)">
      <summary>
            Returns true if the space states are not equal.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.op_Subtraction(Baselabs.Statistics.Spaces.Space,Baselabs.Statistics.Spaces.Space)">
      <summary>
            Subtracts two spaces of the same type and returns the resulting vector as a double array.
            </summary>
      <param name="left">The left space.</param>
      <param name="right">The right space.</param>
      <returns>
            The resulting vector.
            </returns>
      <exception cref="T:System.ArgumentException">The operands are not of the same type.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.SubspaceIndices(Baselabs.Statistics.Spaces.Space)">
      <summary>
            Determines the index relationships between the given subspace, which must be a subset of the current space,
            and the current space. The array contains the corresponding index dimension in the current space
            for each dimension in the subspace. Only the dimension names, i.e. the identifiers of the properties
            are considered.
            </summary>
      <param name="subspace">The subspace, which is a subset of the current space.</param>
      <returns>
            The index relationships.
            </returns>
      <exception cref="T:System.ArgumentException">
            The given <paramref name="subspace" /> is not a subset of this space.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.Subtract(Baselabs.Statistics.Spaces.Space)">
      <summary>
            Subtracts a space from this space and returns the resulting vector.<para />
            Override this method to implement special subtraction operations for certain elements of the space,
            e.g. angles.
            </summary>
      <param name="other">The space to subtract.</param>
      <returns>The difference vector.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.ToString">
      <summary>
            Provides a human friendly representation of the space's state.
            </summary>
      <param name="provider">The format provider.</param>
      <param name="digits">The number of significant digits or 0 to use all digits.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.ToString(System.IFormatProvider)">
      <summary>
            Provides a human friendly representation of the space's state.
            </summary>
      <param name="provider">The format provider.</param>
      <param name="digits">The number of significant digits or 0 to use all digits.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.ToString(System.IFormatProvider,System.Int32)">
      <summary>
            Provides a human friendly representation of the space's state.
            </summary>
      <param name="provider">The format provider.</param>
      <param name="digits">The number of significant digits or 0 to use all digits.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Space.ToString(System.Int32)">
      <summary>
            Provides a human friendly representation of the space's state.
            </summary>
      <param name="provider">The format provider.</param>
      <param name="digits">The number of significant digits or 0 to use all digits.</param>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.SpaceExtensions">
      <summary>
            Provides extension methods for classes that inherit from <see cref="T:Baselabs.Statistics.Spaces.Space" />.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.SpaceExtensions.Clone``1(``0)">
      <summary>
            Creates a shallow copy of the <paramref name="space" /> instance.
            </summary>
      <param name="space">The space to be cloned.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <returns>The shallow copy of the instance.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.SpaceExtensions.FitToDomain``1(``0)">
      <summary>
            Fits the space into its domain.
            </summary>
      <param name="space">The space to be fitted into its domain.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <returns>The space fit to its domain.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.SquareMatrix`1">
      <summary>
            A square matrix where the number of rows equals the number of columns.
            </summary>
      <typeparam name="TSpace">The type of the space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.SquareMatrix`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.SquareMatrix`1.#ctor(System.Double[0:,0:])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" /> class 
            and initializes its values.
            </summary>
      <param name="values">The values of the matrix.</param>
      <exception cref="T:System.ArgumentException">
            The length of dimensions 0 and 1 of <paramref name="values" /> are not equal to
            the number of dimensions of <typeparamref name="TSpace" /><para>or</para>
            the matrix defined by <paramref name="values" /> is not square, i.e.
            the length of dimensions 0 and 1 of <paramref name="values" /> are not equal.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.SquareMatrix`1.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" /> class 
            and initializes its main diagonal.
            </summary>
      <param name="mainDiagonal">The main diagonal values of the matrix.</param>
      <exception cref="T:System.ArgumentException">
            The length of <paramref name="mainDiagonal" /> is not equal to the number of dimensions of
            <typeparamref name="TSpace" />.
            </exception>
    </member>
    <member name="F:Baselabs.Statistics.Spaces.SquareMatrix`1.CachedDeterminant">
      <summary>
            The cached determinant of the current matrix.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.SquareMatrix`1.CheckMatrix">
      <summary>
            Checks the matrix for specific restrictions,
            e.g. that the number of rows and columns are equal for a <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" />.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.SquareMatrix`1.Create(Baselabs.ThirdParty.LapackBlas.MatrixData)">
      <summary>
            Creates an instance of <see cref="T:Baselabs.Statistics.Spaces.SquareMatrix`1" /> from the specified matrix data.
            No deep copy of the matrix is created, but the reference is used directly.
            </summary>
      <param name="matrix">The matrix.</param>
      <returns>The created instance.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.SquareMatrix`1.Determinant">
      <summary>
            Gets the determinant <latex>\mathrf{det} A=|A|</latex>.
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Spaces.SquareMatrix`1.Dimensions">
      <summary>
            Gets the number of dimensions.
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Spaces.SquareMatrix`1.EmptySpace">
      <summary>
            An empty space.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.SquareMatrix`1.Eye">
      <summary>
            Creates a identity matrix with 1's on the diagonal and 0's elsewhere.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.SquareMatrix`1.MatrixChanged">
      <summary>
            Is called when the matrix is assumed to been changed.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.SquareMatrix`1.Transpose">
      <summary>
            Gets the transpose matrix <latex>\mathbf(B)=A^\mathrm{T}</latex>.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.UnitAttribute">
      <summary>
             Sets the unit of a state.
             </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.UnitAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.UnitAttribute" /> class.
            </summary>
      <param name="unit">
                The dimension unit.
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.UnitAttribute.Unit">
      <summary>
            Gets the unit of the dimension.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.VelocityComponentsSpace">
      <summary>
            A Cartesian velocity space consisting of component wise velocity states.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.VelocityComponentsSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.VelocityComponentsSpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.VelocityComponentsSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.VelocityComponentsSpace" /> class
            with the number of additional dimensions from a derived state.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived class adds.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.VelocityComponentsSpace.Vx">
      <summary>
            Gets or sets the x component of the velocity [m/s].
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.VelocityComponentsSpace.Vy">
      <summary>
            Gets or sets the y component of the velocity [m/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.VelocitySpace">
      <summary>
            A velocity space consisting of a velocity state.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.VelocitySpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.VelocitySpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.VelocitySpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.VelocitySpace" /> class
            with the number of additional dimensions from a derived state.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived class adds.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.VelocitySpace.V">
      <summary>
            Gets or sets the velocity [m/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.YawRateSpace">
      <summary>
            A yaw rate space consisting of a yaw rate state.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.YawRateSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.YawRateSpace" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.YawRateSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.YawRateSpace" /> class
            with the number of additional dimensions from a derived state.
            </summary>
      <param name="additionalDimensions">The number of additional dimensions a derived class adds.</param>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.YawRateSpace.W">
      <summary>
            Gets or sets the yaw rate [rad/s].
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Euclidean.GenericSpace">
      <summary>
            Base class for runtime generation of euclidean spaces with an arbitrary number of dimensions.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.GenericSpace.#ctor">
      <summary>
            The parameterless constructor cannot be used to create instances of GenericSpace.
            Use the method <see cref="M:Baselabs.Statistics.Spaces.Euclidean.GenericSpace.CreateInstance(System.Int32)" /> instead.
            </summary>
      <exception cref="T:System.InvalidOperationException">It is tried to use this constructor.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.GenericSpace.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.Euclidean.GenericSpace" /> class.
            </summary>
      <param name="dimensions">The number of dimensions.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.GenericSpace.CreateInstance(System.Int32)">
      <summary>
            Creates a new space type with the given number of dimensions and returns an instance of the created type.
            </summary>
      <param name="dimensions">The number of dimensions for the space.</param>
      <returns>An instance of the created type.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.GenericSpace.CreateType(System.Int32)">
      <summary>
            Creates a space type with the given number of dimensions and returns the created type.
            </summary>
      <param name="dimensions">The number of dimensions for the space.</param>
      <returns>The created type.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Euclidean.Space10D">
      <summary>
            Represents a simple n dimensional state space without an explicit state definition.
            n is given by the number in the class name Space<b>n</b>D.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space10D.#ctor">
      <summary>
            Initializes a new instance of the class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space10D.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the class and initializes its values.
            </summary>
      <param name="values">The values.</param>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Euclidean.Space1D">
      <summary>
            Represents a simple n dimensional state space without an explicit state definition.
            n is given by the number in the class name Space<b>n</b>D.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space1D.#ctor">
      <summary>
            Initializes a new instance of the class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space1D.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the class and initializes its value.
            </summary>
      <param name="value">
            The value.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space1D.op_Implicit(Baselabs.Statistics.Spaces.Euclidean.Space1D)~System.Double">
      <summary>
            Converts the value of the <paramref name="space" /> into a <see cref="T:System.Double" />.
            </summary>
      <param name="space">The space instance.</param>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space1D.op_Implicit(System.Double)~Baselabs.Statistics.Spaces.Euclidean.Space1D">
      <summary>
            Converts a value into a space instance.
            </summary>
      <param name="value">The value.</param>
      <returns>An instance of the space with the given <paramref name="value" />.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Euclidean.Space2D">
      <summary>
            Represents a simple n dimensional state space without an explicit state definition.
            n is given by the number in the class name Space<b>n</b>D.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space2D.#ctor">
      <summary>
            Initializes a new instance of the class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space2D.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the class and initializes its values.
            </summary>
      <param name="values">The values.</param>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Euclidean.Space3D">
      <summary>
            Represents a simple n dimensional state space without an explicit state definition.
            n is given by the number in the class name Space<b>n</b>D.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space3D.#ctor">
      <summary>
            Initializes a new instance of the class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space3D.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the class and initializes its values.
            </summary>
      <param name="values">The values.</param>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Euclidean.Space4D">
      <summary>
            Represents a simple n dimensional state space without an explicit state definition.
            n is given by the number in the class name Space<b>n</b>D.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space4D.#ctor">
      <summary>
            Initializes a new instance of the class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space4D.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the class and initializes its values.
            </summary>
      <param name="values">The values.</param>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Euclidean.Space5D">
      <summary>
            Represents a simple n dimensional state space without an explicit state definition.
            n is given by the number in the class name Space<b>n</b>D.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space5D.#ctor">
      <summary>
            Initializes a new instance of the class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space5D.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the class and initializes its values.
            </summary>
      <param name="values">The values.</param>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Euclidean.Space6D">
      <summary>
            Represents a simple n dimensional state space without an explicit state definition.
            n is given by the number in the class name Space<b>n</b>D.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space6D.#ctor">
      <summary>
            Initializes a new instance of the class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space6D.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the class and initializes its values.
            </summary>
      <param name="values">The values.</param>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Euclidean.Space7D">
      <summary>
            Represents a simple n dimensional state space without an explicit state definition.
            n is given by the number in the class name Space<b>n</b>D.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space7D.#ctor">
      <summary>
            Initializes a new instance of the class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space7D.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the class and initializes its values.
            </summary>
      <param name="values">The values.</param>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Euclidean.Space8D">
      <summary>
            Represents a simple n dimensional state space without an explicit state definition.
            n is given by the number in the class name Space<b>n</b>D.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space8D.#ctor">
      <summary>
            Initializes a new instance of the class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space8D.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the class and initializes its values.
            </summary>
      <param name="values">The values.</param>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Euclidean.Space9D">
      <summary>
            Represents a simple n dimensional state space without an explicit state definition.
            n is given by the number in the class name Space<b>n</b>D.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space9D.#ctor">
      <summary>
            Initializes a new instance of the class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Euclidean.Space9D.#ctor(System.Double[])">
      <summary>
            Initializes a new instance of the class and initializes its values.
            </summary>
      <param name="values">The values.</param>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Validation.SpaceDimensionException">
      <summary>
            The exception that is thrown when the validation of a dimension of a <see cref="T:Baselabs.Statistics.Spaces.Space" /> fails.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Validation.SpaceDimensionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.Validation.SpaceDimensionException" /> class
            from a serialized representation.
            </summary>
      <param name="info">The info.</param>
      <param name="context">The context.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Validation.SpaceDimensionException.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.Validation.SpaceDimensionException" /> class.
            </summary>
      <param name="dimensionName">The name of the invalid dimension.</param>
      <param name="message">The message which describes the error.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dimensionName" />
            or
            <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dimensionName" /> is empty
            or
            <paramref name="message" /> is empty.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Validation.SpaceDimensionException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.Validation.SpaceDimensionException" /> class.
            </summary>
      <param name="dimensionName">The name of the invalid dimension.</param>
      <param name="message">The message which describes the error.</param>
      <param name="innerException">The inner exception.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dimensionName" />
            or
            <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dimensionName" /> is empty
            or
            <paramref name="message" /> is empty.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Spaces.Validation.SpaceDimensionException.DimensionName">
      <summary>
            Gets the name of the invalid dimension.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Validation.SpaceDimensionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is a null reference (Nothing in Visual Basic). </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Validation.SpaceException">
      <summary>
            The exception that is thrown when the validation of a <see cref="T:Baselabs.Statistics.Spaces.Space" /> fails.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Validation.SpaceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.Validation.SpaceException" /> class
            from a serialized representation.
            </summary>
      <param name="info">The info.</param>
      <param name="context">The context.</param>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Validation.SpaceException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.Validation.SpaceException" /> class.
            </summary>
      <param name="message">The message which describes the error.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="message" /> is empty.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Validation.SpaceException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Spaces.Validation.SpaceException" /> class.
            </summary>
      <param name="message">The message which describes the error.</param>
      <param name="innerException">
            The exception which caused the actual exception or <see langword="null" /> if no inner exception occurred.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="message" /> is empty.</exception>
    </member>
    <member name="T:Baselabs.Statistics.Spaces.Validation.ValidationExcludeAttribute">
      <summary>
            Indicates that a <see cref="T:Baselabs.Statistics.Spaces.Space" /> should be excluded by tools which validate space implementations.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Spaces.Validation.ValidationExcludeAttribute.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Spaces.Validation.ValidationExcludeAttribute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.Association">
      <summary>
            Provides static methods for the creation of <see cref="T:Baselabs.Statistics.Tracking.Association.Association`2" /> instances.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.Association.Create``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Association.IAssociationFunction{``0,``1},Baselabs.Statistics.Tracking.Gating.IGate{``0,``1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.Association`2" /> class.
            </summary>
      <param name="objects1">
                The objects to which the objects of type <typeparamref name="T2" /> are associated.
            </param>
      <param name="objects2">
                The objects which are associated to the objects of type <typeparamref name="T1" />.
            </param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="associationFunction">The association function.</param>
      <param name="gate">The gate. May be <c>null</c>.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.Association`2">
      <summary>
            An association of several objects of type <typeparamref name="T2" /> to objects
            of type <typeparamref name="T1" />.
            </summary>
      <typeparam name="T1">
            The type of the objects to which objects of type <typeparamref name="T2" /> are assigned.
            </typeparam>
      <typeparam name="T2">
            The type of the objects which are assigned to the objects of type <typeparamref name="T1" />.
            </typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.Association`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.Association`2" /> class with the specified object lists
            and the association algorithm using the <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicAssociationTableFactory" />.
            </summary>
      <param name="objects1">
            The objects to which the objects of type <typeparamref name="T2" /> are associated.
            </param>
      <param name="objects2">
            The objects which are associated to the objects of type <typeparamref name="T1" />.
            </param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.Association`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Association.IAssociationFunction{`0,`1},Baselabs.Statistics.Tracking.Gating.IGate{`0,`1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.Association`2" /> class.
            </summary>
      <param name="objects1">
                The objects to which the objects of type <typeparamref name="T2" /> are associated.
            </param>
      <param name="objects2">
                The objects which are associated to the objects of type <typeparamref name="T1" />.
            </param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="associationFunction">The association function.</param>
      <param name="gate">The gate. May be <c>null</c>.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
    </member>
    <member name="F:Baselabs.Statistics.Tracking.Association.Association`2._associations">
      <summary></summary>
    </member>
    <member name="F:Baselabs.Statistics.Tracking.Association.Association`2._notAssociatedObjects">
      <summary></summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.Association`2.AssociationTable">
      <summary>
            Gets the association table.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.Association`2.Count1">
      <summary>
            Gets the number of objects of type <typeparamref name="T1" /> to which the objects of type
            <typeparamref name="T2" /> are associated.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.Association`2.Count2">
      <summary>
            Gets the number of objects of type <typeparamref name="T2" /> which are associated to the objects of type
            <typeparamref name="T1" />.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.Association`2.DetermineAssociations">
      <summary>
            Determines the associations based on the values in the <see cref="P:Baselabs.Statistics.Tracking.Association.Association`2.AssociationTable" />.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.Association`2.FactoryProvider">
      <summary>
            Gets the factory provider.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.Association`2.GetAssociatedObjects(System.Int32)">
      <summary>
            Gets the objects of type <typeparamref name="T2" /> that have been associated to the specified object of type
            <typeparamref name="T1" />.
            </summary>
      <param name="object1Index">
            The index of the object for which all associated objects are requested.
            </param>
      <returns>The associated objects.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.Association`2.GetAssociatedObjects(`0)">
      <summary>
            Gets the objects of type <typeparamref name="T2" /> that have been associated to the specified object of type
            <typeparamref name="T1" />.
            </summary>
      <param name="object1">
            The object of type <typeparamref name="T1" /> for which all associated objects are requested.
            </param>
      <returns>The associated objects for <paramref name="object1" />.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.Association`2.GetNotAssociatedObjects">
      <summary>
            Gets the objects of type <typeparamref name="T2" /> that have not been associated to any of the objects of
            type <typeparamref name="T1" />.
            </summary>
      <returns>The not associated objects.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.Association`2.Objects1">
      <summary>
            Gets a list containing all objects of type <typeparamref name="T1" />.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.Association`2.Objects2">
      <summary>
            Gets a list containing all objects of type <typeparamref name="T2" />.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.ExtendedMeasurement">
      <summary>
            Provides static methods for the creation of
            <see cref="T:Baselabs.Statistics.Tracking.Association.ExtendedMeasurement`2" /> instances.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.ExtendedMeasurement.Create``2(``0,``1)">
      <summary>
            Creates a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.ExtendedMeasurement`2" />
            class.
            </summary>
      <param name="measurement">The measurement.</param>
      <param name="additionalInformation">The additional information.</param>
      <returns>The created instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="measurement" /> is <c>null</c>.</exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.ExtendedMeasurement`2">
      <summary>
            A combination of a measurement represented by a <see cref="T:Baselabs.Statistics.Spaces.Space" /> and an arbitrary additional information.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.ExtendedMeasurement`2.#ctor(`0,`1)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.ExtendedMeasurement`2" /> class.
            </summary>
      <param name="measurement">The measurement.</param>
      <param name="additionalInformation">The additional information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="measurement" /> is <c>null</c>.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.ExtendedMeasurement`2.AdditionalInformation">
      <summary>
            Gets the additional information.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.ExtendedMeasurement`2.Measurement">
      <summary>
            Gets the measurement.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.GPDA">
      <summary>
            Provides static methods for the creation of <see cref="T:Baselabs.Statistics.Tracking.Association.GPDA`1" /> instances.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.GPDA.Create``1(Baselabs.Statistics.Distributions.IEvaluable{``0},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},System.Collections.Generic.IEnumerable{``0},System.Double,System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.GPDA`1" /> class.
            </summary>
      <param name="spatialLikelihood">
            The spatial likelihood of the object conditioned on all previous measurements.
            </param>
      <param name="existence">The existence of the object.</param>
      <param name="truePositiveLikelihood">The true positive likelihood or detection model.</param>
      <param name="elements">The elements which are associated to the object.</param>
      <param name="lambda">The Poisson parameter of the clutter cardinality.</param>
      <param name="maximumTruePositives">
            The maximum number of measurements which are assumed to be originated from the object.
            </param>
      <typeparam name="TSpace">The type of the element space, e.g. the measurement space.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero
             <para>or</para><paramref name="maximumTruePositives" /> is less than or equal to zero.
             <paramref name="spatialLikelihood" /> is <c>null</c><para>or</para><paramref name="existence" /> is <c>null</c><para>or</para><paramref name="truePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="elements" /> is <c>null</c>.
             
  </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> is less than or equal to zero
             <para>or</para><paramref name="maximumTruePositives" /> is less than or equal to zero.
             <paramref name="spatialLikelihood" /> is <c>null</c><para>or</para><paramref name="existence" /> is <c>null</c><para>or</para><paramref name="truePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="elements" /> is <c>null</c>.
             
  </exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.GPDA`1">
      <summary>
            Generates true positives hypotheses for a given object and its associated elements.
            </summary>
      <typeparam name="TSpace">The type of the element space, e.g. the measurement space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.GPDA`1.#ctor(Baselabs.Statistics.Distributions.IEvaluable{`0},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},System.Collections.Generic.IEnumerable{`0},System.Double,System.Int32)">
      <summary>
             Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.GPDA`1" /> class.
             </summary>
      <param name="spatialLikelihood">
             The spatial likelihood of the object conditioned on all previous measurements.
             </param>
      <param name="existence">The existence of the object.</param>
      <param name="truePositiveLikelihood">The true positive likelihood or detection model.</param>
      <param name="elements">The elements which are associated to the object.</param>
      <param name="lambda">The Poisson parameter of the clutter cardinality.</param>
      <param name="maximumTruePositives">
             The maximum number of measurements which are assumed to be originated from the object.
             </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="lambda" /> is less than or equal to zero
             <para>or</para><paramref name="maximumTruePositives" /> is less than or equal to zero.
             </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="spatialLikelihood" /> is <c>null</c><para>or</para><paramref name="existence" /> is <c>null</c><para>or</para><paramref name="truePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="elements" /> is <c>null</c>.
             </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.GPDA`1.GetElementsLikelihood">
      <summary>
            Gets the likelihood of the associated elements conditioned on the existence of the object.
            </summary>
      <returns>The likelihood of the associated elements.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.GPDA`1.GetHypotheses">
      <summary>
            Gets the true positive hypotheses.
            </summary>
      <returns>
            A collection of classification hypothesis where each hypothesis provides one possible solution
            to the question which of the associated elements of type <typeparamref name="TSpace" /> are considered to be the
            true elements (or true positives), e.g. measurements which are generated 
            by an object through a measurement process
            (see <see cref="T:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2" />).
            </returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.GPDA`1.Lambda">
      <summary>
            Gets the parameter of the Poisson distributed clutter cardinality or clutter rate.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.GPDA`1.MaximumTruePositives">
      <summary>
            Gets the maximum number of elements (or true positives)
            which are assumed to be originated from one object.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to zero.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.IAssociation`2">
      <summary>
            Exposes the result of an association of several objects of type <typeparamref name="T2" /> to objects
            of type <typeparamref name="T1" />.
            </summary>
      <typeparam name="T1">
            The type of the objects to which objects of type <typeparamref name="T2" /> are assigned.
            </typeparam>
      <typeparam name="T2">
            The type of the objects which are assigned to the objects of type <typeparamref name="T1" />.
            </typeparam>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.IAssociation`2.Count1">
      <summary>
            Gets the number of objects of type <typeparamref name="T1" /> to which the objects of type
            <typeparamref name="T2" /> are associated.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IAssociation`2.GetAssociatedObjects(System.Int32)">
      <summary>
            Gets the objects of type <typeparamref name="T2" /> that have been associated to the specified object of type
            <typeparamref name="T1" />.
            </summary>
      <param name="object1Index">
            The index of the object for which all associated objects are requested.
            </param>
      <returns>The associated objects.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IAssociation`2.GetAssociatedObjects(`0)">
      <summary>
            Gets the objects of type <typeparamref name="T2" /> that have been associated to the specified object of type
            <typeparamref name="T1" />.
            </summary>
      <param name="object1">
            The object of type <typeparamref name="T1" /> for which all associated objects are requested.
            </param>
      <returns>The associated objects for <paramref name="object1" />.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IAssociation`2.GetNotAssociatedObjects">
      <summary>
            Gets the objects of type <typeparamref name="T2" /> that have not been associated to any of the objects of
            type <typeparamref name="T1" />.
            </summary>
      <returns>The not associated objects.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm">
      <summary>
            Represents an association algorithm based on an association table.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm.GetAssociations(Baselabs.Statistics.Tracking.Collections.IAssociationTable,System.Collections.Generic.IList{System.Int32}@)">
      <summary>
            Returns a collection of indices from the second set for each object of the first set
            and the not associated objects.
            </summary>
      <param name="associationTable">The association table.</param>
      <param name="notAssociated">The indices of the not associated objects.</param>
      <returns>
            A list of associated indices from the second object set for each object of the first set.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="associationTable" /> is <c>null</c>.</exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider">
      <summary>
            Describes a provider for factories that create instances for <see cref="T:System.Collections.Generic.IList`1" /> and
            <see cref="T:Baselabs.Statistics.Tracking.Collections.IAssociationTable" /> for the <see cref="T:Baselabs.Statistics.Tracking.Association.Association" />.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider.AssociationTableFactory">
      <summary>
            Gets the association table factory.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider.Objects1ListFactory">
      <summary>
            Gets the factory for lists that hold the first object set.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider.Objects2ListFactory">
      <summary>
            Gets the factory for lists that hold the second object set.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.IAssociationFunction`2">
      <summary>
            Describes a function that calculates the similarity of two objects as a <langword cref="T:System.Double" /> value.
            </summary>
      <typeparam name="T1">The type of the first object.</typeparam>
      <typeparam name="T2">The type of the second object.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IAssociationFunction`2.GetSimilarity(`0,`1)">
      <summary>
            Gets the similarity of the two objects.
            </summary>
      <param name="object1">The first object.</param>
      <param name="object2">The second object.</param>
      <returns>
            A value indicating how similar the two objects are. The larger the value, the more similar are the
            objects. A zero value means that the objects are not similar at all.
            </returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.IHypothesisListFactoryProvider">
      <summary>
            Describes a provider for a factory that creates a list of hypotheses.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.IHypothesisListFactoryProvider.HypothesisListFactory">
      <summary>
            Gets the hypothesis list factory.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.IHypothesisListFactoryProvider.TrueElementsListFactory">
      <summary>
            Gets the true elements list factory.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.IPDA">
      <summary>
            Provides static methods for the creation of <see cref="T:Baselabs.Statistics.Tracking.Association.IPDA`1" /> and
            <see cref="T:Baselabs.Statistics.Tracking.Association.IPDA`2" /> instances.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IPDA.Create``1(Baselabs.Statistics.Distributions.IEvaluable{``0},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},System.Collections.Generic.IEnumerable{``0},System.Double,Baselabs.Statistics.Tracking.Association.IHypothesisListFactoryProvider)">
      <summary>
            Creates a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.IPDA`1" /> class.
            </summary>
      <param name="incompleteSpatialLikelihood">
            The incomplete spatial likelihood of the object conditioned on all previous measurements.
            </param>
      <param name="existence">The existence of the object.</param>
      <param name="incompleteTruePositiveLikelihood">
            The incomplete true positive likelihood or detection model.
            The completed PDF will be evaluated at <latex>#\{z\}=0</latex>.</param>
      <param name="extendedMeasurements">
            The measurements extended with additional information which are associated to the object.
            </param>
      <param name="lambda">The Poisson parameter of the clutter cardinality.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
      <typeparam name="TSpace">The type of the element space, e.g. the measurement space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IPDA.Create``2(Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{``0},``1},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace},Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},``1},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Association.ExtendedMeasurement{``0,``1}},System.Double,Baselabs.Statistics.Tracking.Association.IHypothesisListFactoryProvider)">
      <summary>
            Creates a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.IPDA`2" /> class.
            </summary>
      <param name="incompleteSpatialLikelihood">
            The incomplete spatial likelihood of the object conditioned on all previous measurements.
            </param>
      <param name="existence">The existence of the object.</param>
      <param name="incompleteTruePositiveLikelihood">
            The incomplete true positive likelihood or detection model.
            The completed PDF will be evaluated at <latex>#\{z\}=0</latex>.</param>
      <param name="extendedMeasurements">
            The measurements extended with additional information which are associated to the object.
            </param>
      <param name="lambda">The Poisson parameter of the clutter cardinality.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IPDA.Create``2(Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{``0},``1},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace},Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Double,Baselabs.Statistics.Tracking.Association.IHypothesisListFactoryProvider)">
      <summary>
            Creates a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.IPDA`2" /> class.
            </summary>
      <param name="incompleteSpatialLikelihood">
            The incomplete spatial likelihood of the object conditioned on all previous measurements.
            </param>
      <param name="existence">The existence of the object.</param>
      <param name="incompleteTruePositiveLikelihood">The incomplete true positive likelihood or detection model.
            The completed PDF will be evaluated at <latex>#\{z\}=0</latex>.</param>
      <param name="measurements">The measurements which are associated to the object.</param>
      <param name="additionalInformation">
            A collection with additional information to each measurement in <paramref name="measurements" />.
            </param>
      <param name="lambda">The Poisson parameter of the clutter cardinality.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.IPDA`1">
      <summary>
            Generates true positives hypotheses for a given object and its associated elements.
            </summary>
      <typeparam name="TSpace">The type of the element space, e.g. the measurement space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IPDA`1.#ctor(Baselabs.Statistics.Distributions.IEvaluable{`0},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},System.Collections.Generic.IEnumerable{`0},System.Double,Baselabs.Statistics.Tracking.Association.IHypothesisListFactoryProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.IPDA`1" /> class.
            </summary>
      <param name="spatialLikelihood">
            The spatial likelihood of the object conditioned on all previous measurements.
            </param>
      <param name="existence">The existence of the object.</param>
      <param name="truePositiveLikelihood">The true positive likelihood or detection model.</param>
      <param name="elements">The elements which are associated to the object.</param>
      <param name="lambda">The Poisson parameter of the clutter cardinality.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IPDA`1.GetElementsLikelihood">
      <summary>
            Gets the likelihood of the associated elements conditioned on the existence of the object.
            </summary>
      <returns>The likelihood of the associated elements.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IPDA`1.GetHypotheses">
      <summary>
            Gets the true positive hypotheses.
            </summary>
      <returns>
            A collection of classification hypothesis where each hypothesis provides one possible solution
            to the question which of the associated elements of type <typeparamref name="TSpace" /> are considered to be the
            true elements (or true positives), e.g. measurements which are generated 
            by an object through a measurement process
            (see <see cref="T:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2" />).
            </returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.IPDA`1.Lambda">
      <summary>
            Gets the parameter of the Poisson distributed clutter cardinality or clutter rate.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IPDA`1.ToString">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.IPDA`2">
      <summary>
            Generates true positives hypotheses for a given object specified by an incomplete likelihood
            and its associated measurements with additional information.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IPDA`2.#ctor(Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{`0},`1},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace},Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},`1},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Association.ExtendedMeasurement{`0,`1}},System.Double,Baselabs.Statistics.Tracking.Association.IHypothesisListFactoryProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.IPDA`2" /> class.
            </summary>
      <param name="incompleteSpatialLikelihood">
            The incomplete spatial likelihood of the object conditioned on all previous measurements.
            </param>
      <param name="existence">The existence of the object.</param>
      <param name="incompleteTruePositiveLikelihood">
            The incomplete true positive likelihood or detection model.
            The completed PDF will be evaluated at <latex>#\{z\}=0</latex>.</param>
      <param name="extendedMeasurements">
            The measurements extended with additional information which are associated to the object.
            </param>
      <param name="lambda">The Poisson parameter of the clutter cardinality.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IPDA`2.#ctor(Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{`0},`1},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace},Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},`1},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},System.Double,Baselabs.Statistics.Tracking.Association.IHypothesisListFactoryProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.IPDA`2" /> class.
            </summary>
      <param name="incompleteSpatialLikelihood">
            The incomplete spatial likelihood of the object conditioned on all previous measurements.
            </param>
      <param name="existence">The existence of the object.</param>
      <param name="incompleteTruePositiveLikelihood">The incomplete true positive likelihood or detection model.
            The completed PDF will be evaluated at <latex>#\{z\}=0</latex>.</param>
      <param name="measurements">The measurements which are associated to the object.</param>
      <param name="additionalInformation">
            A collection with additional information to each measurement in <paramref name="measurements" />.
            </param>
      <param name="lambda">The Poisson parameter of the clutter cardinality.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IPDA`2.GetElementsLikelihood">
      <summary>
            Gets the likelihood of the associated elements conditioned on the existence of the object.
            </summary>
      <returns>The likelihood of the associated elements.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.IPDA`2.GetHypotheses">
      <summary>
            Gets the true positive hypotheses.
            </summary>
      <returns>
            A collection of classification hypothesis where each hypothesis provides one possible solution
            to the question which of the associated elements of type <typeparamref name="TSpace" /> are considered to be the
            true elements (or true positives), e.g. measurements which are generated 
            by an object through a measurement process
            (see <see cref="T:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2" />).
            </returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.IPDA`2.Lambda">
      <summary>
            Gets the parameter of the Poisson distributed clutter cardinality or clutter rate.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.ITruePositivesHypothesesGenerator`1">
      <summary>
            Generates true positives hypotheses for a given object and its associated elements.
            </summary>
      <typeparam name="TSpace">The type of the element space, e.g. the measurement space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.ITruePositivesHypothesesGenerator`1.GetElementsLikelihood">
      <summary>
            Gets the likelihood of the associated elements conditioned on the existence of the object.
            </summary>
      <returns>The likelihood of the associated elements.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.ITruePositivesHypothesesGenerator`1.GetHypotheses">
      <summary>
            Gets the true positive hypotheses.
            </summary>
      <returns>
            A collection of classification hypothesis where each hypothesis provides one possible solution
            to the question which of the associated elements of type <typeparamref name="TSpace" /> are considered to be the
            true elements (or true positives), e.g. measurements which are generated 
            by an object through a measurement process
            (see <see cref="T:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2" />).
            </returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation">
      <summary>
            Provides static methods for the creation of
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`2" /> and
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3" />
            instances.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MeasurementAssociation.Create``3(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{``0,``2}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Association.ExtendedMeasurement{``1,``2}},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{``0,``1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Creates a new instance of the
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3" /> class
            using the specified incomplete likelihood distributions, their according existences and
            the extended measurements.
            </summary>
      <param name="incompleteLikelihoods">The incomplete likelihood integral distributions.</param>
      <param name="existences">The existence distributions.</param>
      <param name="extendedMeasurements">The measurements extended by additional information.</param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">An optional gate.</param>
      <param name="factoryProvider">
                The factory provider. Passing <c>null</c> is equivalent to passing an instance of
                <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
      <typeparam name="TLikelihood">The type of the likelihood distribution.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
      <returns>The created instance.</returns>
      <exception cref="T:System.ArgumentException">
            The number of <paramref name="incompleteLikelihoods" /> is greater than the number of
            <paramref name="existences" />.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MeasurementAssociation.Create``3(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{``0,``2}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace}},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{``0,``1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Creates a new instance of the
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3" /> class
            using the specified incomplete likelihood distributions, their according existences and
            the extended measurements.
            </summary>
      <param name="incompleteLikelihoods">The incomplete likelihood integral distributions.</param>
      <param name="existences">The existence distributions.</param>
      <param name="measurements">The measurements.</param>
      <param name="additionalInformation">
                A collection containing the additional information of the <paramref name="measurements" />.
            </param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">An optional gate.</param>
      <param name="factoryProvider">
                The factory provider. Passing <c>null</c> is equivalent to passing an instance of
                <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
      <typeparam name="TLikelihood">The type of the likelihood distribution.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
      <returns>The created instance.</returns>
      <exception cref="T:System.ArgumentException">
            The lengths of <paramref name="incompleteLikelihoods" /> and <paramref name="existences" />
            are not equal.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MeasurementAssociation.Create``3(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{``0,``2}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Association.ExtendedMeasurement{``1,``2}},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{``0,``1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Creates a new instance of the
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3" /> class
            using the specified incomplete likelihood distributions and the extended measurements.
            </summary>
      <param name="incompleteLikelihoods">The incomplete likelihood integral distributions.</param>
      <param name="extendedMeasurements">The measurements extended by additional information.</param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">An optional gate.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
      <typeparam name="TLikelihood">The type of the likelihood distribution.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
      <returns>The created instance.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MeasurementAssociation.Create``3(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{``0,``2}},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{``0,``1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Creates a new instance of the
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3" /> class
            using the specified incomplete likelihood distributions, the measurements and their additional
            information.
            </summary>
      <param name="incompleteLikelihoods">The incomplete likelihood integral distributions.</param>
      <param name="measurements">The measurements.</param>
      <param name="additionalInformation">
                A collection containing the additional information of the <paramref name="measurements" />.
            </param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">An optional gate.</param>
      <param name="factoryProvider">
                The factory provider. Passing <c>null</c> is equivalent to passing an instance of
                <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
      <typeparam name="TLikelihood">The type of the likelihood distribution.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
      <returns>The created instance.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MeasurementAssociation.Create``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace}},System.Collections.Generic.IEnumerable{``1},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{``0,``1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Creates a new instance of the
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`2" /> class using the
            specified likelihood distributions (also referred to as predicted measurements), their according
            existences and measurements.
            </summary>
      <param name="likelihoods">The likelihood integral distributions.</param>
      <param name="existences">The existence distributions.</param>
      <param name="measurements">The measurements.</param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">The gate.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
      <typeparam name="TLikelihood">The type of the likelihood distribution.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <returns>
            The created instance.
            </returns>
      <exception cref="T:System.ArgumentException">
            The number of <paramref name="likelihoods" /> is greater than the number of <paramref name="existences" />.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MeasurementAssociation.Create``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{``0,``1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Creates a new instance of the
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`2" /> class using the
            specified likelihood distributions (also referred to as predicted measurements) and measurements.
            </summary>
      <param name="likelihoods">The likelihood integral distributions.</param>
      <param name="measurements">The measurements.</param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">An optional gate.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
      <typeparam name="TLikelihood">The type of the likelihood distribution.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <returns>The created instance.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`2">
      <summary>
            An association of a set of measurements to a set of likelihood distributions (also referred to as
            predicted measurements).
            </summary>
      <typeparam name="TLikelihood">
            The type of the likelihood distribution.
            </typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace}},System.Collections.Generic.IEnumerable{`1},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{`0,`1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Initializes a new instance of the
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`2" /> class using the
            specified likelihood distributions (also referred to as predicted measurements), their according
            existences and the measurements.
            </summary>
      <param name="likelihoods">The likelihood integral distributions.</param>
      <param name="existences">The existence distributions.</param>
      <param name="measurements">The measurements.</param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">The gate.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
      <exception cref="T:System.ArgumentException">
            The number of <paramref name="likelihoods" /> is greater than the number of <paramref name="existences" />.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`2.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{`0,`1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Initializes a new instance of the
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`2" /> class using the
            specified likelihood distributions (also referred to as predicted measurements) and the measurements.
            </summary>
      <param name="likelihoods">The likelihood integral distributions.</param>
      <param name="measurements">The measurements.</param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">An optional gate.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3">
      <summary>
            An association of a set of measurements extended by additional information to a set of incomplete likelihood
            distributions (also referred to as predicted measurements).
            </summary>
      <typeparam name="TLikelihood">The type of the likelihood distribution.</typeparam>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3.#ctor(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{`0,`2}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Association.ExtendedMeasurement{`1,`2}},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{`0,`1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Initializes a new instance of the
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3" />
            class using the specified incomplete likelihood distributions, their according existences and
            the extended measurements.
            </summary>
      <param name="incompleteLikelihoods">The incomplete likelihood integral distributions.</param>
      <param name="existences">The existence distributions.</param>
      <param name="extendedMeasurements">The measurements extended by additional information.</param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">An optional gate.</param>
      <param name="factoryProvider">
                The factory provider. Passing <c>null</c> is equivalent to passing an instance of
                <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
      <exception cref="T:System.ArgumentException">
            The number of <paramref name="incompleteLikelihoods" /> is greater than the number of
            <paramref name="existences" />.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3.#ctor(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{`0,`2}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace}},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{`0,`1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Initializes a new instance of the
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3" />
            class using the specified incomplete likelihood distributions, their according existences and
            the extended measurements.
            </summary>
      <param name="incompleteLikelihoods">The incomplete likelihood integral distributions.</param>
      <param name="existences">The existence distributions.</param>
      <param name="measurements">The measurements.</param>
      <param name="additionalInformation">
                A collection containing the additional information of the <paramref name="measurements" />.
            </param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">An optional gate.</param>
      <param name="factoryProvider">
                The factory provider. Passing <c>null</c> is equivalent to passing an instance of
                <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
      <exception cref="T:System.ArgumentException">
            The lengths of <paramref name="incompleteLikelihoods" /> and <paramref name="existences" />
            are not equal.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3.#ctor(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{`0,`2}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Association.ExtendedMeasurement{`1,`2}},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{`0,`1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Initializes a new instance of the
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3" />
            class using the specified incomplete likelihood distributions and the extended measurements.
            </summary>
      <param name="incompleteLikelihoods">The incomplete likelihood integral distributions.</param>
      <param name="extendedMeasurements">The measurements extended by additional information.</param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">An optional gate.</param>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3.#ctor(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{`0,`2}},System.Collections.Generic.IEnumerable{`1},System.Collections.Generic.IEnumerable{`2},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{`0,`1},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Initializes a new instance of the
            <see cref="T:Baselabs.Statistics.Tracking.Association.MeasurementAssociation`3" />
            class using the specified incomplete likelihood distributions, the measurements and their additional
            information.
            </summary>
      <param name="incompleteLikelihoods">The incomplete likelihood integral distributions.</param>
      <param name="measurements">The measurements.</param>
      <param name="additionalInformation">
                A collection containing the additional information of the <paramref name="measurements" />.
            </param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">An optional gate.</param>
      <param name="factoryProvider">
                The factory provider. Passing <c>null</c> is equivalent to passing an instance of
                <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.MultipleLocalNearestNeighbor">
      <summary>
            Local nearest neighbor association algorithm with potentially multiple associations per object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MultipleLocalNearestNeighbor.#ctor(Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.MultipleLocalNearestNeighbor" /> class.
            </summary>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.MultipleLocalNearestNeighbor.FactoryProvider">
      <summary>
            Gets the factory provider.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.MultipleLocalNearestNeighbor.GetAssociations(Baselabs.Statistics.Tracking.Collections.IAssociationTable,System.Collections.Generic.IList{System.Int32}@)">
      <summary>
            Returns a collection of indices from the second set for each object of the first set
            and the not associated objects.
            </summary>
      <param name="associationTable">The association table.</param>
      <param name="notAssociated">The indices of the not associated objects.</param>
      <returns>
            A list of associated indices from the second object set for each object of the first set.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="associationTable" /> is <c>null</c>.</exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.SingleLocalNearestNeighbor">
      <summary>
            Local nearest neighbor association algorithm with at maximum one association per object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.SingleLocalNearestNeighbor.#ctor(Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.SingleLocalNearestNeighbor" /> class.
            </summary>
      <param name="factoryProvider">
            The factory provider. Passing <c>null</c> is equivalent to passing an instance of
            <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />. 
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.SingleLocalNearestNeighbor.GetAssociations(Baselabs.Statistics.Tracking.Collections.IAssociationTable,System.Collections.Generic.IList{System.Int32}@)">
      <summary>
            Returns a collection of indices from the second set for each object of the first set
            and the not associated objects.
            </summary>
      <param name="associationTable">The association table.</param>
      <param name="notAssociated">The indices of the not associated objects.</param>
      <returns>
            A list of associated indices from the second object set for each object of the first set.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="associationTable" /> is <c>null</c>.</exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.SPRT">
      <summary>
            Provides static methods for the creation of <see cref="T:Baselabs.Statistics.Tracking.Association.SPRT`1" /> and
            <see cref="T:Baselabs.Statistics.Tracking.Association.SPRT`2" /> instances.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.SPRT.Create``1(Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Creates a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.SPRT`1" /> class.
            </summary>
      <param name="truePositiveLikelihood">
            The true positive likelihood or detection model. The PDF will be evaluated at <latex>#\{z\}=0</latex>.
            </param>
      <param name="falsePositiveLikelihood">
            The false positive likelihood or clutter model. The PDF will be evaluated at <latex>#\{z\}=0</latex>.
            </param>
      <param name="elements">The elements which are associated to the object.</param>
      <typeparam name="TSpace">The type of the element space, e.g. the measurement space.</typeparam>
      <returns>The created instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="truePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="falsePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="elements" /> is <c>null</c>.
            
            The length of <paramref name="elements" /> is greater than one.
            
  </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="truePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="falsePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="elements" /> is <c>null</c>.
            
            The length of <paramref name="elements" /> is greater than one.
            
  </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.SPRT.Create``2(Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},``1},Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},``1},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Association.ExtendedMeasurement{``0,``1}})">
      <summary>
            Creates a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.SPRT`2" /> class.
            </summary>
      <param name="incompleteTruePositiveLikelihood">
            The incomplete true positive likelihood or detection model.
            The completed PDF will be evaluated at <latex>#\{z\}=0</latex>.
            </param>
      <param name="incompleteFalsePositiveLikelihood">
            The false positive likelihood or clutter model.
            The completed PDF will be evaluated at <latex>#\{z\}=0</latex>.
            </param>
      <param name="extendedMeasurements">
            The measurements extended with additional information which are associated to the object.
            </param>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="incompleteTruePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="incompleteFalsePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="extendedMeasurements" /> is <c>null</c>.
            
            The length of <paramref name="extendedMeasurements" /> is greater than one.
            
  </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="incompleteTruePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="incompleteFalsePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="extendedMeasurements" /> is <c>null</c>.
            
            The length of <paramref name="extendedMeasurements" /> is greater than one.
            
  </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.SPRT.Create``2(Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},``0},Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Creates a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.SPRT`2" /> class.
            </summary>
      <param name="incompleteTruePositiveLikelihood">
            The incomplete true positive likelihood or detection model.
            The completed PDF will be evaluated at <latex>#\{z\}=0</latex>.
            </param>
      <param name="incompleteFalsePositiveLikelihood">
            The false positive likelihood or clutter model.
            The completed PDF will be evaluated at <latex>#\{z\}=0</latex>.
            </param>
      <param name="measurements">
            The measurements which are associated to the object.
            </param>
      <param name="additionalInformation">
            A collection with additional information to each measurement in <paramref name="measurements" />.
            </param>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="incompleteTruePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="incompleteFalsePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="measurements" /> is <c>null</c><para>or</para><paramref name="additionalInformation" /> is <c>null</c>.
            
            The length of <paramref name="measurements" /> is greater than one.
            
  </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="incompleteTruePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="incompleteFalsePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="measurements" /> is <c>null</c><para>or</para><paramref name="additionalInformation" /> is <c>null</c>.
            
            The length of <paramref name="measurements" /> is greater than one.
            
  </exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.SPRT`1">
      <summary>
            Generates one true positive hypothesis for a given object and at most one associated element.
            </summary>
      <typeparam name="TSpace">The type of the element space, e.g. the measurement space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.SPRT`1.#ctor(Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.SPRT`1" /> class.
            </summary>
      <param name="truePositiveLikelihood">
            The true positive likelihood or detection model. The PDF will be evaluated at <latex>#\{z\}=0</latex>.
            </param>
      <param name="falsePositiveLikelihood">
            The false positive likelihood or clutter model. The PDF will be evaluated at <latex>#\{z\}=0</latex>.
            </param>
      <param name="elements">The elements which are associated to the object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="truePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="falsePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="elements" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentException">
            The length of <paramref name="elements" /> is greater than one.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.SPRT`1.GetElementsLikelihood">
      <summary>
            Gets the likelihood of the associated elements conditioned on the existence of the object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.SPRT`1.GetHypotheses">
      <summary>
            Gets the true positive hypotheses.
            </summary>
      <returns>
            A collection of classification hypothesis where each hypothesis provides one possible solution
            to the question which of the associated elements of type <typeparamref name="TSpace" /> are considered to be the
            true elements (or true positives), e.g. measurements which are generated 
            by an object through a measurement process
            (see <see cref="T:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2" />).
            </returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.SPRT`2">
      <summary>
            Generates one true positive hypothesis for a given object specified by an incomplete likelihood
            and at most one associated measurement with additional information.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the measurement space.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.SPRT`2.#ctor(Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},`1},Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},`1},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Association.ExtendedMeasurement{`0,`1}})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.SPRT`2" /> class.
            </summary>
      <param name="incompleteTruePositiveLikelihood">
            The incomplete true positive likelihood or detection model.
            The completed PDF will be evaluated at <latex>#\{z\}=0</latex>.
            </param>
      <param name="incompleteFalsePositiveLikelihood">
            The false positive likelihood or clutter model.
            The completed PDF will be evaluated at <latex>#\{z\}=0</latex>.
            </param>
      <param name="extendedMeasurements">
            The measurements extended with additional information which are associated to the object.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="incompleteTruePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="incompleteFalsePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="extendedMeasurements" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentException">
            The length of <paramref name="extendedMeasurements" /> is greater than one.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.SPRT`2.#ctor(Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},`1},Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.CardinalitySpace},`1},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.SPRT`2" /> class.
            </summary>
      <param name="incompleteTruePositiveLikelihood">
            The incomplete true positive likelihood or detection model.
            The completed PDF will be evaluated at <latex>#\{z\}=0</latex>.
            </param>
      <param name="incompleteFalsePositiveLikelihood">
            The false positive likelihood or clutter model.
            The completed PDF will be evaluated at <latex>#\{z\}=0</latex>.
            </param>
      <param name="measurements">
            The measurements which are associated to the object.
            </param>
      <param name="additionalInformation">
            A collection with additional information to each measurement in <paramref name="measurements" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="incompleteTruePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="incompleteFalsePositiveLikelihood" /> is <c>null</c><para>or</para><paramref name="measurements" /> is <c>null</c><para>or</para><paramref name="additionalInformation" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentException">
            The length of <paramref name="measurements" /> is greater than one.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.SPRT`2.GetElementsLikelihood">
      <summary>
            Gets the likelihood of the associated elements conditioned on the existence of the object.
            </summary>
      <returns>The likelihood of the associated elements.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.SPRT`2.GetHypotheses">
      <summary>
            Gets the true positive hypotheses.
            </summary>
      <returns>
            A collection of classification hypothesis where each hypothesis provides one possible solution
            to the question which of the associated elements of type <typeparamref name="TSpace" /> are considered to be the
            true elements (or true positives), e.g. measurements which are generated 
            by an object through a measurement process
            (see <see cref="T:Baselabs.Statistics.Models.AdditiveNoise.MeasurementModel`2" />).
            </returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.TrackToTrackAssociation">
      <summary>
            Provides static methods for the creation of <see cref="T:Baselabs.Statistics.Tracking.Association.TrackToTrackAssociation`1" /> instances.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.TrackToTrackAssociation.Create``1(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.Gaussian{``0}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.Gaussian{``0}},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{Baselabs.Statistics.Distributions.Gaussian{``0},Baselabs.Statistics.Distributions.Gaussian{``0}},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Creates a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.TrackToTrackAssociation`1" /> class.
            </summary>
      <param name="tracks1">The first track list.</param>
      <param name="tracks2">The second track list.</param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">The optional gate.</param>
      <param name="factoryProvider">
            The factory that is used to create the association table. Passing <c>null</c> is equivalent
            to passing an instance of <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />.
            </param>
      <returns>The created instance.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.TrackToTrackAssociation.Create``1(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.Gaussian{``0}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.Gaussian{``0}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace}},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{Baselabs.Statistics.Distributions.Gaussian{``0},Baselabs.Statistics.Distributions.Gaussian{``0}},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Creates a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.TrackToTrackAssociation`1" /> class using the
            specified track lists and their according existences.
            </summary>
      <param name="tracks1">The first track list.</param>
      <param name="existences1">The existences of the first track list.</param>
      <param name="tracks2">The second track list.</param>
      <param name="existences2">The existences of the second track list.</param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">The optional gate.</param>
      <param name="factoryProvider">
                The factory that is used to create the association table. Passing <c>null</c> is equivalent
                to passing an instance of <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />.
            </param>
      <returns>The created instance.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="existences1" /> is <c>null</c><para>or</para><paramref name="existences2" /> is <c>null</c><para>or</para><paramref name="associationAlgorithm" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentException">
            The lengths of <paramref name="tracks1" /> and <paramref name="existences1" /> are not equal
            <para>or</para>
            the lengths of <paramref name="tracks2" /> and <paramref name="existences2" /> are not equal.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.TrackToTrackAssociation`1">
      <summary>
            An association of a set of tracks to another set of tracks, both represented by <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" />
            distributions.
            </summary>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.TrackToTrackAssociation`1.#ctor(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.Gaussian{`0}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.Gaussian{`0}},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{Baselabs.Statistics.Distributions.Gaussian{`0},Baselabs.Statistics.Distributions.Gaussian{`0}},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.TrackToTrackAssociation`1" /> class.
            </summary>
      <param name="tracks1">The first track list.</param>
      <param name="tracks2">The second track list.</param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">The optional gate.</param>
      <param name="factoryProvider">
            The factory that is used to create the association table. Passing <c>null</c> is equivalent
            to passing an instance of <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />.
            </param>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.TrackToTrackAssociation`1.#ctor(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.Gaussian{`0}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.Gaussian{`0}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Distributions.IEvaluable{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace}},Baselabs.Statistics.Tracking.Association.IAssociationAlgorithm,Baselabs.Statistics.Tracking.Gating.IGate{Baselabs.Statistics.Distributions.Gaussian{`0},Baselabs.Statistics.Distributions.Gaussian{`0}},Baselabs.Statistics.Tracking.Association.IAssociationCollectionsFactoryProvider)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.TrackToTrackAssociation`1" /> class using the
            specified track lists and their according existences.
            </summary>
      <param name="tracks1">The first track list.</param>
      <param name="existences1">The existences of the first track list.</param>
      <param name="tracks2">The second track list.</param>
      <param name="existences2">The existences of the second track list.</param>
      <param name="associationAlgorithm">The association algorithm.</param>
      <param name="gate">The optional gate.</param>
      <param name="factoryProvider">
                The factory that is used to create the association table. Passing <c>null</c> is equivalent
                to passing an instance of <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" />.
            </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="existences1" /> is <c>null</c><para>or</para><paramref name="existences2" /> is <c>null</c><para>or</para><paramref name="associationAlgorithm" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentException">
            The lengths of <paramref name="tracks1" /> and <paramref name="existences1" /> are not equal
            <para>or</para>
            the lengths of <paramref name="tracks2" /> and <paramref name="existences2" /> are not equal.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Association.TruePositivesHypothesis`1">
      <summary>
            A two class classification hypothesis described by its true positives and a hypothesis weight.
            </summary>
      <typeparam name="T">The type of the element.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.TruePositivesHypothesis`1.#ctor(System.Double,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Association.TruePositivesHypothesis`1" /> class.
            </summary>
      <param name="weight">The weight of the hypothesis.</param>
      <param name="elements">
            The true elements, e.g. measurements which are generated by an object through a measurement process.
            </param>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.TruePositivesHypothesis`1.Elements">
      <summary>
            Gets the true positives, e.g. measurements which are generated by an object through a measurement process.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Association.TruePositivesHypothesis`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Association.TruePositivesHypothesis`1.Weight">
      <summary>
            Gets the weight of the hypothesis.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Collections.AssociationTable">
      <summary>
            Represents a strongly typed association table.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Collections.AssociationTable.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Collections.AssociationTable" /> class.
            </summary>
      <param name="rows">The number of rows the table contains.</param>
      <param name="columns">The number of columns the table contains.</param>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.AssociationTable.Columns">
      <summary>
            Gets the number of columns.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.AssociationTable.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the similarity measure at the specified position.
            </summary>
      <param name="row">The row of the table, i.e. the index of the first object.</param>
      <param name="column">The column of the table, i.e. the index of the second object.</param>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.AssociationTable.Rows">
      <summary>
            Gets the number of rows.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Collections.DynamicAssociationTableFactory">
      <summary>
            A factory for association tables with unlimited maximum row and column count.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Collections.DynamicAssociationTableFactory.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Tracking.Collections.DynamicAssociationTableFactory</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Collections.DynamicAssociationTableFactory.CreateInstance(System.Int32,System.Int32)">
      <summary>
            Creates an association table.
            </summary>
      <param name="rows">The number of rows of the association table.</param>
      <param name="columns">The number of columns of the association table.</param>
      <returns>The association table.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.DynamicAssociationTableFactory.MaximumColumns">
      <summary>
            Gets the maximum number of columns.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.DynamicAssociationTableFactory.MaximumRows">
      <summary>
            Gets the maximum number of rows.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider">
      <summary>
            A provider for dynamic collection factories that are used in tracking algorithms.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider.AssociationTableFactory">
      <summary>
            Gets the association table factory.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider.HypothesisListFactory">
      <summary>
            Gets the hypothesis list factory.
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider.Instance">
      <summary>
            An instance of the <see cref="T:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider" /> class.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider.MeasurementListFactory">
      <summary>
            Gets the measurement list factory.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider.Objects1ListFactory">
      <summary>
            Gets the factory for lists that hold the first object set.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider.Objects2ListFactory">
      <summary>
            Gets the factory for lists that hold the second object set.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider.TrackListFactory">
      <summary>
            Gets the track list factory.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.DynamicTrackingCollectionsFactoryProvider.TrueElementsListFactory">
      <summary>
            Gets the true elements list factory.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Collections.IAssociationTable">
      <summary>
            Describes an association table.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.IAssociationTable.Columns">
      <summary>
            Gets the number of columns.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.IAssociationTable.Item(System.Int32,System.Int32)">
      <summary>
            Gets or sets the similarity measure at the specified position.
            </summary>
      <param name="row">The row of the table, i.e. the index of the first object.</param>
      <param name="column">The column of the table, i.e. the index of the second object.</param>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.IAssociationTable.Rows">
      <summary>
            Gets the number of rows.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Collections.IAssociationTableFactory">
      <summary>
            Describes a factory that creates association tables.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Collections.IAssociationTableFactory.CreateInstance(System.Int32,System.Int32)">
      <summary>
            Creates an association table.
            </summary>
      <param name="rows">The number of rows of the association table.</param>
      <param name="columns">The number of columns of the association table.</param>
      <returns>The association table.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.IAssociationTableFactory.MaximumColumns">
      <summary>
            Gets the maximum number of columns.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.IAssociationTableFactory.MaximumRows">
      <summary>
            Gets the maximum number of rows.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Collections.IMeasurementListFactoryProvider">
      <summary>
            Describes a provider for a factory that creates a list of measurements.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.IMeasurementListFactoryProvider.MeasurementListFactory">
      <summary>
            Gets the measurement list factory.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Collections.ITrackingCollectionsFactoryProvider">
      <summary>
            Describes a provider for a set of collection factories that are used in tracking algorithms.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Collections.ITrackListFactoryProvider">
      <summary>
            Describes a provider for a factory that creates a list of tracks.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.ITrackListFactoryProvider.TrackListFactory">
      <summary>
            Gets the track list factory.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Collections.StaticAssociationTableFactory">
      <summary>
            A factory for association tables with a known maximum number of rows and columns.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Collections.StaticAssociationTableFactory.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Collections.StaticAssociationTableFactory" /> class.
            </summary>
      <param name="maximumRows">The maximum number of rows.</param>
      <param name="maximumColumns">The maximum number of columns.</param>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Collections.StaticAssociationTableFactory.CreateInstance(System.Int32,System.Int32)">
      <summary>
            Creates an association table.
            </summary>
      <param name="rows">The number of rows of the association table.</param>
      <param name="columns">The number of columns of the association table.</param>
      <returns>The association table.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.StaticAssociationTableFactory.MaximumColumns">
      <summary>
            Gets the maximum number of columns.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.StaticAssociationTableFactory.MaximumRows">
      <summary>
            Gets the maximum number of rows.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Collections.StaticIPDATrackingCollectionsFactoryProvider">
      <summary>
            A provider for static collection factories where the maximum sizes of the collections fit the
            requirements of an IPDA tracking algorithm.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Collections.StaticIPDATrackingCollectionsFactoryProvider.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Collections.StaticIPDATrackingCollectionsFactoryProvider" /> class.
            </summary>
      <param name="maximumTrackCount">The maximum number of tracks.</param>
      <param name="maximumMeasurementCount">The maximum number of measurements.</param>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.StaticIPDATrackingCollectionsFactoryProvider.AssociationTableFactory">
      <summary>
            Gets the association table factory.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.StaticIPDATrackingCollectionsFactoryProvider.HypothesisListFactory">
      <summary>
            Gets the hypothesis list factory.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.StaticIPDATrackingCollectionsFactoryProvider.MeasurementListFactory">
      <summary>
            Gets the measurement list factory.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.StaticIPDATrackingCollectionsFactoryProvider.Objects1ListFactory">
      <summary>
            Gets the factory for lists that hold the first object set.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.StaticIPDATrackingCollectionsFactoryProvider.Objects2ListFactory">
      <summary>
            Gets the factory for lists that hold the second object set.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.StaticIPDATrackingCollectionsFactoryProvider.TrackListFactory">
      <summary>
            Gets the track list factory.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Collections.StaticIPDATrackingCollectionsFactoryProvider.TrueElementsListFactory">
      <summary>
            Gets the true elements list factory.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Distributions.Existence">
      <summary>
            A two point distribution representing the existence of an object.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Distributions.Existence.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Distributions.Existence" /> class with an existence probability of 0.5.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Distributions.Existence.#ctor(Baselabs.Statistics.Distributions.TwoPointDistribution{Baselabs.Statistics.Tracking.Spaces.ExistenceSpace})">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Distributions.Existence" /> class with the same existence probability
            as the specified <see cref="T:Baselabs.Statistics.Distributions.TwoPointDistribution`1" />.
            </summary>
      <param name="twoPointDistribution">The two point distribution.</param>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Distributions.Existence.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Distributions.Existence" /> class with the specified existence probability.
            </summary>
      <param name="existenceProbability">The existence probability.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="existenceProbability" /> is less than or equal to 0, greater than or equal to 1, is infinite or is NaN.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Distributions.Existence.ExistenceProbability">
      <summary>
            Gets or sets the existence probability.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than or equal to 0, greater than or equal to 1, is infinite or is NaN.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution`2">
      <summary>
            Represents an incomplete distribution, i.e. a distribution that needs some additional information
            to be completed.
            </summary>
      <typeparam name="TDistribution">The type of the distribution.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution`2.Complete(`1)">
      <summary>
            Completes the distribution using the specified additional information.
            </summary>
      <param name="additionalInformation">The additional information.</param>
      <returns>The completed distribution.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution`2.CompleteWithoutInformation">
      <summary>
            Completes the distribution without any additional information.
            </summary>
      <returns>The completed distribution.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Distributions.IncompleteDistribution">
      <summary>
            Provides extension methods for the <see cref="T:Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution`2" />
            interface.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Distributions.IncompleteDistribution.Marginalize``5(Baselabs.Statistics.Tracking.Distributions.IIncompleteDistribution{``1,``4},``3)">
      <summary>
            Marginalizes the specified incomplete conditional distribution with at least one condition over the
            distribution of the first condition.
            </summary>
      <param name="incompleteConditionalDistribution">The incomplete conditional distribution that is marginalized.</param>
      <param name="condition">The probability distribution of the condition over which is marginalized.</param>
      <typeparam name="TSpace">The type of the space.</typeparam>
      <typeparam name="TConditional">The type of the conditional.</typeparam>
      <typeparam name="TConditionSpace">The type of the condition space.</typeparam>
      <typeparam name="TCondition">The type of the condition.</typeparam>
      <typeparam name="TAdditionalInformation">The type of the additional information.</typeparam>
      <returns>
            The incomplete marginal probability distribution.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="incompleteConditionalDistribution" /> is <c>null</c><para>or</para><paramref name="condition" /> is <c>null</c>.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Distributions.MeasurementSetLikelihood">
      <summary>
            A conditional distribution for the likelihood of a measurement set conditioned on the existence of the
            object that generated the measurements.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Distributions.MeasurementSetLikelihood.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Distributions.MeasurementSetLikelihood" /> class.
            </summary>
      <param name="likelihoodGivenExistent">The likelihood given the object is existent.</param>
      <param name="likelihoodGivenNonExistent">The likelihood given the object is non-existent.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="likelihoodGivenExistent" /> is less than zero
            or
            <paramref name="likelihoodGivenNonExistent" /> is less than zero.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Distributions.MeasurementSetLikelihood.Condition">
      <summary>
            Sets the condition.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Distributions.MeasurementSetLikelihood.Evaluate">
      <summary>
            Evaluates the value of the measurement set likelihood based on the <see cref="P:Baselabs.Statistics.Tracking.Distributions.MeasurementSetLikelihood.Condition" />.
            </summary>
      <returns>The value of the measurement set likelihood.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Distributions.MeasurementSetLikelihood.ToString">
      <summary></summary>
      <returns></returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Gating.Gate`2">
      <summary>
                Represents a gate around the first object and determines whether a second object is inside this gate.
            </summary>
      <typeparam name="T1">The type of the first object.</typeparam>
      <typeparam name="T2">The type of the second object.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Gating.Gate`2.#ctor(Baselabs.Statistics.Tracking.Gating.IMetric{`0,`1},System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Gating.Gate`2" /> class.
            </summary>
      <param name="metric">The metric, i.e. the distance between the objects.</param>
      <param name="maximumDistance">The maximum distance for that the second object is inside the gate.</param>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Gating.Gate`2.IsInside(`0,`1)">
      <summary>
                Determines whether the second object is inside the gate of the first object or vice versa.
            </summary>
      <param name="object1">The first object.</param>
      <param name="object2">The second object.</param>
      <returns>
        <c>true</c> if the second object is inside the gate of the first object or vice versa;
                otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Gating.Gate`2.MaximumDistance">
      <summary>
                Gets the maximum distance for that the second object is inside the gate.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Gating.GaussianGate`1">
      <summary>
                A gate which uses the Mahalanobis distance between a <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" /> and a sample
                as the metric.
            </summary>
      <typeparam name="TSpace">The type of the space for the sample and the distribution.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Gating.GaussianGate`1.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Gating.GaussianGate`1" /> class.
            </summary>
      <param name="maxSquaredMahalanobisDistance">
                The maximum squared Mahalanobis distance for that a sample is inside the gate.
            </param>
      <param name="gateProbability">The gate probability (see <see cref="P:Baselabs.Statistics.Tracking.Gating.GaussianGate`1.GateProbability" />).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxSquaredMahalanobisDistance" /> is less than zero
            or
            <paramref name="gateProbability" /> is less than zero or greater than one.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Gating.GaussianGate`1.GateProbability">
      <summary>
                Gets the gate probability.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Gating.GaussianGate`1.GetHyperVolume(Baselabs.Statistics.Distributions.Gaussian{`0})">
      <summary>
                Gets the hypervolume of the gate.
            </summary>
      <param name="distribution">The distribution.</param>
      <returns>The hypervolume of the gate.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Gating.IGate`2">
      <summary>
                Represents a gate around object 1 and a method that determines
                if object 2 is inside that gate or vice versa.
            </summary>
      <typeparam name="T1">The type of the first object.</typeparam>
      <typeparam name="T2">The type of the second object.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Gating.IGate`2.IsInside(`0,`1)">
      <summary>
                Determines whether the second object is inside the gate of the first object or vice versa.
            </summary>
      <param name="object1">The first object.</param>
      <param name="object2">The second object.</param>
      <returns>
        <c>true</c> if the second object is inside the gate of the first object or vice versa;
                otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Gating.IMetric`2">
      <summary>
            Describes a metric between two objects.
            </summary>
      <typeparam name="T1">The type of the first object.</typeparam>
      <typeparam name="T2">The type of the second object.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Gating.IMetric`2.GetMetric(`0,`1)">
      <summary>
            Gets the metric, i.e. a distance measure between two objects.
            </summary>
      <param name="object1">The first object.</param>
      <param name="object2">The second object.</param>
      <returns>
            The metric between the two objects. The lower the metric, the nearer the objects are.
            </returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Gating.MahalanobisDistanceGate`1">
      <summary>
                Defines a <see cref="T:Baselabs.Statistics.Tracking.Gating.GaussianGate`1" /> by its Mahalanobis distance.
            </summary>
      <typeparam name="TSpace">The type of the space for the sample and the distribution.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Gating.MahalanobisDistanceGate`1.#ctor(System.Double)">
      <summary>
                Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Gating.MahalanobisDistanceGate`1" /> class.
            </summary>
      <param name="maxSquaredMahalanobisDistance">
                The maximum squared Mahalanobis distance for that a sample is inside the gate.
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Gating.ProbabilityGate`1">
      <summary>
                Defines a <see cref="T:Baselabs.Statistics.Tracking.Gating.GaussianGate`1" /> by its gate probability.
            </summary>
      <typeparam name="TSpace">The type of the space for the sample and the distribution.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Gating.ProbabilityGate`1.#ctor(System.Double)">
      <summary>
                Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Gating.ProbabilityGate`1" /> class.
            </summary>
      <param name="gateProbability">The gate probability.</param>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Gating.TwoGaussiansGate`1">
      <summary>
                A gate which checks whether the Mahalanobis distance between two
                <see cref="T:Baselabs.Statistics.Distributions.Gaussian`1" /> distributions is less than or equal to a maximum value.
            </summary>
      <typeparam name="TSpace">The type of the space for the distributions.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Gating.TwoGaussiansGate`1.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Gating.TwoGaussiansGate`1" /> class.
            </summary>
      <param name="maxSquaredMahalanobisDistance">
                The maximum squared Mahalanobis distance for that the second object
                is inside the gate of the first object.
            </param>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Management.ClutterRemover`1">
      <summary>
            A clutter remover that uses the track existence to determine whether a track should be deleted.
            </summary>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.ClutterRemover`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Management.ClutterRemover`1" /> class
            with the default value of minimum existence probability.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.ClutterRemover`1.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Management.ClutterRemover`1" /> class
            with the given value of minimum existence probability.
            </summary>
      <param name="minimumExistenceProbability">The minimum value for existence probability.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="minimumExistenceProbability" /> to be set is not between zero and one.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.ClutterRemover`1.MinimumExistenceProbability">
      <summary>
            Gets or sets the minimum existence probability.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value" /> to be set is not between zero and one.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.ClutterRemover`1.ShouldRemove(Baselabs.Statistics.Tracking.Tracks.GaussianTrack{`0})">
      <summary>
            Evaluates whether the track has to be removed from the list.
            </summary>
      <param name="track">Gaussian track to be evaluated.</param>
      <returns>Boolean variable indicating whether the track has to be removed from the list.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Management.OutOfViewCEPRemover`1">
      <summary>
            An out of view track remover that uses the estimate of the Circular Error Probability from the track's position covariance
            to determine whether the track should be deleted.
            </summary>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.OutOfViewCEPRemover`1.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Baselabs.Statistics.Tracking.Management.OutOfViewCEPRemover`1" /> class
            with the default maximum CEP value.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.OutOfViewCEPRemover`1.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Management.OutOfViewCEPRemover`1" /> class with the
            given maximum CEP value.
            </summary>
      <param name="maximumPositionCEP">The maximum CEP value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value of the maximum CEP is less than zero, is infinite or is NaN.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.OutOfViewCEPRemover`1.MaximumPositionCEP">
      <summary>
            Gets or sets the maximum CEP.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value of the maximum CEP is less than zero, is infinite or is NaN.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.OutOfViewCEPRemover`1.ShouldRemove(Baselabs.Statistics.Tracking.Tracks.GaussianTrack{`0})">
      <summary>
            Evaluates whether the track has to be removed from the list.
            </summary>
      <param name="track">Gaussian track to be evaluated.</param>
      <returns>Boolean variable indicating whether the track has to be removed from the list.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Management.OutOfViewDRMSRemover`1">
      <summary>
            An out of view track remover that uses the estimate of the Distance Root Mean Square (DRMS) from the track's position covariance 
            to determine whether the track should be deleted.
            </summary>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.OutOfViewDRMSRemover`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Management.OutOfViewDRMSRemover`1" /> class with the
            default maximum DRMS value.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.OutOfViewDRMSRemover`1.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Management.OutOfViewDRMSRemover`1" /> class with the
            given maximum DRMS.
            </summary>
      <param name="maximumDrms">The maximum DRMS value.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The maximum DRMS is less than zero, is infinite or is NaN.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.OutOfViewDRMSRemover`1.MaximumDRMS">
      <summary>
            Gets or sets the maximum DRMS.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The maximum DRMS is less than zero, is infinite or is NaN.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.OutOfViewDRMSRemover`1.ShouldRemove(Baselabs.Statistics.Tracking.Tracks.GaussianTrack{`0})">
      <summary>
            Evaluates whether the track has to be removed from the list.
            </summary>
      <param name="track">Gaussian track to be evaluated.</param>
      <returns>Boolean variable indicating whether the track has to be removed from the list.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Management.OutOfViewEnclosingCircleRemover`1">
      <summary>
            An out of view track remover which uses the estimate of the smallest enclosing circle from the track's position
            covariance to determine whether the track should be deleted.
            </summary>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.OutOfViewEnclosingCircleRemover`1.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Baselabs.Statistics.Tracking.Management.OutOfViewEnclosingCircleRemover`1" /> class
            with 10 meters as the maximum diameter of the smallest enclosing circle.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.OutOfViewEnclosingCircleRemover`1.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Management.OutOfViewEnclosingCircleRemover`1" /> class
            with the given value for the maximum diameter of the smallest enclosing circle.
            </summary>
      <param name="minumumEnclosingCircle">The maximum diameter of the smallest enclosing circle.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The maximum diameter of the smallest enclosing circle is less than zero, is infinite or is NaN..
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.OutOfViewEnclosingCircleRemover`1.MinumumEnclosingCircle">
      <summary>
            Gets or sets the maximum diameter of the smallest enclosing circle.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The maximum diameter of the smallest enclosing circle is less than zero, is infinite or is NaN..
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.OutOfViewEnclosingCircleRemover`1.ShouldRemove(Baselabs.Statistics.Tracking.Tracks.GaussianTrack{`0})">
      <summary>
            Evaluates whether the track has to be removed from the list.
            </summary>
      <param name="track">Gaussian track to be evaluated.</param>
      <returns>Boolean variable indicating whether the track has to be removed from the list.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Management.OutOfViewRemover`1">
      <summary>
            An out of view track remover that uses the position covariance of a track to determine whether the track should
            be deleted.
            </summary>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.OutOfViewRemover`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Management.OutOfViewRemover`1" /> class with the
            default values of maximum track position standard deviations for X and Y directions.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.OutOfViewRemover`1.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Management.OutOfViewRemover`1" /> class with the
            given maximum standard deviation track's position for both X and Y directions.
            </summary>
      <param name="maximumPositionStandardDeviation">The maximum standard deviation of the track's position in X and Y direction.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The maximum standard deviation of the track's position in X direction is less than zero, is infinite or is NaN.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The maximum standard deviation of the track's position in Y direction is less than zero, is infinite or is NaN.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.OutOfViewRemover`1.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Management.OutOfViewRemover`1" /> class with the
            given values of the maximum standard deviations of the track's position in X and Y directions.
            </summary>
      <param name="maximumPositionStandardDeviationXDirection">The maximum standard deviation of the track's position in X direction.</param>
      <param name="maximumPositionStandardDeviationYDirection">The maximum standard deviation of the track's position in Y direction.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The maximum standard deviation of the track's position in X direction is less than zero, is infinite or is NaN.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The maximum standard deviation of the track's position in Y direction is less than zero, is infinite or is NaN.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.OutOfViewRemover`1.MaximumPositionStandardDeviationXDirection">
      <summary>
            Gets or sets the maximum standard deviation of the track position in X direction.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The maximum standard deviation of the track's position in X direction is less than zero, is infinite or is NaN.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.OutOfViewRemover`1.MaximumPositionStandardDeviationYDirection">
      <summary>
            Gets or sets the maximum standard deviation of the track's position in Y direction.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The maximum standard deviation of the track's position in Y direction is less than zero, is infinite or is NaN.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.OutOfViewRemover`1.ShouldRemove(Baselabs.Statistics.Tracking.Tracks.GaussianTrack{`0})">
      <summary>
            Evaluates whether the track has to be removed from the list.
            </summary>
      <param name="track">Gaussian track to be evaluated.</param>
      <returns>Boolean variable indicating whether the track has to be removed from the list.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2">
      <summary>
            A base class for track proposers that create tracks from a radar measurement.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.EgoAngularRate">
      <summary>
            Gets or sets the ego angular rate <latex>\omega_e</latex> of the radar sensor around its z-axis. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.EgoVelocity">
      <summary>
            Gets or sets the ego velocity magnitude <latex>v_e</latex> of the radar sensor. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.GetState(Baselabs.Statistics.Distributions.Gaussian{`0},System.Double,System.Double)">
      <summary>
            Gets the state from the given measurement and the object's heading.
            </summary>
      <param name="measurementWithNoise">The measurement from which the Gaussian state is calculated from.</param>
      <param name="heading">The expectation value of the object's heading [rad].</param>
      <param name="sigmaHeading">The standard deviation of the object's heading [rad].</param>
      <returns>The state.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The standard deviation of the <paramref name="sigmaHeading" /> is smaller than or equal to zero.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.InflationSigmaPositionX">
      <summary>
            The standard deviation of the inflation noise for the position X component of the proposed track in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is less than zero, is infinite or not a number.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.InflationSigmaPositionY">
      <summary>
            The standard deviation of the inflation noise for the position Y component of the proposed track in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is less than zero, is infinite or not a number.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.InflationSigmaVelocity">
      <summary>
            The standard deviation of the inflation noise for the velocity component of the proposed track in m/s.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is less than zero, is infinite or not a number.</exception>
    </member>
    <member name="F:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.RadarIdxs">
      <summary>
            Provides the indexes of the radar space.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.RadarPositionX">
      <summary>
            The x-coordinate <latex>x_r</latex> of the position of the radar sensor in the global coordinate frame in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.RadarPositionY">
      <summary>
            The y-coordinate <latex>y_r</latex> of the position of the radar sensor in the global coordinate frame in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.RadarRotationZ">
      <summary>
            The rotation <latex>\varphi_r</latex> of the radar around its z-axis in radians. 
            A positive value is assumed for counterclockwise rotation.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than -π, greater than or equal to π, infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.SigmaAzimuth">
      <summary>
            The standard deviation of the radar's azimuth measurement noise in radians.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is less or equal to zero, is infinite or not a number.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.SigmaRange">
      <summary>
            The standard deviation of the radar's range measurement noise in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is less or equal to zero, is infinite or not a number.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.SigmaRangeRate">
      <summary>
            The standard deviation of the radar's range rate measurement noise in m/s.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is less or equal to zero, is infinite or not a number.</exception>
    </member>
    <member name="F:Baselabs.Statistics.Tracking.Management.RadarTrackProposer`2.StateIdxs">
      <summary>
            Provides the indexes of the state space.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2">
      <summary>
            A base class for proposing new tracks from a smart sensor measurement, ego motion information and the sensor setup.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.EgoAngularRate">
      <summary>
            Gets or sets the ego angular rate <latex>\omega_e</latex> of the smart sensor around its z-axis. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.EgoVelocity">
      <summary>
            Gets or sets the ego velocity magnitude <latex>v_e</latex> of the smart sensor. 
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.GetMovingObjectState(`0,System.Double,System.Double)">
      <summary>
            Gets the state of a moving object from the given <paramref name="measurement" />. 
            </summary>
      <param name="measurement">The measurement.</param>
      <param name="velocityInflationNoise">
            The standard deviation of the inflation noise for the velocity component of the proposed track in m/s. 
            The value will be used to inflate the corresponding variance component of the created track's covariance.
            </param>
      <param name="headingInflationNoise">
            The standard deviation of the inflation noise for the heading component of the proposed track in radians. 
            The value will be used to inflate the corresponding variance component of the created track's covariance.
            </param>
      <returns>The state of a moving object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="velocityInflationNoise" /> or <paramref name="headingInflationNoise" /> is smaller than zero.
            <remarks>
            Both <paramref name="velocityInflationNoise" /> and <paramref name="headingInflationNoise" /> are suggested to be relatively 
            large in order to compensate for typical inaccuracies of smart sensors.
            </remarks></exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.GetStateParts(`0,System.Double@,System.Double@,System.Double@,System.Double@)">
      <summary>
            Calculates the position and the absolute velocity from a given measurement.
            </summary>
      <param name="measurement">The measurement.</param>
      <param name="x">The x-coordinate of the position in meters.</param>
      <param name="y">The y-coordinate of the position in meters.</param>
      <param name="vx">The velocity in x-direction in m/s.</param>
      <param name="vy">The velocity in y-direction in m/s.</param>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.GetStationaryObjectState(`0,System.Double,System.Double,System.Double)">
      <summary>
            Gets the state of a stationary object from the given <paramref name="measurement" /> and <paramref name="heading" /> value. 
            </summary>
      <param name="measurement">The measurement.</param>
      <param name="heading">The heading value of the object.</param>
      <param name="sigmaHeading">
            The standard deviation of the noise for the heading component of the proposed track in radians. 
            The value will be used to set the corresponding variance component of the created track's covariance.
            </param>
      <param name="sigmaVelocity">
            The standard deviation of the noise for the velocity component of the proposed track in m/s. 
            The value will be used to set the corresponding variance component of the created track's covariance.
            </param>
      <returns>The state of a stationary object.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sigmaHeading" /> or <paramref name="sigmaVelocity" /> is smaller than or equal to zero.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.InflationSigmaPositionX">
      <summary>
            The standard deviation of the inflation noise for the position X component of the proposed track in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is less or equal to zero, is infinite or not a number.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.InflationSigmaPositionY">
      <summary>
            The standard deviation of the inflation noise for the position Y component of the proposed track in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is less or equal to zero, is infinite or not a number.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.SensorPositionX">
      <summary>
            The x-coordinate <latex>x_r</latex> of the position of the smart sensor in the global coordinate frame in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.SensorPositionY">
      <summary>
            The y-coordinate <latex>y_r</latex> of the position of the smart sensor in the global coordinate frame in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.SensorRotationZ">
      <summary>
            The rotation <latex>\varphi_r</latex> of the smart sensor around its z-axis in radians. 
            A positive value is assumed for counterclockwise rotation.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than -π, greater than or equal to π, infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.SigmaPositionX">
      <summary>
            The standard deviation of the X position measurement noise in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is less or equal to zero, is infinite or not a number.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.SigmaPositionY">
      <summary>
            The standard deviation of the Y position measurement noise in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is less or equal to zero, is infinite or not a number.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.SigmaVelocityX">
      <summary>
            The standard deviation of the X velocity measurement noise in m/s.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is less or equal to zero, is infinite or not a number.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.SigmaVelocityY">
      <summary>
            The standard deviation of the Y velocity measurement noise in m/s.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The value to set is less or equal to zero, is infinite or not a number.</exception>
    </member>
    <member name="F:Baselabs.Statistics.Tracking.Management.SmartSensorTrackProposer`2.StateIndices">
      <summary>
            The indexes of the state space.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Management.TrackProposer`2">
      <summary>
            A base class for implementing a track proposer.
            </summary>
      <typeparam name="TMeasurementSpace">The type of the state space.</typeparam>
      <typeparam name="TStateSpace">The type of the measurement space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.TrackProposer`2.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Tracking.Management.TrackProposer`2</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.TrackProposer`2.CreateTracks(`0)">
      <summary>
            Creates a collection of tracks from a measurement.
            </summary>
      <param name="measurement">The measurement of <typeparamref name="TMeasurementSpace" /> from which a collection of tracks is proposed.</param>
      <returns>A collection of Gaussian tracks.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Management.TrackRemover`1">
      <summary>
            A base class for implementing a track remover.
            </summary>
      <typeparam name="TStateSpace">The type of the state space.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.TrackRemover`1.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Tracking.Management.TrackRemover`1</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Management.TrackRemover`1.ShouldRemove(Baselabs.Statistics.Tracking.Tracks.GaussianTrack{`0})">
      <summary>
            Evaluates whether the track should be deleted.
            </summary>
      <param name="track">Gaussian track to be evaluated.</param>
      <returns>Boolean variable indicating whether the track should get deleted. The returned value <c>true</c> indicates 
            that the track has to be removed, while <c>false</c> indicates that the track should be kept.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel">
      <summary>
            An implementation of a birth and persistence model without state condition.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel" /> class with the specified birth
            and persistence probabilities.
            </summary>
      <param name="birthProbability">The birth probability.</param>
      <param name="persistenceProbability">The persistence probability.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="birthProbability" /> is less than zero or greater than one
            or
            the <paramref name="persistenceProbability" /> is less than zero or greater than one.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel.BirthProbability">
      <summary>
            Gets or sets the birth probability.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value" /> is less than zero or greater than one.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel.Condition">
      <summary>
            Sets the existence condition.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel.Evaluate(Baselabs.Statistics.Tracking.Spaces.ExistenceSpace)">
      <summary>
            Evaluates the birth and persistence model for the specified existence state regarding
            the values of the <see cref="P:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel.Condition" />.
            </summary>
      <param name="sample">The existence state.</param>
      <returns>The probability of the specified existence state regarding the condition.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel.PersistenceProbability">
      <summary>
            Gets or sets the persistence probability.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value" /> is less than zero or greater than one.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel`1">
      <summary>
            A base class for implementing a birth and persistence model with an additional state condition.
            </summary>
      <typeparam name="TSpace">The type of the state condition.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel`1" /> class.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel`1.Condition">
      <summary>
            Sets the existence condition.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel`1.Condition2">
      <summary>
            Sets the state condition.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel`1.Evaluate(Baselabs.Statistics.Tracking.Spaces.ExistenceSpace)">
      <summary>
            Evaluates the birth and persistence model for the specified existence state regarding
            the values of the conditions <see cref="P:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel`1.Condition" /> and <see cref="P:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel`1.Condition2" />.
            </summary>
      <param name="sample">The existence state.</param>
      <returns>The probability of the specified existence state regarding the conditions.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel`1.GetBirthProbability(`0)">
      <summary>
            Calculates the birth probability.
            </summary>
      <param name="state">The state at epoch k.</param>
      <returns>The birth probability.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.BirthPersistenceModel`1.GetPersistenceProbability(`0)">
      <summary>
            Calculates the persistence probability.
            </summary>
      <param name="state">The state at epoch k.</param>
      <returns>The persistence probability.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Models.ClutterModel`1">
      <summary>
            A base class for a clutter model with a state condition.
            </summary>
      <typeparam name="TSpace">The type of the state condition.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.ClutterModel`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.ClutterModel`1" /> class.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.ClutterModel`1.Condition">
      <summary>
            Sets the state condition.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.ClutterModel`1.Evaluate(Baselabs.Statistics.Tracking.Spaces.CardinalitySpace)">
      <summary>
            Evaluates the clutter model for the specified cardinality regarding the value of
            <see cref="P:Baselabs.Statistics.Tracking.Models.ClutterModel`1.Condition" />.
            </summary>
      <param name="sample">The clutter set cardinality.</param>
      <returns>
            The clutter probability regarding the value of
            <see cref="P:Baselabs.Statistics.Tracking.Models.ClutterModel`1.Condition" />.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.ClutterModel`1.GetClutterProbability(`0)">
      <summary>
            Calculates the clutter probability for the specified state condition.
            </summary>
      <param name="state">The state condition.</param>
      <returns>The clutter probability.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Models.DetectionAngleConverter">
      <summary>
            A type converter for the maximum detection angle values in radians.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.DetectionAngleConverter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Statistics.Tracking.Models.DetectionAngleConverter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.DetectionAngleConverter.CheckValueInRange(System.Double)">
      <summary>
            Checks whether <paramref name="value" /> is greater than or equal to 0 and less than π/2.
            </summary>
      <param name="value">The value to check.</param>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Models.DetectionModel`1">
      <summary>
            A base class for implementing a detection model with a state condition.
            </summary>
      <typeparam name="TSpace">The type of the state condition.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.DetectionModel`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.DetectionModel`1" /> class.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.DetectionModel`1.Condition">
      <summary>
            Sets the state condition.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.DetectionModel`1.Evaluate(Baselabs.Statistics.Tracking.Spaces.CardinalitySpace)">
      <summary>
            Evaluates the detection model for the specified measurement set cardinality regarding the value of
            <see cref="P:Baselabs.Statistics.Tracking.Models.DetectionModel`1.Condition" />.
            </summary>
      <param name="sample">The measurement set cardinality.</param>
      <returns>
            The detection probability of the specified cardinality regarding the value of
            <see cref="P:Baselabs.Statistics.Tracking.Models.DetectionModel`1.Condition" />.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.DetectionModel`1.GetDetectionProbability(Baselabs.Statistics.Tracking.Spaces.CardinalitySpace,`0)">
      <summary>
            Calculates the detection probability for the specified measurement set cardinality and state condition.
            </summary>
      <param name="sample">The cardinality of the measurement set.</param>
      <param name="state">The state condition.</param>
      <returns>The detection probability.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Models.MultipleDetectionsModel`1">
      <summary>
            A base class for implementing a detection model which assumes that multiple independent measurements can
            originate from one object and that is conditioned on the object's state.
            </summary>
      <typeparam name="TSpace">The type of the state condition.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.MultipleDetectionsModel`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.MultipleDetectionsModel`1" /> class
            with the gate probability equal to one.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.MultipleDetectionsModel`1.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.MultipleDetectionsModel`1" /> class with the
            specified gate probability.
            </summary>
      <param name="gateProbability">The gate probability.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="gateProbability" /> is less than zero or greater than one.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.MultipleDetectionsModel`1.GateProbability">
      <summary>
            Gets or sets the gate probability.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value" /> to be set is not between zero and one.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.MultipleDetectionsModel`1.GetDetectionProbability(Baselabs.Statistics.Tracking.Spaces.CardinalitySpace,`0)">
      <summary>
            Calculates the detection probability for the specified measurement set cardinality and state.
            </summary>
      <param name="sample">The cardinality of the measurement set.</param>
      <param name="state">The state.</param>
      <returns>The detection probability.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.MultipleDetectionsModel`1.GetDetectionProbability(`0)">
      <summary>
            Calculates the probability for one detection.
            </summary>
      <param name="state">The state.</param>
      <returns>The probability for one detection.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.MultipleDetectionsModel`1.GetNumberOfMeasurements(`0)">
      <summary>
            Gets the number of measurements.
            </summary>
      <param name="state">The state.</param>
      <returns>
            The number of measurements that are expected from the object.
            </returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Models.PersistenceModel">
      <summary>
            A persistence model with time-dependent process noise.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.PersistenceModel.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.PersistenceModel" /> class with zero
            <see cref="P:Baselabs.Statistics.Tracking.Models.PersistenceModel.ExistenceProcessNoise" />.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.PersistenceModel.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.PersistenceModel" /> class with the value of existence process noise.
            </summary>
      <param name="existenceProcessNoise">The existence process noise per second.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="existenceProcessNoise" /> is less than zero, infinite or is <c>NaN</c>.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.PersistenceModel.Condition">
      <summary>
            Sets the existence condition.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.PersistenceModel.Evaluate(Baselabs.Statistics.Tracking.Spaces.ExistenceSpace)">
      <summary>
            Evaluates the persistence model for the specified existence state regarding the values of the
            <see cref="P:Baselabs.Statistics.Tracking.Models.PersistenceModel.Condition" /> and the <see cref="P:Baselabs.Statistics.Tracking.Models.PersistenceModel.TimeCondition" />.
            </summary>
      <param name="sample">The existence state.</param>
      <returns>The likelihood of the specified existence state regarding the conditions.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.PersistenceModel.ExistenceProcessNoise">
      <summary>
            Gets or sets the existence process noise per second.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value" /> is less than zero, infinite or is <c>NaN</c>.
            </exception>
      <exception cref="T:System.InvalidOperationException">The existence process noise of the persistence model is not initialized.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.PersistenceModel.TimeCondition">
      <summary>
            Sets the time condition which gives the duration between the last and the current time step.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1">
      <summary>
            A base class for implementing a detection model of a smart sensor 
            that measures in Cartesian coordinates and whose field 
            of view is described in polar coordinates. 
            </summary>
      <typeparam name="TSpace">The space over which the detection model is defined.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1" /> class.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.DetectionAngle">
      <summary>
            Gets the current detection angle.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.GetDetectionProbability(`0)">
      <summary>
            Calculates the probability for one detection.
            </summary>
      <param name="state">The state condition.</param>
      <returns>The probability for one detection.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.GetDetectionProbabilityInsideFieldOfView(`0)">
      <summary>
            Calculates the detection probability for one detection inside the field of view.
            </summary>
      <param name="state">The detection whose detection probability should be returned and which is inside the field of view.</param>
      <returns>The probability for one detection at <paramref name="state" />.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.MaximumPhi">
      <summary>
            Gets or sets the maximum azimuth angle of the field of view in radians.
            A positive value is assumed for counterclockwise rotation.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than -π, greater than or equal to π, infinite or not a number.
            </exception>
      <exception cref="T:System.ArgumentException">
            The value to set is less than or equal to <see cref="P:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.MinimumPhi" />.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.MaximumRange">
      <summary>
            Gets or sets the maximum range of the field of view in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than zero, infinite or not a number.
            </exception>
      <exception cref="T:System.ArgumentException">
            The value to set is less than or equal to <see cref="P:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.MinimumRange" />.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.MinimumPhi">
      <summary>
            Gets or sets the minimum azimuth angle of the field of view in radians.
            A positive value is assumed for counterclockwise rotation.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than -π, greater than or equal to π, infinite or not a number.
            </exception>
      <exception cref="T:System.ArgumentException">
            The value to set is greater than or equal to <see cref="P:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.MaximumPhi" />.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.MinimumRange">
      <summary>
            Gets or sets the minimum range of the field of view in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than zero, infinite or not a number.
            </exception>
      <exception cref="T:System.ArgumentException">
            The value to set is greater than or equal to <see cref="P:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.MaximumRange" />.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.SensorPositionX">
      <summary>
            Gets or sets the X component of the sensor's mounting position in the coordinate system of the detections in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.SensorPositionY">
      <summary>
            Gets or sets the Y component of the sensor's mounting position in the coordinate system of the detections in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is infinite or not a number.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.PolarSmartSensorDetectionModel`1.SensorRotationZ">
      <summary>
            Gets or sets the smart sensor rotation around Z axis relative to the coordinate
            system of the detections in radians. A positive value is assumed for counterclockwise rotation.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than -π, greater than or equal to π, infinite or not a number.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Models.RadarDetectionModel`1">
      <summary>
            A base class for implementing a detection model of a sensor that measures in polar coordinates and
            where at maximum one measurement can originate from one object inside its field of view.
            The field of view is described by a circular ring sector with the sensor located at the origin.
            </summary>
      <typeparam name="TSpace">The space over which the detection model is defined.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.RadarDetectionModel`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.RadarDetectionModel`1" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.RadarDetectionModel`1.GetDetectionProbability(`0)">
      <summary>
            Calculates the probability for one detection.
            </summary>
      <param name="state">The state condition.</param>
      <returns>The probability for one detection.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.RadarDetectionModel`1.GetDetectionProbabilityInsideFieldOfView(`0)">
      <summary>
            Calculates the detection probability for one detection inside the field of view.
            </summary>
      <param name="state">The detection whose detection probability should be returned and which is inside the field of view.</param>
      <returns>The probability for one detection at <paramref name="state" />.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.RadarDetectionModel`1.MaximumPhi">
      <summary>
            Gets or sets the maximum azimuth angle of the field of view in radians.
            A positive value is assumed for counterclockwise rotation.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than -π, greater than or equal to π, infinite or not a number.
            </exception>
      <exception cref="T:System.ArgumentException">
            The value to set is less than or equal to <see cref="P:Baselabs.Statistics.Tracking.Models.RadarDetectionModel`1.MinimumPhi" />.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.RadarDetectionModel`1.MaximumRange">
      <summary>
            Gets or sets the maximum range of the field of view in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than zero, infinite or not a number.
            </exception>
      <exception cref="T:System.ArgumentException">
            The value to set is less than or equal to <see cref="P:Baselabs.Statistics.Tracking.Models.RadarDetectionModel`1.MinimumRange" />.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.RadarDetectionModel`1.MinimumPhi">
      <summary>
            Gets or sets the minimum azimuth angle of the field of view in radians. 
            A positive value is assumed for counterclockwise rotation.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than -π, greater than or equal to π, infinite or not a number.
            </exception>
      <exception cref="T:System.ArgumentException">
            The value to set is greater than or equal to <see cref="P:Baselabs.Statistics.Tracking.Models.RadarDetectionModel`1.MaximumPhi" />.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.RadarDetectionModel`1.MinimumRange">
      <summary>
            Gets or sets the minimum range of the field of view in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The value to set is less than zero, infinite or not a number.
            </exception>
      <exception cref="T:System.ArgumentException">
            The value to set is greater than or equal to <see cref="P:Baselabs.Statistics.Tracking.Models.RadarDetectionModel`1.MaximumRange" />.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Models.SingleDetectionModel`1">
      <summary>
            A base class for implementing a detection model where at maximum one measurement can originate from one object
            and that is conditioned on the object's state.
            </summary>
      <typeparam name="TSpace">The type of the state condition.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.SingleDetectionModel`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.SingleDetectionModel`1" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.SingleDetectionModel`1.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.SingleDetectionModel`1" /> class
            with the specified gate probability.
            </summary>
      <param name="gateProbability">The gate probability.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="gateProbability" /> to be set is not between zero and one.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.SingleDetectionModel`1.GateProbability">
      <summary>
            Gets or sets the gate probability.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value" /> to be set is less than zero, greater than one, is infinite or is NaN.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.SingleDetectionModel`1.GetDetectionProbability(Baselabs.Statistics.Tracking.Spaces.CardinalitySpace,`0)">
      <summary>
            Calculates the detection probability for the specified measurement set cardinality and state condition.
            </summary>
      <param name="sample">The cardinality of the measurement set.</param>
      <param name="state">The state condition.</param>
      <returns>The detection probability.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.SingleDetectionModel`1.GetDetectionProbability(`0)">
      <summary>
            Calculates the probability for one detection.
            </summary>
      <param name="state">The state condition.</param>
      <returns>The probability for one detection.</returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Models.SmartCameraDetectionModel`1">
      <summary>
             A base class for implementing a detection model of a smart camera with an arbitrary 2D pose.
             Its detection probability inside its field of view depends on the heading of the object.
            
             The model assumes that at maximum one detection can originate from one object inside its field of view.
             The field of view is described by a circular ring sector with the sensor located at the
             origin of the sector's coordinate system.
             </summary>
      <typeparam name="TSpace">The space over which the detection model is defined.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.SmartCameraDetectionModel`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.SmartCameraDetectionModel`1" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.SmartCameraDetectionModel`1.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.SmartCameraDetectionModel`1" /> class with the specified
            field of view, offsets, detection probability, gate probability and front and rear detection tolerance.
            </summary>
      <param name="detectionProbability">The detection probability.</param>
      <param name="gateProbability">The gate probability.</param>
      <param name="maxFrontDetectionAngle">The angle tolerance for detecting objects whose front is facing the sensor.</param>
      <param name="maxRearDetectionAngle">The angle tolerance for detecting objects whose rear is facing the sensor.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="detectionProbability" /> is not between zero and one
            <para>or</para><paramref name="gateProbability" /> is not between zero and one
            <para>or</para><paramref name="maxFrontDetectionAngle" /> is less than zero or greater than π/2
            <para>or</para><paramref name="maxRearDetectionAngle" /> is less than zero or greater than π/2.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.SmartCameraDetectionModel`1.DetectionProbability">
      <summary>
            Gets or sets the detection probability for one detection inside the field of view.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            The <paramref name="value" /> to be set is not between zero and one.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.SmartCameraDetectionModel`1.GetDetectionProbabilityInsideFieldOfView(`0)">
      <summary>
            Calculates the detection probability for a detection inside the field of view.
            </summary>
      <param name="state">The state whose detection probability should be determined.</param>
      <returns>
            The probability for one detection at <paramref name="state" />.
            </returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.SmartCameraDetectionModel`1.MaxFrontDetectionAngle">
      <summary>
            Gets or sets the angle that an object's heading can differ from directly facing the camera to be still detected.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="value" /> to be set is smaller than zero or larger than π/2.</exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.SmartCameraDetectionModel`1.MaxRearDetectionAngle">
      <summary>
            Gets or sets the maximum angle for detecting objects whose rear is facing the sensor.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="value" /> to be set is smaller than zero or larger than π/2.</exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Models.SmartSensorDetectionModel`1">
      <summary>
            A base class for implementing a detection model of a sensor which measures in Cartesian coordinates and
            where at maximum one measurement can originate from one object inside a field of view defined as a polygon.
            </summary>
      <typeparam name="TSpace">The space over which the detection model is defined.</typeparam>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.SmartSensorDetectionModel`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Models.SmartSensorDetectionModel`1" /> class.
            </summary>
      <param name="maxPolygonVerticesCount">The maximum allowed number of vertices in polygon.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maxPolygonVerticesCount" /> is less than 3.
            </exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.SmartSensorDetectionModel`1.GetDetectionProbability(`0)">
      <summary>
            Calculates the probability for one detection.
            </summary>
      <param name="state">The state condition.</param>
      <returns>The probability for one detection.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Models.SmartSensorDetectionModel`1.GetDetectionProbabilityInsideFieldOfView(`0)">
      <summary>
            Calculates the detection probability for one detection inside the field of view.
            </summary>
      <param name="state">The detection whose detection probability should be returned and which is inside the field of view.</param>
      <returns>The probability for one detection at <paramref name="state" />.</returns>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.SmartSensorDetectionModel`1.PolygonBoundary">
      <summary>
            Gets or sets the field of view boundary polygon with the coordinates of vertices given in meters.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
            One of the coordinates of the vertices in the boundary polygon <see cref="P:Baselabs.Statistics.Tracking.Models.SmartSensorDetectionModel`1.PolygonBoundary" /> is infinite or not a number 
            </exception>
      <exception cref="T:System.ArgumentException">
            The number of vertices in field of view boundary polygon <see cref="P:Baselabs.Statistics.Tracking.Models.SmartSensorDetectionModel`1.PolygonBoundary" /> is less than 3
            <para> or </para>
            the number of vertices in polygon <see cref="P:Baselabs.Statistics.Tracking.Models.SmartSensorDetectionModel`1.PolygonBoundary" /> is larger than the maximum 
            allowed number of vertices.
            </exception>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Models.SmartSensorDetectionModel`1.VerticesCount">
      <summary>
            Gets the number of vertices in the <see cref="P:Baselabs.Statistics.Tracking.Models.SmartSensorDetectionModel`1.PolygonBoundary" />.
            </summary>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace">
      <summary>
            A space for representing the cardinality.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace" /> class.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace.Cardinality">
      <summary>
            Gets or sets the cardinality.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">The cardinality is less than zero.</exception>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace.Create(System.Int32)">
      <summary>
            Creates an instance of <see cref="T:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace" /> with the specified cardinality.
            </summary>
      <param name="cardinality">The cardinality value.</param>
      <returns>
            An instance of <see cref="T:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace" /> with <see cref="P:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace.Cardinality" /> set to
            <paramref name="cardinality" />.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace.op_Implicit(Baselabs.Statistics.Tracking.Spaces.CardinalitySpace)~System.Int32">
      <summary>
            Converts the specified <see cref="T:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace" /> into an integer value.
            </summary>
      <param name="space">The cardinality space to convert.</param>
      <returns>The cardinality value.</returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace.op_Implicit(System.Int32)~Baselabs.Statistics.Tracking.Spaces.CardinalitySpace">
      <summary>
            Converts a cardinality value into a <see cref="T:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace" />.
            </summary>
      <param name="cardinality">The cardinality value.</param>
      <returns>
    
            An instance of <see cref="T:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace" /> with <see cref="P:Baselabs.Statistics.Tracking.Spaces.CardinalitySpace.Cardinality" /> set to
            <paramref name="cardinality" />.
            
  </returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Spaces.ExistenceSpace">
      <summary>
            A finite space for representing the two states of existence.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Spaces.ExistenceSpace.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Statistics.Tracking.Spaces.ExistenceSpace" /> class.
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Tracking.Spaces.ExistenceSpace.Existent">
      <summary>
            An instance of <see cref="T:Baselabs.Statistics.Tracking.Spaces.ExistenceSpace" /> representing the existent state.
            </summary>
    </member>
    <member name="F:Baselabs.Statistics.Tracking.Spaces.ExistenceSpace.NonExistent">
      <summary>
            An instance of <see cref="T:Baselabs.Statistics.Tracking.Spaces.ExistenceSpace" /> representing the non-existent state.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Spaces.ExistenceSpace.op_Implicit(Baselabs.Statistics.Tracking.Spaces.ExistenceSpace)~System.Boolean">
      <summary>
            Converts the specified <see cref="T:Baselabs.Statistics.Tracking.Spaces.ExistenceSpace" /> into a <see cref="T:System.Boolean" />.
            </summary>
      <param name="space">The existence space.</param>
      <returns>
        <c>true</c> if the <paramref name="space" /> has the state "existent"; <c>false</c>, otherwise.
            </returns>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Spaces.ExistenceSpace.op_Implicit(System.Boolean)~Baselabs.Statistics.Tracking.Spaces.ExistenceSpace">
      <summary>
            Converts the specified <see cref="T:System.Boolean" /> into an <see cref="T:Baselabs.Statistics.Tracking.Spaces.ExistenceSpace" />.
            </summary>
      <param name="existent">
            The existence; <c>true</c> means "existent", <c>false</c> means "non-existent".
            </param>
      <returns>
        <see cref="F:Baselabs.Statistics.Tracking.Spaces.ExistenceSpace.Existent" /> if <paramref name="existent" /> is <c>true</c>,
            <see cref="F:Baselabs.Statistics.Tracking.Spaces.ExistenceSpace.NonExistent" /> if <paramref name="existent" /> is <c>false</c>.
            </returns>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Tools.Comparer">
      <summary>
            Provides methods to test track lists for equality.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Tools.Comparer.Equals``1(System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Tracks.GaussianTrack{``0}},System.Collections.Generic.IEnumerable{Baselabs.Statistics.Tracking.Tracks.GaussianTrack{``0}},System.Double,System.Double,System.UInt32)">
      <summary>
            Tests the specified track lists for equality.
            </summary>
      <param name="tracks1">The first track list.</param>
      <param name="tracks2">The second track list.</param>
      <param name="maximumRootJSD">
            The maximum value of the square root of the Jensen-Shannon divergence between two states or PDFs.
            The value must be in the interval [0, 1]. A value of 0 means that the PDFs have to be identical,
            a value of 1 leads to a <c>true</c> result for any pair of PDFs.</param>
      <param name="falseAssociationProbability">
            The probability for the association of non-equal tracks.
            A value of 0 means that the PDFs have to be identical to be associated,
            a value of 1 allows totally different tracks to be associated.</param>
      <param name="samples">The number of samples which are used for the calculation.</param>
      <typeparam name="TSpace">The type of the state space of the track lists.</typeparam>
      <returns>
        <c>true</c> if the track lists represent the same multiple object state, otherwise <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tracks1" /> or
            <para /><paramref name="tracks2" /> are null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumRootJSD" /> is less than zero
            <para>or</para><paramref name="maximumRootJSD" /> is greater than one
            <para>or</para><paramref name="falseAssociationProbability" /> is less than zero
            <para>or</para><paramref name="falseAssociationProbability" /> is greater than one.
            </exception>
      <exception cref="T:System.ArgumentException">
            At least one element of tracks1 is null.
            or
            At least one element of tracks2 is null.
            </exception>
    </member>
    <member name="T:Baselabs.Statistics.Tracking.Tracks.GaussianTrack`1">
      <summary>
            A track with a Gaussian state representation.
            </summary>
      <typeparam name="TSpace">The type of the state space.</typeparam>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Tracks.GaussianTrack`1.Existence">
      <summary>
            Gets the existence.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Tracks.GaussianTrack`1.ID">
      <summary>
            Gets the ID.
            </summary>
    </member>
    <member name="P:Baselabs.Statistics.Tracking.Tracks.GaussianTrack`1.State">
      <summary>
            Gets the state.
            </summary>
    </member>
    <member name="M:Baselabs.Statistics.Tracking.Tracks.GaussianTrack`1.ToString">
      <summary></summary>
      <returns></returns>
    </member>
  </members>
</doc>