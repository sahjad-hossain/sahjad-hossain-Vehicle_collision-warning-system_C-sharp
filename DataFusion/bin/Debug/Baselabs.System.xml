<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Baselabs.System</name>
  </assembly>
  <members>
    <member name="T:Baselabs.LatexAttribute">
      <summary>
            Indicates that a class, property, field, or method has a <latex>\LaTeX</latex> expression.
            </summary>
    </member>
    <member name="M:Baselabs.LatexAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.LatexAttribute" /> class.
            </summary>
      <param name="latexExpression">The latex expression.</param>
    </member>
    <member name="P:Baselabs.LatexAttribute.LatexExpression">
      <summary>
            Gets the latex expression.
            </summary>
    </member>
    <member name="T:Baselabs.Collections.ArrayExtensions">
      <summary>
            Provides extensions for the <see cref="T:System.Array" /> class.
            </summary>
    </member>
    <member name="M:Baselabs.Collections.ArrayExtensions.Initialize``1(``0[],``0)">
      <summary>
            Initializes every element of the value-type Array with the given value. 
            </summary>
      <param name="array">The array to initialize. The current content is overwritten.</param>
      <param name="value">The value to which each element of the array is set.</param>
      <typeparam name="T">The type of the array content, it must be a value type.</typeparam>
      <returns>The initialized array. This is not a new instance, but identical to the array parameter.</returns>
    </member>
    <member name="T:Baselabs.Collections.DynamicListFactory">
      <summary>
            Creates dynamically sized lists.
            </summary>
    </member>
    <member name="M:Baselabs.Collections.DynamicListFactory.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Baselabs.Collections.DynamicListFactory</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Baselabs.Collections.DynamicListFactory.CreateInstance``1(System.Int32)">
      <summary>
            Creates a list.
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
      <typeparam name="T">The type of the elements in the list.</typeparam>
      <returns>The created list.</returns>
    </member>
    <member name="F:Baselabs.Collections.DynamicListFactory.Instance">
      <summary>
            An instance of the <see cref="T:Baselabs.Collections.DynamicListFactory" /> class.
            </summary>
    </member>
    <member name="P:Baselabs.Collections.DynamicListFactory.MaximumCount">
      <summary>
            Gets the maximum number of elements in the created lists.
            </summary>
    </member>
    <member name="T:Baselabs.Collections.IListFactory">
      <summary>
            Provides a method to create list instances.
            </summary>
    </member>
    <member name="M:Baselabs.Collections.IListFactory.CreateInstance``1(System.Int32)">
      <summary>
            Creates a list.
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
      <typeparam name="T">The type of the elements in the list.</typeparam>
      <returns>The created list.</returns>
    </member>
    <member name="P:Baselabs.Collections.IListFactory.MaximumCount">
      <summary>
            Gets the maximum number of elements in the created lists.
            </summary>
    </member>
    <member name="T:Baselabs.Collections.StaticList`1">
      <summary>
            Represents a strongly typed list that can be accessed by index. The number of list elements is limited.
            </summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:Baselabs.Collections.StaticList`1.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Collections.StaticList`1" /> class.
            </summary>
      <param name="maximumCount">The maximum number of elements the list can contain.</param>
    </member>
    <member name="M:Baselabs.Collections.StaticList`1.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Collections.StaticList`1" /> class with <paramref name="count" /> elements with default value.
            </summary>
      <param name="maximumCount">The maximum number of elements the list can contain.</param>
      <param name="count">The current number of elements the list contains.</param>
    </member>
    <member name="M:Baselabs.Collections.StaticList`1.Add(`0)">
      <summary>
            Adds the specified value.
            </summary>
      <param name="value">The value.</param>
      <exception cref="T:System.InvalidOperationException">
            The maximum number of elements has been exceeded.
            </exception>
    </member>
    <member name="M:Baselabs.Collections.StaticList`1.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:Baselabs.Collections.StaticList`1.Contains(`0)">
      <summary>
            This operation is not supported.
            </summary>
      <exception cref="T:System.NotSupportedException">
            The collection does not support the 'Contains' operation.
            </exception>
    </member>
    <member name="M:Baselabs.Collections.StaticList`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <paramref name="T" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:Baselabs.Collections.StaticList`1.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:Baselabs.Collections.StaticList`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:Baselabs.Collections.StaticList`1.IndexOf(`0)">
      <summary>
            This operation is not supported.
            </summary>
      <exception cref="T:System.NotSupportedException">
            The collection does not support the 'IndexOf' operation.
            </exception>
    </member>
    <member name="M:Baselabs.Collections.StaticList`1.Insert(System.Int32,`0)">
      <summary>Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.</summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.InvalidOperationException">
            The maximum number of elements has been exceeded.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="P:Baselabs.Collections.StaticList`1.IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:Baselabs.Collections.StaticList`1.Item(System.Int32)">
      <summary>
            Gets the element at the specified index.
            </summary>
      <param name="index">The index.</param>
    </member>
    <member name="F:Baselabs.Collections.StaticList`1.MaximumCount">
      <summary>
            The maximum number of elements the list may contain.
            </summary>
    </member>
    <member name="M:Baselabs.Collections.StaticList`1.Remove(`0)">
      <summary>
            This operation is not supported.
            </summary>
      <param name="value">The value.</param>
      <returns></returns>
      <exception cref="T:System.NotSupportedException">
            The collection does not support the 'Remove' operation.
            </exception>
    </member>
    <member name="M:Baselabs.Collections.StaticList`1.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Baselabs.Collections.StaticList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="T:Baselabs.Collections.StaticListFactory">
      <summary>
            Creates statically sized lists.
            </summary>
    </member>
    <member name="M:Baselabs.Collections.StaticListFactory.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Collections.StaticListFactory" /> class.
            </summary>
      <param name="maximumCount">The maximum number of elements in the created lists.</param>
    </member>
    <member name="M:Baselabs.Collections.StaticListFactory.CreateInstance``1(System.Int32)">
      <summary>
            Creates a list.
            </summary>
      <param name="capacity">The number of elements that the new list can initially store.</param>
      <typeparam name="T">The type of the elements in the list.</typeparam>
      <returns>The created list.</returns>
    </member>
    <member name="P:Baselabs.Collections.StaticListFactory.MaximumCount">
      <summary>
            Gets the maximum number of elements in the created lists.
            </summary>
    </member>
    <member name="T:Baselabs.Linq.EnumerableExtensions">
      <summary>
            This class provides additional Linq methods similar to System.Linq.Enumerable.
            </summary>
    </member>
    <member name="M:Baselabs.Linq.EnumerableExtensions.CumulativeSum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Computes a sequence of cumulative sums of a sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the cumulative sums of.</param>
      <returns>
            The cumulative sums of the values in the sequence.
            </returns>
    </member>
    <member name="M:Baselabs.Linq.EnumerableExtensions.CumulativeSum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            Computes a sequence of cumulative sums of a sequence <see cref="T:System.Double" /> values that are obtained by
            invoking a transform function on each element of the input sequence.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the cumulative sums of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
            The cumulative sums of the projected values.
            </returns>
    </member>
    <member name="M:Baselabs.Linq.EnumerableExtensions.Every``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Thins a sequence by returning every nth value starting with the first one.
            </summary>
      <param name="source">A sequence of values to be thinned.</param>
      <param name="stepping">The stepping n used for thinning. It must be at least one.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains every nth element from the input sequence.
            </returns>
    </member>
    <member name="M:Baselabs.Linq.EnumerableExtensions.Every``1(System.Collections.Generic.IList{``0},System.Int32)">
      <summary>
            Thins a list by returning every nth value starting with the first one.
            </summary>
      <param name="source">A list of values to be thinned.</param>
      <param name="stepping">The stepping n used for thinning. It must be at least one.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains every nth element from the input list.
            </returns>
    </member>
    <member name="M:Baselabs.Linq.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
      <summary>
            Runs the specified handler for each element of the list.
            </summary>
      <param name="enumerable">The enumerable to use.</param>
      <param name="handler">Delegate code to execute for each element.</param>
      <typeparam name="T">The type of the elements of <paramref name="enumerable" />.</typeparam>
    </member>
    <member name="M:Baselabs.Linq.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
      <summary>
            Runs the specified handler for each element of the list while providing the list index.
            </summary>
      <param name="enumerable">The enumerable to use.</param>
      <param name="handler">Delegate code to execute for each element accepting the index.</param>
      <typeparam name="T">The type of the elements of <paramref name="enumerable" />.</typeparam>
    </member>
    <member name="M:Baselabs.Linq.EnumerableExtensions.Prod(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
            Computes the product of a sequence of <see cref="T:System.Double" /> values.
            </summary>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the product of.</param>
      <returns>The product of the values in the sequence.</returns>
    </member>
    <member name="M:Baselabs.Linq.EnumerableExtensions.Prod``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
            Computes the product of the sequence of <see cref="T:System.Double" /> values that are obtained by
            invoking a transform function on each element of the input sequence.
            </summary>
      <param name="source">A sequence of values that are used to calculate a product.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>The product of the projected values.</returns>
    </member>
    <member name="M:Baselabs.Linq.EnumerableExtensions.SequenceGetHashCode``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Calculates the hash code of a sequence from the hash codes of all elements by using the default
            equality comparer for their type.
            </summary>
      <param name="enumerable">The sequence to calculate the hash code of.</param>
      <typeparam name="TSource">The type of the elements of the input sequence.</typeparam>
      <returns>The hash code of the sequence.</returns>
    </member>
    <member name="M:Baselabs.Linq.EnumerableExtensions.SequenceGetHashCode``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Calculates the hash code of a sequence from the hash codes of all elements by using the specified
            equality comparer for their type.
            </summary>
      <param name="enumerable">The sequence to calculate the hash code of.</param>
      <param name="comparer">The equality comparer to use.</param>
      <typeparam name="TSource">The type of the elements of the input sequence.</typeparam>
      <returns>The hash code of the sequence.</returns>
    </member>
    <member name="T:Baselabs.Math.FloatCompare">
      <summary>
            Provides methods to safely compare double and float values.
            </summary>
    </member>
    <member name="M:Baselabs.Math.FloatCompare.Compare(System.Double,System.Double)">
      <summary>
            Performs a safe comparison of two double values.<para />
            The return value is 0 if the two values are approximately equal. If d1 &gt; d2 the return value is greater than zero, and if d1 &lt; d2 the return value is less than zero.
            </summary>
      <param name="d1">The first double value.</param>
      <param name="d2">The second double value.</param>
      <returns>0 if the two values are approximately equal, greater than 0 if d1 &gt; d2, less than 0 if d1 &lt; d2.</returns>
    </member>
    <member name="M:Baselabs.Math.FloatCompare.Compare(System.Single,System.Single)">
      <summary>
            Performs a safe comparison of two float values.<para />
            The return value is 0 if the two values are approximately equal. If d1 &gt; d2 the return value is greater than zero, and if d1 &lt; d2 the return value is less than zero.
            </summary>
      <param name="f1">The first float value.</param>
      <param name="f2">The second float value.</param>
      <returns>0 if the two values are approximately equal, greater than 0 if d1 &gt; d2, less than 0 if d1 &lt; d2.</returns>
    </member>
    <member name="T:Baselabs.Math.FresnelResult">
      <summary>
            Encapsulates the results of the Fresnel integrals.
            </summary>
    </member>
    <member name="M:Baselabs.Math.FresnelResult.#ctor(System.Double,System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Baselabs.Math.FresnelResult" /> struct.
            </summary>
      <param name="c">The cosine integral C(x).</param>
      <param name="s">The sine integral S(x).</param>
    </member>
    <member name="P:Baselabs.Math.FresnelResult.C">
      <summary>
            Gets the value of the cosine integral C(x).
            </summary>
    </member>
    <member name="P:Baselabs.Math.FresnelResult.S">
      <summary>
            Gets the value of the sine integral S(x).
            </summary>
    </member>
    <member name="T:Baselabs.Math.IRandomGenerator">
      <summary>
            Describes a random number generator that produces a sequence of numbers that are uniformly distributed.
            </summary>
    </member>
    <member name="M:Baselabs.Math.IRandomGenerator.NextDouble">
      <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
      <returns>
            A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
    </member>
    <member name="T:Baselabs.Math.Math">
      <summary>
            Provides auxiliary math functions.
            </summary>
    </member>
    <member name="M:Baselabs.Math.Math.BinomialCoefficient(System.Int32,System.Int32)">
      <summary>
            Calculates the binomial coefficient <latex>C(n,k)</latex> ("n choose k"). 
            It gives the number of distinct <latex>k</latex>-element subsets that can be formed from a set containing <latex>n</latex> elements.
            </summary>
      <param name="n">The upper parameter, which is the cardinality of the set. It must be positive.</param>
      <param name="k">The lower parameter, which is the cardinality of the subsets to be formed from the set. It must be nonnegative.</param>
      <returns>The value of the binomial coefficient, which is the number of subsets. For the cases with <latex>k &gt; n</latex> 
            the method returns 0.</returns>
      <exception cref="T:System.OverflowException">
            The parameter <paramref name="n" /> is greater than 60. Possible overflow in integral-type arithmetic operations.
            </exception>
    </member>
    <member name="M:Baselabs.Math.Math.Factorial(System.Int32)">
      <summary>
            Calculates the factorial n! of the given number.
            </summary>
      <param name="n">The number.</param>
      <returns>The factorial.</returns>
    </member>
    <member name="M:Baselabs.Math.Math.FallingFactorial(System.Int32,System.Int32)">
      <summary>
            Calculates the falling factorial x^\underline{n}, also written as (x)_n or P(x,n). For any non-negative x, it gives the number of n-permutations of an x-element set.
            </summary>
      <param name="x">The cardinality of the set.</param>
      <param name="m">The cardinality of the subsets to be formed from the set.</param>
      <returns>The falling factorial value.</returns>
    </member>
    <member name="M:Baselabs.Math.Math.FresnelIntegrals(System.Double)">
      <summary>
            Calculates the values of the fresnel integrals for a given value x.<para />
            S(x) = int(0...x) sin(t²) dt, C(x) = int(0...x) cos(t²) dt
            </summary>
      <param name="x">The value x.</param>
      <returns>The values of both fresnel integrals in the FresnelResult struct.</returns>
    </member>
    <member name="M:Baselabs.Math.Math.FresnelIntegrals(System.Double,System.Double@,System.Double@)">
      <summary>
            Calculates the values of the fresnel integrals for a given value x.<para />
            S(x) = int(0...x) sin(t²) dt, C(x) = int(0...x) cos(t²) dt
            </summary>
      <param name="x">The value x.</param>
      <param name="c">The cosine integral C(x).</param>
      <param name="s">The sine integral S(x).</param>
    </member>
    <member name="M:Baselabs.Math.Math.Frexp(System.Double,System.Int32@)">
      <summary>
            Breaks the floating point number x into its binary significand (a floating point value between 0.5(included) and 1.0(excluded))
            and an integral exponent for 2, such that: x = significand * 2^exponent.
            If x is zero, both parts (significand and exponent) are zero.<para />
            (Complies with the frexp() function in C++ header cmath.)
            </summary>
      <param name="d">Floating point value to be computed.</param>
      <param name="exponent">Returns the exponent of d.</param>
      <returns>Significand of d.</returns>
    </member>
    <member name="M:Baselabs.Math.Math.Ldexp(System.Double,System.Int32)">
      <summary>
            Returns the resulting floating point value from multiplying the significand by 2 raised to the power of the exponent.<para />
            (Complies with the ldexp() function in C++ header cmath.)
            </summary>
      <param name="significand">Floating point value representing the significand.</param>
      <param name="exponent">Value of the exponent.</param>
      <returns>x * 2^exp.</returns>
    </member>
    <member name="M:Baselabs.Math.Math.Modulus(System.Double,System.Double)">
      <summary>
            A true modulus operator. It differs from C/C++/C#'s %-Operator in
            that the latter returns a remainder rather than a modulus, which is
            the same for positive, but differs for negative values of the
            numerator.
            This operator is equal to the Matlab mod operator.
            </summary>
    </member>
    <member name="M:Baselabs.Math.Math.TruncateSignificant(System.Double,System.Int32)">
      <summary>
            Truncates the floating point number x to the given number of significant digits.
            </summary>
      <param name="x">Floating point value to be truncated.</param>
      <param name="significantDigits">Number of significant digits of the result.</param>
      <returns>The truncated number.</returns>
    </member>
  </members>
</doc>